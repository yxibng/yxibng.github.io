<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Xcode 源码调试微信 xlog</title>
    <link href="/2024/03/08/debug-xlog-osx/"/>
    <url>/2024/03/08/debug-xlog-osx/</url>
    
    <content type="html"><![CDATA[<h1 id="Tencent-masr-xlog-macOS-源码调试"><a href="#Tencent-masr-xlog-macOS-源码调试" class="headerlink" title="Tencent&#x2F;masr xlog macOS 源码调试"></a>Tencent&#x2F;masr xlog macOS 源码调试</h1><h2 id="get-include-folder"><a href="#get-include-folder" class="headerlink" title="get include folder"></a>get include folder</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> mars<br><span class="hljs-keyword">python</span> build_osx.<span class="hljs-keyword">py</span><br>Enter <span class="hljs-keyword">menu</span>:<br><span class="hljs-number">1</span>. Clean &amp;&amp; build.<br><span class="hljs-number">2</span>. Gen OSX Project.<br><span class="hljs-number">3</span>. Build xlog.<br><span class="hljs-number">4</span>. Exit<br></code></pre></td></tr></table></figure><p>选择1，生成 <code>mars.framework</code>, 我们主要是使用头文件目录。</p><h2 id="gen-osx-project"><a href="#gen-osx-project" class="headerlink" title="gen osx project"></a>gen osx project</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> mars<br><span class="hljs-keyword">python</span> build_osx.<span class="hljs-keyword">py</span><br>Enter <span class="hljs-keyword">menu</span>:<br><span class="hljs-number">1</span>. Clean &amp;&amp; build.<br><span class="hljs-number">2</span>. Gen OSX Project.<br><span class="hljs-number">3</span>. Build xlog.<br><span class="hljs-number">4</span>. Exit<br># <span class="hljs-built_in">input</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- ==============config mars====================</span><br><span class="hljs-comment">-- Configuring done (6.6s)</span><br><span class="hljs-comment">-- Generating done (0.0s)</span><br><span class="hljs-comment">-- Build files have been written to: /Users/yxibng/Github/mars/mars/cmake_build/OSX</span><br></code></pre></td></tr></table></figure><p>在 mars&#x2F;cmake_build&#x2F;OSX 目录中找到 mars.xcodeproj</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> mars/cmake_build/OSX <br><br><span class="hljs-keyword">ls</span><br>CMakeCache.txt       baseevent            comm                 sdt<br>CMakeFiles           boost                <span class="hljs-keyword">include</span>              stn<br>CMakeScripts         <span class="hljs-keyword">boot</span>                 install_manifest.txt xlog<br>Darwin.<span class="hljs-keyword">out</span>           build                lib                  zstd<br><span class="hljs-keyword">app</span>                  cmake_install.cmake  mars.xcodeproj<br></code></pre></td></tr></table></figure><h2 id="将-mars-xcodeproj-作为子工程，添加为依赖项"><a href="#将-mars-xcodeproj-作为子工程，添加为依赖项" class="headerlink" title="将 mars.xcodeproj 作为子工程，添加为依赖项"></a>将 mars.xcodeproj 作为子工程，添加为依赖项</h2><p>通过 cmake 生成的 project 定义了生成 mars.framework 的几个相关target， 将 mars.xcodeproj 设置为子工程，<br>主工程依赖 mars.xcodeproj 定义的target，即可实现 xlog 的源码调试。</p><ol><li>create new macOS project: xlog-test, selcte language: Objective-C</li><li>mars.xcodeproj 添加到 xlog-test 工程中</li><li>将 mars.framework&#x2F;Headers 拷贝到 xlog-test 根目录</li><li>xlog-test 配置 header search paths， 值为 <code>$(SRCROOT)/Headers</code><br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/17098674388361709867437953.png" alt="17098674388361709867437953.png"></li><li>xlog-test 配置 linked libraries<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/17098675228351709867522443.png" alt="17098675228351709867522443.png"></li><li>添加辅助代码，从 MacDemo 中获取， 拷贝到 xlog-test 工程中<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/17098675948351709867593931.png" alt="17098675948351709867593931.png"></li><li>LogHelper 中添加 setup 方法，用于初始化 xlog<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino">+ (<span class="hljs-type">void</span>)setup &#123;<br>    NSArray *paths = <span class="hljs-built_in">NSSearchPathForDirectoriesInDomains</span>(NSLibraryDirectory, NSUserDomainMask, YES);<br>    NSString *libraryDirectory = [paths firstObject];<br>    <br>    <span class="hljs-comment">// init xlog</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> DEBUG</span><br>    <span class="hljs-built_in">xlogger_SetLevel</span>(kLevelDebug);<br>    mars::xlog::<span class="hljs-built_in">appender_set_console_log</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">xlogger_SetLevel</span>(kLevelInfo);<br>    <span class="hljs-built_in">appender_set_console_log</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    mars::xlog::XLogConfig config;<br>    config.mode_ = mars::xlog::kAppenderAsync;<br>    config.logdir_ = [[libraryDirectory stringByAppendingString:@<span class="hljs-string">&quot;/log/&quot;</span>] UTF8String];<br>    config.nameprefix_ = <span class="hljs-string">&quot;Test&quot;</span>;<br>    config.pub_key_ = <span class="hljs-string">&quot;&quot;</span>;<br>    config.compress_mode_ = mars::xlog::kZlib;<br>    config.compress_level_ = <span class="hljs-number">0</span>;<br>    config.cachedir_ = <span class="hljs-string">&quot;&quot;</span>;<br>    config.cache_days_ = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">appender_open</span>(config);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>AppDelegate初始化调用<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">- (<span class="hljs-built_in">void</span>)applicationDidFinishLaunching:(NSNotification *)aNotification &#123;<br>    <span class="hljs-comment">// Insert code here to initialize your application</span><br><span class="hljs-string">    [LogHelper setup]</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>用<code>LogUtil.h</code>中宏定义打log<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">LOG_ERROR<span class="hljs-comment">(kModuleViewController, @&quot;this is a test log!&quot;)</span>;<br></code></pre></td></tr></table></figure></li><li>愉快地断点，调试吧</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>结构体位域中的高低位问题</title>
    <link href="/2023/06/09/c++/2023-06-09-%E4%BD%8D%E5%9F%9F%20%E9%AB%98%E4%BD%8E%E4%BD%8D/"/>
    <url>/2023/06/09/c++/2023-06-09-%E4%BD%8D%E5%9F%9F%20%E9%AB%98%E4%BD%8E%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>测试代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">union</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">struct</span> &#123;<br>        <span class="hljs-type">uint8_t</span> a: <span class="hljs-number">1</span>;<br>        <span class="hljs-type">uint8_t</span> b: <span class="hljs-number">3</span>;<br>        <span class="hljs-type">uint8_t</span> c: <span class="hljs-number">2</span>;<br>        <span class="hljs-type">uint8_t</span> d: <span class="hljs-number">2</span>;<br>    &#125;;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> </span>&#123;<br>    Test test;<br>    test.a = <span class="hljs-number">1</span>;<br>    test.b = <span class="hljs-number">0</span>;<br>    test.c = <span class="hljs-number">0</span>;<br>    test.d = <span class="hljs-number">0b11</span>;<br><br>    std::cout &lt;&lt; test.ch &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 macOS 上断点查看内存如下</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16863024030361686302402947.png"></p><h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><p>可以看到，定义在前的位域，在字节的低位。<br>位域在内存中存储的顺序刚好与定义的先后相反。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDB Examining Memory</title>
    <link href="/2023/05/23/lldb/2023-05-23-GDB%20Examining%20Memory/"/>
    <url>/2023/05/23/lldb/2023-05-23-GDB%20Examining%20Memory/</url>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="https://sourceware.org/gdb/onlinedocs/gdb/Output-Formats.html">gdb&#x2F;Output-Formats</a><br><a href="https://sourceware.org/gdb/onlinedocs/gdb/Memory.html#Memory">gdb&#x2F;Memory</a></p><h1 id="Output-Formats"><a href="#Output-Formats" class="headerlink" title="Output Formats"></a>Output Formats</h1><ul><li><code>x</code> : Print the binary representation of the value in hexadecimal.</li><li><code>d</code>: Print the binary representation of the value in hexadecimal.</li><li><code>u</code>: Print the binary representation of the value as an decimal, as if it were unsigned.</li><li><code>o</code>: Print the binary representation of the value in octal.</li><li><code>t</code>: Print the binary representation of the value in binary. The letter ‘t’ stands for “two”.</li><li><code>a</code>: Print as an address, both absolute in hexadecimal and as an offset from the nearest preceding symbol. </li><li><code>c</code>: Cast the value to an integer (unlike other formats, this does not just reinterpret the underlying bits) and print it as a character constant.</li><li><code>f</code>: Regard the bits of the value as a floating point number and print using typical floating point syntax.</li><li><code>s</code>:Regard as a string, if possible. With this format, pointers to single-byte data are displayed as null-terminated strings and arrays of single-byte data are displayed as fixed-length strings. Other values are displayed in their natural types.</li><li><code>z</code>:Like ‘x’ formatting, the value is treated as an integer and printed as hexadecimal, but leading zeros are printed to pad the value to the size of the integer type.</li><li><code>r</code>:Print using the ‘raw’ formatting. By default, GDB will use a Python-based pretty-printer, if one is available (see Pretty Printing). This typically results in a higher-level display of the value’s contents. The ‘r’ format bypasses any Python pretty-printer which might exist.</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">(lldb) p/x 10<br>(int) <span class="hljs-variable">$0</span> = 0x0000000a<br>(lldb) p/t 10<br>(int) <span class="hljs-variable">$1</span> = 0b00000000000000000000000000001010<br>(lldb) p/d 0x0000000a<br>(int) <span class="hljs-variable">$2</span> = 10<br>(lldb) p/u 0x0000000a<br>(int) <span class="hljs-variable">$3</span> = 10<br>(lldb) p/o 0x0000000a<br>(int) <span class="hljs-variable">$4</span> = 012<br>(lldb) p/o 0x0000000a<br></code></pre></td></tr></table></figure><h1 id="Examining-Memory"><a href="#Examining-Memory" class="headerlink" title="Examining Memory"></a>Examining Memory</h1><p>You can use the command x (for “examine”) to examine memory in any of several formats, independently of your program’s data types.</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">x</span>/nfu addr<br><span class="hljs-keyword">x</span> addr<br></code></pre></td></tr></table></figure><ul><li><code>n</code>: the repeat count<br>  The repeat count is a decimal integer; the default is 1. It specifies how much memory (counting by units u) to display. If a negative number is specified, memory is examined backward from addr.</li><li><code>f</code>: the display format<br>  The display format is one of the formats used by print (‘x’, ‘d’, ‘u’, ‘o’, ‘t’, ‘a’, ‘c’, ‘f’, ‘s’), ‘i’ (for machine instructions) and ‘m’ (for displaying memory tags). The default is ‘x’ (hexadecimal) initially. The default changes each time you use either x or print.</li><li><code>u</code>:the unit size<br>  The unit size is any of:<br>  - <code>b</code>: Bytes<br>  - <code>h</code>: Halfwords (two bytes).<br>  - <code>w</code>: Words (four bytes). This is the initial default.<br>  - <code>g</code>:Giant words (eight bytes).</li><li><code>addr</code>:starting display address<br>  addr is the address where you want GDB to begin displaying memory.<br>  You can also specify a negative repeat count to examine memory backward from the given address. For example, ‘x&#x2F;-3uh 0x54320’ prints three halfwords (h) at 0x5431a, 0x5431c, and 0x5431e.</li></ul><p> 示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># display three halfwords (h) of memory, formatted as unsigned decimal integers (‘u’), starting at address 0x54320</span><br><span class="hljs-attribute">x</span>/<span class="hljs-number">3</span>uh <span class="hljs-number">0</span>x54320<br><br><span class="hljs-comment"># prints the four words (‘w’) of memory above the stack pointer in hexadecimal (‘x’)</span><br><br><span class="hljs-attribute">x</span>/<span class="hljs-number">4</span>xw $sp<br><br><span class="hljs-comment"># prints three halfwords (h) at 0x5431a, 0x5431c, and 0x5431e.</span><br><br><span class="hljs-attribute">x</span>/-<span class="hljs-number">3</span>uh <span class="hljs-number">0</span>x54320<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>lldb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oh my zsh prompt 展示当前路径</title>
    <link href="/2023/05/17/Shell/2023-05-17-oh%20my%20zsh%20%E5%B1%95%E7%A4%BA%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/05/17/Shell/2023-05-17-oh%20my%20zsh%20%E5%B1%95%E7%A4%BA%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p>使用的主题为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ZSH_THEME</span>=<span class="hljs-string">&quot;robbyrussell&quot;</span><br></code></pre></td></tr></table></figure><p>修改配置, path <code>~/.oh-my-zsh/themes/robbyrussell.zsh-theme</code>, 将 <code>%c</code> 替换为 <code>%d</code></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><br><span class="hljs-comment"># before</span><br>PROMPT=<span class="hljs-string">&quot;%(?:%&#123;<span class="hljs-variable">$fg_bold</span>[green]%&#125;➜ :%&#123;<span class="hljs-variable">$fg_bold</span>[red]%&#125;➜ ) %&#123;<span class="hljs-variable">$fg</span>[cyan]%&#125;%c%&#123;<span class="hljs-variable">$reset_color</span>%&#125;&quot;</span><br>PROMPT+=<span class="hljs-string">&#x27; <span class="hljs-variable">$(git_prompt_info)</span>&#x27;</span><br><br><span class="hljs-comment"># after</span><br>PROMPT=<span class="hljs-string">&quot;%(?:%&#123;<span class="hljs-variable">$fg_bold</span>[green]%&#125;➜ :%&#123;<span class="hljs-variable">$fg_bold</span>[red]%&#125;➜ )&quot;</span><br>PROMPT+=<span class="hljs-string">&#x27; %&#123;<span class="hljs-variable">$fg</span>[cyan]%&#125;%d%&#123;<span class="hljs-variable">$reset_color</span>%&#125; <span class="hljs-variable">$(git_prompt_info)</span>&#x27;</span><br><br></code></pre></td></tr></table></figure><p>参考： <a href="https://links.jianshu.com/go?to=https://jlk.fjfi.cvut.cz/arch/manpages/man/zshmisc.1%23EXPANSION_OF_PROMPT_SEQUENCES">EXPANSION_OF_PROMPT_SEQUENCES</a></p><p>Shell state</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs applescript">%<span class="hljs-comment">#</span><br>A `<span class="hljs-comment">#&#x27; if the shell is running with privileges, a `%&#x27; if not. Equivalent to `%(!.#.%%)&#x27;. The definition of `privileged&#x27;, for these purposes, is that either the effective user ID is zero, or, if POSIX.1e capabilities are supported, that at least one capability is raised in either the Effective or Inheritable capability vectors.</span><br><br>%?<br>The <span class="hljs-literal">return</span> status <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> command executed just <span class="hljs-keyword">before</span> <span class="hljs-keyword">the</span> prompt.<br><br>%_<br>The status <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> parser, i.e. <span class="hljs-keyword">the</span> shell constructs (like `<span class="hljs-keyword">if</span>&#x27; <span class="hljs-keyword">and</span> `<span class="hljs-keyword">for</span>&#x27;) <span class="hljs-keyword">that</span> have been started <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> command line. If <span class="hljs-keyword">given</span> an <span class="hljs-built_in">integer</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">that</span> many strings will be printed; zero <span class="hljs-keyword">or</span> negative <span class="hljs-keyword">or</span> no <span class="hljs-built_in">integer</span> means print <span class="hljs-keyword">as</span> many <span class="hljs-keyword">as</span> there are. This <span class="hljs-keyword">is</span> most useful <span class="hljs-keyword">in</span> prompts PS2 <span class="hljs-keyword">for</span> continuation lines <span class="hljs-keyword">and</span> PS4 <span class="hljs-keyword">for</span> debugging <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> XTRACE option; <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> latter case <span class="hljs-keyword">it</span> will also work non-interactively.<br><br>%^<br>The status <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> parser <span class="hljs-keyword">in</span> <span class="hljs-built_in">reverse</span>. This <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> same <span class="hljs-keyword">as</span> `%_&#x27; other than <span class="hljs-keyword">the</span> order <span class="hljs-keyword">of</span> strings. It <span class="hljs-keyword">is</span> often used <span class="hljs-keyword">in</span> RPS2.<br><br>%d%/<br>Current working directory. If an <span class="hljs-built_in">integer</span> follows <span class="hljs-keyword">the</span> `%&#x27;, <span class="hljs-keyword">it</span> specifies a <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> trailing components <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> current working directory <span class="hljs-keyword">to</span> show; zero means <span class="hljs-keyword">the</span> whole path. A negative <span class="hljs-built_in">integer</span> specifies leading components, i.e. %<span class="hljs-number">-1</span>d specifies <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> component.<br><br>%~<br>As %d <span class="hljs-keyword">and</span> %/, <span class="hljs-keyword">but</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> current working directory <span class="hljs-keyword">starts with</span> $HOME, <span class="hljs-keyword">that</span> part <span class="hljs-keyword">is</span> replaced <span class="hljs-keyword">by</span> a `~&#x27;. Furthermore, <span class="hljs-keyword">if</span> <span class="hljs-keyword">it</span> has a named directory <span class="hljs-keyword">as</span> <span class="hljs-keyword">its</span> prefix, <span class="hljs-keyword">that</span> part <span class="hljs-keyword">is</span> replaced <span class="hljs-keyword">by</span> a `~&#x27; followed <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> directory, <span class="hljs-keyword">but</span> only <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> <span class="hljs-literal">result</span> <span class="hljs-keyword">is</span> shorter than <span class="hljs-keyword">the</span> full path; see Dynamic <span class="hljs-keyword">and</span> Static named directories <span class="hljs-keyword">in</span> zshexpn(<span class="hljs-number">1</span>).<br><br>%e<br>Evaluation depth <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> current sourced <span class="hljs-built_in">file</span>, shell function, <span class="hljs-keyword">or</span> eval. This <span class="hljs-keyword">is</span> incremented <span class="hljs-keyword">or</span> decremented <span class="hljs-keyword">every</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">the</span> value <span class="hljs-keyword">of</span> %N <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">or</span> reverted <span class="hljs-keyword">to</span> a previous value, respectively. This <span class="hljs-keyword">is</span> most useful <span class="hljs-keyword">for</span> debugging <span class="hljs-keyword">as</span> part <span class="hljs-keyword">of</span> $PS4.<br><br>%h%!<br>Current history event <span class="hljs-built_in">number</span>.<br><br>%i<br>The line <span class="hljs-built_in">number</span> currently being executed <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">script</span>, sourced <span class="hljs-built_in">file</span>, <span class="hljs-keyword">or</span> shell function <span class="hljs-keyword">given</span> <span class="hljs-keyword">by</span> %N. This <span class="hljs-keyword">is</span> most useful <span class="hljs-keyword">for</span> debugging <span class="hljs-keyword">as</span> part <span class="hljs-keyword">of</span> $PS4.<br><br>%I<br>The line <span class="hljs-built_in">number</span> currently being executed <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> %x. This <span class="hljs-keyword">is</span> similar <span class="hljs-keyword">to</span> %i, <span class="hljs-keyword">but</span> <span class="hljs-keyword">the</span> line <span class="hljs-built_in">number</span> <span class="hljs-keyword">is</span> always a line <span class="hljs-built_in">number</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">the</span> code was defined, even <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> code <span class="hljs-keyword">is</span> a shell function.<br><br>%j<br>The <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> jobs.<br><br>%L<br>The current value <span class="hljs-keyword">of</span> $SHLVL.<br><br>%N<br>The <span class="hljs-built_in">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">script</span>, sourced <span class="hljs-built_in">file</span>, <span class="hljs-keyword">or</span> shell function <span class="hljs-keyword">that</span> zsh <span class="hljs-keyword">is</span> currently executing, whichever was started most recently. If there <span class="hljs-keyword">is</span> none, this <span class="hljs-keyword">is</span> equivalent <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> parameter $<span class="hljs-number">0.</span> An <span class="hljs-built_in">integer</span> may follow <span class="hljs-keyword">the</span> `%&#x27; <span class="hljs-keyword">to</span> specify a <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> trailing path components <span class="hljs-keyword">to</span> show; zero means <span class="hljs-keyword">the</span> full path. A negative <span class="hljs-built_in">integer</span> specifies leading components.<br><br>%x<br>The <span class="hljs-built_in">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> containing <span class="hljs-keyword">the</span> source code currently being executed. This behaves <span class="hljs-keyword">as</span> %N except <span class="hljs-keyword">that</span> function <span class="hljs-keyword">and</span> eval command names are <span class="hljs-keyword">not</span> shown, instead <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">where</span> they were defined.<br><br>%c%.%C<br>Trailing component <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> current working directory. An <span class="hljs-built_in">integer</span> may follow <span class="hljs-keyword">the</span> `%&#x27; <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> more than one component. Unless `%C&#x27; <span class="hljs-keyword">is</span> used, tilde contraction <span class="hljs-keyword">is</span> performed <span class="hljs-keyword">first</span>. These are deprecated <span class="hljs-keyword">as</span> %c <span class="hljs-keyword">and</span> %C are equivalent <span class="hljs-keyword">to</span> %<span class="hljs-number">1</span>~ <span class="hljs-keyword">and</span> %<span class="hljs-number">1</span>/, respectively, <span class="hljs-keyword">while</span> explicit positive integers have <span class="hljs-keyword">the</span> same effect <span class="hljs-keyword">as</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> latter two sequences.<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webrtc iOS 源码调试</title>
    <link href="/2023/05/09/webrtc/2023-05-09-webrtc-%E8%B0%83%E8%AF%95/"/>
    <url>/2023/05/09/webrtc/2023-05-09-webrtc-%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><ol><li>install <a href="https://webrtc.github.io/webrtc-org/native-code/development/prerequisite-sw/">Chromium depot_tools</a></li></ol><p><a href="https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up">install on Linux &#x2F; Mac</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> PATH=/path/to/depot_tools:<span class="hljs-variable">$PATH</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://webrtc.github.io/webrtc-org/native-code/ios/">fetch source code</a></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">fetch</span> <span class="hljs-comment">--nohooks webrtc_ios</span><br>gclient sync<br></code></pre></td></tr></table></figure><h2 id="生成可调试项目"><a href="#生成可调试项目" class="headerlink" title="生成可调试项目"></a>生成可调试项目</h2><p>Using Xcode</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> <span class="hljs-variable">$src</span><br>gn <span class="hljs-keyword">gen</span> <span class="hljs-keyword">out</span>/ios --<span class="hljs-keyword">args</span>=&#x27;target_os=<span class="hljs-string">&quot;ios&quot;</span> target_cpu=<span class="hljs-string">&quot;arm64&quot;</span> rtc_include_tests=false&#x27; --ide=xcode<br><span class="hljs-keyword">open</span> -a Xcode.<span class="hljs-keyword">app</span> <span class="hljs-keyword">out</span>/ios/all.xcodeproj <br></code></pre></td></tr></table></figure><p>选择 target <code>AppRTCMobile</code> 添加签名，运行</p><h1 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h1><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16922434326171692243431723.png" alt="16922434326171692243431723.png"></p><p>解决方案， 修改 <code>src/build/conifg/ios/ios_sdk.gni</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># `security find-identity -v -p codesigning`.</span><br><span class="hljs-attr">ios_code_signing_identity_description</span> = <span class="hljs-string">&quot;Apple Development&quot;</span><br></code></pre></td></tr></table></figure><p>执行命令 <code>security find-identity -v -p codesigning</code> </p><p>将 <code>Apple Development</code> 改为命令给出的列表中的具体的一项， 例如</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># `security find-identity -v -p codesigning`.</span><br><span class="hljs-attr">ios_code_signing_identity_description</span> = <span class="hljs-string">&quot;Apple Development: xiaobing yao (24ZM6UP2MW)&quot;</span><br></code></pre></td></tr></table></figure><p>之后重新执行上面的构建命令即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>webrtc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Apple Configurator 获取 ipa 文件</title>
    <link href="/2023/03/14/ios/2023-03-14-%E4%BD%BF%E7%94%A8Apple%20Configurator%20%E8%8E%B7%E5%8F%96%20ipa%20%E6%96%87%E4%BB%B6/"/>
    <url>/2023/03/14/ios/2023-03-14-%E4%BD%BF%E7%94%A8Apple%20Configurator%20%E8%8E%B7%E5%8F%96%20ipa%20%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.jianshu.com/p/86f35a6a64a7">Apple Configuration 2 获取ipa文件</a></p><h1 id="工具-Apple-Configurator"><a href="#工具-Apple-Configurator" class="headerlink" title="工具 Apple Configurator"></a>工具 Apple Configurator</h1><p>可以在 Mac 的 App Store 中下载</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16787776997821678777699715.png"></p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ol><li><p>连接手机</p></li><li><p>点击 Add -&gt; Apps -&gt; 输入 app 名字 -&gt; 点击添加</p></li></ol><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16787779407831678777940467.png"></p><ol start="3"><li>等待下载完成, 不要操作</li></ol><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16787783759431678778375920.png"></p><ol start="4"><li>去目录里找 ipa 文件</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/Library/</span>Group Containers<span class="hljs-regexp">/K36BKF7T3D.group.com.apple.configurator/</span>Library<span class="hljs-regexp">/Caches/</span>Assets<span class="hljs-regexp">/TemporaryItems/</span>MobileApps<span class="hljs-regexp">/36244314-7400-420B-BC2A-AC3C4988F115/</span><span class="hljs-number">414478124</span>/WeChat <span class="hljs-number">8.0</span>.<span class="hljs-number">33</span>.ipa<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>open your terminal from xcode</title>
    <link href="/2023/03/07/2023-03-07-open-your-terminal-from-xcode/"/>
    <url>/2023/03/07/2023-03-07-open-your-terminal-from-xcode/</url>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://blog.eidinger.info/open-your-terminal-from-xcode">Open your terminal from Xcode</a></p><p>实现方式： </p><p>添加一个 Xcode Behaviors， 给 behavior 指定一个 shell script， behavior 触发的时候， 执行改脚本以当前目录打开 terminal。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>创建一个 shell 脚本</p><blockquote><p>open-iterm-from-xcode</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PWD</span>&quot;</span><br><span class="hljs-comment"># remove a potential suffix in case Xcode shows a Swift Package</span><br>suffix=<span class="hljs-string">&quot;/.swiftpm/xcode&quot;</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-variable">$&#123;dir//$suffix/&#125;</span><br>open -a iterm <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span></span><br></code></pre></td></tr></table></figure><p>添加执行权限</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">chmod +x <span class="hljs-built_in">open</span>-iterm-<span class="hljs-built_in">from</span>-xcode<br></code></pre></td></tr></table></figure><p>添加 Xcode Behaviors</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16781590158101678159015713.png"></p><p>打开终端</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16781591208101678159120572.png"></p><p>也可以使用，快捷键 <code>cmd + T</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 rbenv 来安装ruby</title>
    <link href="/2022/12/21/2022-12-21-rbenv/"/>
    <url>/2022/12/21/2022-12-21-rbenv/</url>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://github.com/rbenv/rbenv">rbenv</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Install Homebrew</span><br><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br><br><span class="hljs-comment"># Install rbenv and ruby-build</span><br>brew install rbenv<br><br><span class="hljs-comment"># Set up rbenv integration with your shell</span><br>rbenv init<br><br><span class="hljs-comment"># Check your installation</span><br>curl -fsSL https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rbenv/</span>rbenv-installer<span class="hljs-regexp">/raw/m</span>ain<span class="hljs-regexp">/bin/</span>rbenv-doctor | bash<br></code></pre></td></tr></table></figure><p>配置 .zshrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># rbenv</span><br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(rbenv init - zsh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Restart your terminal to apply your changes. Next, you can install the Ruby version you want. Let’s install the latest stable version:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rbenv</span> install <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">rbenv</span> global <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">ruby</span> -v<br><span class="hljs-attribute">ruby</span> <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>p0 (<span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">25</span> revision <span class="hljs-number">95</span>aff21468)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ruby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ios keychain 总结</title>
    <link href="/2022/11/26/ios/2022-11-26-ios%20keychain%20%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/26/ios/2022-11-26-ios%20keychain%20%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Keychain-是什么"><a href="#Keychain-是什么" class="headerlink" title="Keychain  是什么"></a>Keychain  是什么</h1><p>一个加密的数据库， 可以用来存储小的用户数据， 包括</p><ul><li>kSecClassGenericPassword：通用密码（可以用来存自定义数据）</li><li>kSecClassInternetPassword：互联网密码</li><li>kSecClassCertificate：证书</li><li>kSecClassKey：秘钥</li><li>kSecClassIdentity：证书+秘钥</li></ul><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16692950150511669295014987.png"><br>Figure 1 Securing the user’s secrets in a keychain</p><p>打开 mac 系统的 keychain 观察一下， 发现系统有多个keychain，每个keychain都有上图对应的项目<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16694375672261669437566402.png"></p><h1 id="如何管理数据，增删查改"><a href="#如何管理数据，增删查改" class="headerlink" title="如何管理数据，增删查改"></a>如何管理数据，增删查改</h1><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16692963470741669296346746.png"><br>Figure 1 Putting data and attributes into a keychain</p><p>keychain 将要存储的数据封装为 SecKeychainItemRef，通过存取 SecKeychainItem 来达到对数据的管理。</p><p>SecKeychainItemRef 包含</p><ul><li>data， CFData， 要存取的数据</li><li>attributes, 该条目的属性，存取权限，查询标签等</li></ul><p>提供的api</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//添加</span><br>OSStatus <span class="hljs-built_in">SecItemAdd</span>(CFDictionaryRef attributes, CFTypeRef  _Nullable *result);<br><span class="hljs-comment">//查询</span><br>OSStatus <span class="hljs-built_in">SecItemCopyMatching</span>(CFDictionaryRef query, CFTypeRef  _Nullable *result);<br><span class="hljs-comment">//更新</span><br>OSStatus <span class="hljs-built_in">SecItemUpdate</span>(CFDictionaryRef query, CFDictionaryRef attributesToUpdate);<br><span class="hljs-comment">//删除</span><br>OSStatus <span class="hljs-built_in">SecItemDelete</span>(CFDictionaryRef query);<br><br></code></pre></td></tr></table></figure><h2 id="SecItemAdd"><a href="#SecItemAdd" class="headerlink" title="SecItemAdd"></a>SecItemAdd</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">OSStatus SecItemAdd(<span class="hljs-built_in">CFDictionaryRef</span> attributes, <span class="hljs-built_in">CFTypeRef</span>  _Nullable *result);<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><strong>attributes</strong></p><p>一个字典，描述要添加的数据：</p><ul><li>要添加数据类型，对应的 key 为<code>kSecClass</code>, value 可以是<ul><li>kSecClassGenericPassword：通用密码（可以用来存自定义数据）</li><li>kSecClassInternetPassword：互联网密码</li><li>kSecClassCertificate：证书</li><li>kSecClassKey：秘钥</li><li>kSecClassIdentity：证书+秘钥</li></ul></li><li>数添加的数据本身, key 为 <code> kSecValueData</code>, value 为 <code>CFDataRef</code> 类型</li><li>关联的属性, 参考：<a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/item_attribute_keys_and_values?language=objc">Item Attribute Keys and Values</a><ul><li>每种类型关联的属性可以不同，例如 kSecClassInternetPassword 可以关联 <code>kSecAttrServer</code>, <code>kSecAttrPort</code>, <code>kSecAttrProtocol</code>， 而 <code>kSecClassGenericPassword</code>就没有这些选项</li><li><code>kSecAttrAccessGroup</code> 可以指定存入的keychain group，这个会影响到查询范围</li></ul></li><li>添加后，返回添加结果的类型，指定类型的数据会存入 result 字段。参考：<a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/item_return_result_keys?language=objc"> Item Return Result Keys</a></li></ul><p><strong>result</strong></p><p>添加结束，函数返回，指向新添加的条目。根据 attributes 中指定的类型，返回对应的值。参考： <a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/item_return_result_keys?language=objc"> Item Return Result Keys</a></p><p>一般添加不关心新条目，传nil</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功或者错误码。参考：<a href="https://developer.apple.com/documentation/security/1542001-security_framework_result_codes?language=objc">Security Framework Result Codes</a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>kSecAttrAccessGroup 可以指定添加到 钥匙串分组，该分组中的成员共享该条目</li><li>一次添加多条，可以使用<code>kSecUseItemList </code>传入字典数组，但是不能用于密码类型</li><li>添加是同步执行，放到主线程可能会卡界面，可以用异步方式</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">- (void)addKeychainItemWithAttributes:(CFDictionaryRef)attrs completion:(<span class="hljs-built_in">void</span>(^)(OSStatus status, CFTypeRef item))completion &#123;<br>    <span class="hljs-built_in">dispatch_async</span>(backgroundQueue, ^&#123;<br>        CFTypeRef item = NULL;<br>        OSStatus addResult = SecItemAdd(attrs, &amp;item);<br>        <span class="hljs-built_in">completion</span>(addResult, item);<br>        if (item) &#123;<br>            <span class="hljs-built_in">CFRelease</span>(item);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SecItemCopyMatching"><a href="#SecItemCopyMatching" class="headerlink" title="SecItemCopyMatching"></a>SecItemCopyMatching</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">OSStatus SecItemCopyMatching(<span class="hljs-built_in">CFDictionaryRef</span> query, <span class="hljs-built_in">CFTypeRef</span>  _Nullable *result);<br></code></pre></td></tr></table></figure><p>通过 query 指定查询条件，将查询结果存入 result 中。</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p><strong>query</strong><br>用于指定查询条件</p><ul><li>查询的数据类型，通过 <code>kSecClass</code> 指定</li><li>关联的属性， 用于缩小查询范围</li><li>查询参数，返回一条还是多条匹配项，是否大消息敏感，或者从特定项中搜索。参考： <a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/search_attribute_keys_and_values?language=objc"> Search Attribute Keys and Values</a></li><li>指定返回类型，指定的类型不同，result 中返回的类型就不同。 参考： <a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/item_return_result_keys?language=objc">Item Return Result Keys </a></li></ul><p>**result **</p><p>保存查询结果。<br>例如： 指定  <code>kSecReturnData: kCFBooleanTrue</code>  ，result 中存的就是<code>CFDataRef </code>类型的数据。参考： <a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/item_return_result_keys?language=objc">Item Return Result Keys</a></p><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>成功或者错误码。参考：<a href="https://developer.apple.com/documentation/security/1542001-security_framework_result_codes?language=objc">Security Framework Result Codes</a></p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li>默认返回第一个匹配项，如果想查询多条匹配，指定 <code>kSecMatchLimit</code>  大于1， 此时 result 为 <code>CFArrayRef</code>  类型</li><li>当类型为<code>kSecInternetPasswordItemClass</code> 或 <code>kSecGenericPasswordItemClass</code>时， 不能同时指定<code>kSecReturnData</code> 和 <code>kSecMatchLimitAll</code>, 原因是拷贝每个密码时，需要额外的授权验证。</li><li>默认情况下，会搜索当前keychain 以及所有加入的 keychain group， 通过 <code>kSecAttrAccessGroup</code> 可以指定要在哪个 keychain group 查询</li><li>主线程同步执行会卡UI， 可以异步执行</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-type">void</span>)findKeychainItemWithAttributes:(<span class="hljs-built_in">NSDictionary</span> *)attributes completion:(<span class="hljs-type">void</span>(^)(OSStatus status, <span class="hljs-built_in">CFTypeRef</span> item))completion &#123;<br>    <span class="hljs-built_in">dispatch_async</span>(backgroundQueue, ^&#123;<br>        <span class="hljs-built_in">CFDictionaryRef</span> attrs = (__bridge <span class="hljs-built_in">CFDictionaryRef</span>)attributes;<br>        <span class="hljs-built_in">CFTypeRef</span> item = <span class="hljs-literal">NULL</span>;<br>        OSStatus result = SecItemCopyMatching(attrs, &amp;item);<br>        completion(result, item);<br>        <span class="hljs-built_in">CFRelease</span>(item);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SecItemUpdate"><a href="#SecItemUpdate" class="headerlink" title="SecItemUpdate"></a>SecItemUpdate</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">OSStatus SecItemUpdate(<span class="hljs-built_in">CFDictionaryRef</span> query, <span class="hljs-built_in">CFDictionaryRef</span> attributesToUpdate);<br></code></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p><strong>query</strong></p><p>用来指定要更新的条目, 执行更新，需要先查询到要更新的条目。<br>参考 SecItemCopyMatching 如何指定查询条件。</p><p><strong>attributesToUpdate</strong></p><p>指定需要更新的属性。</p><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>成功或者错误码。参考：<a href="https://developer.apple.com/documentation/security/1542001-security_framework_result_codes?language=objc">Security Framework Result Codes</a></p><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>主线程同步执行会卡UI， 可以异步执行</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">- (void)updateKeyChainItemWithAttributes:(CFDictionaryRef)attrs update:(CFDictionaryRef)update completion:(<span class="hljs-built_in">void</span>(^)(OSStatus status))completion &#123;<br>    <span class="hljs-built_in">dispatch_async</span>(backgroundQueue, ^&#123;<br>        OSStatus updateResult = SecItemUpdate(attrs, update);<br>        <span class="hljs-built_in">completion</span>(updateResult);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SecItemDelete"><a href="#SecItemDelete" class="headerlink" title="SecItemDelete"></a>SecItemDelete</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">OSStatus <span class="hljs-built_in">SecItemDelete</span>(CFDictionaryRef query);<br></code></pre></td></tr></table></figure><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><p><strong>query</strong></p><p>用来指定要删除的的条目， 参考SecItemCopyMatching 如何指定查询条件。</p><h3 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h3><p>成功或者错误码。参考：<a href="https://developer.apple.com/documentation/security/1542001-security_framework_result_codes?language=objc">Security Framework Result Codes</a></p><h3 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h3><ol><li>默认删除所有的匹配项，</li><li>可以通过指定<code>kSecMatchItemList </code>来限定删除范围， <code>kSecMatchItemList</code>对应的值的类型为<code>CFArrayRef </code>, 数组中每一项的类型必须相同，<ul><li>针对临时引用，每一项是一个引用，引用的类型可以是<ul><li>SecKeychainItemRef,</li><li>SecKeyRef</li><li>SecCertificateRef</li><li>SecIdentityRef</li><li>CFDataRef</li></ul></li><li>针对持久化引用, 引用的必须是类型是 <code>CFDataRef</code></li></ul></li><li>主线程同步执行会卡UI， 可以异步执行</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">- (void)deleteKeychainItemWithAttributes:(CFDictionaryRef)attrs completion:(<span class="hljs-built_in">void</span>(^)(OSStatus status))completion &#123;<br>    <span class="hljs-built_in">dispatch_async</span>(backgroundQueue, ^&#123;<br>        OSStatus deleteResult = SecItemDelete(attrs);<br>        <span class="hljs-built_in">completion</span>(deleteResult);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="什么是临时引用，持久化引用又是什么？"><a href="#什么是临时引用，持久化引用又是什么？" class="headerlink" title="什么是临时引用，持久化引用又是什么？"></a>什么是临时引用，持久化引用又是什么？</h3><p><strong>临时引用</strong></p><p>对应的 key  值是<code>kSecReturnRef</code></p><blockquote><p>The corresponding value is of type <code>CFBooleanRef</code>. A value of <code>kCFBooleanTrue</code> indicates that a reference should be returned. Depending on the item class requested, the returned references may be of type <code>SecKeychainItemRef</code>, <code>SecKeyRef</code>, <code>SecCertificateRef</code>, <code>SecIdentityRef</code>, or <code>CFDataRef</code>.</p></blockquote><p>示例 ：SecCertificateRef 证书对象的引用在keychain中存取</p><p>创建SecCertificateRef</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">SecCertificateRef certificate =<br>    SecCertificateCreateWithData<span class="hljs-comment">(NULL, (__bridge CFDataRef)</span>certData);<br> <br><span class="hljs-keyword">if</span> <span class="hljs-comment">(certificate)</span>  &#123; CFRelease<span class="hljs-comment">(certificate)</span>; &#125; <span class="hljs-comment">// After you are done with it</span><br></code></pre></td></tr></table></figure><p>将证书存入keychain</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">NSDictionary<span class="hljs-operator">*</span> addquery <span class="hljs-operator">=</span> <span class="hljs-operator">@</span>&#123; (<span class="hljs-built_in">id</span>)kSecValueRef<span class="hljs-operator">:</span>   (__bridge <span class="hljs-built_in">id</span>)certificate,<br>                            (<span class="hljs-built_in">id</span>)kSecClass<span class="hljs-operator">:</span>      (<span class="hljs-built_in">id</span>)kSecClassCertificate,<br>                            (<span class="hljs-built_in">id</span>)kSecAttrLabel<span class="hljs-operator">:</span>  <span class="hljs-string">@&quot;My Certificate&quot;</span>,<br>                           &#125;;<br>   <br>   <br>OSStatus status <span class="hljs-operator">=</span> SecItemAdd((__bridge CFDictionaryRef)addquery, NULL);<br><span class="hljs-keyword">if</span> (status <span class="hljs-operator">!=</span> errSecSuccess) &#123;<br>    <span class="hljs-comment">// Handle the error</span><br>&#125;   <br></code></pre></td></tr></table></figure><p>从keychain读取证书</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSDictionary</span> *getquery = @&#123; (<span class="hljs-type">id</span>)kSecClass:     (<span class="hljs-type">id</span>)kSecClassCertificate,<br>                            (<span class="hljs-type">id</span>)kSecAttrLabel: <span class="hljs-string">@&quot;My Certificate&quot;</span>,<br>                            (<span class="hljs-type">id</span>)kSecReturnRef: @YES,<br>                            &#125;;<br>SecCertificateRef certificate = <span class="hljs-literal">NULL</span>;<br>OSStatus status = SecItemCopyMatching((__bridge <span class="hljs-built_in">CFDictionaryRef</span>)getquery,<br>                                      (<span class="hljs-built_in">CFTypeRef</span> *)&amp;certificate);<br><span class="hljs-keyword">if</span> (status != errSecSuccess) &#123; &lt;# Handle error #&gt; &#125;<br><span class="hljs-keyword">else</span>                         &#123; &lt;# Use certificate #&gt; &#125;<br> <br><span class="hljs-keyword">if</span> (certificate) &#123; <span class="hljs-built_in">CFRelease</span>(certificate); &#125; <span class="hljs-comment">// After you are done with it</span><br></code></pre></td></tr></table></figure><p>观察到这里用的就是 <code>kSecReturnRef</code>, 代表临时引用。</p><ul><li>SecKeychainItemRef,</li><li>SecKeyRef</li><li>SecCertificateRef</li><li>SecIdentityRef</li><li>CFDataRef</li></ul><p><strong>持久化引用</strong></p><p>key 为 kSecReturnPersistentRef。</p><blockquote><p>The corresponding value is of type <code>CFBooleanRef</code>. A value of kCFBooleanTrue indicates that a persistent reference to an item should be returned as a <code>CFDataRef</code> object. Unlike normal references, a persistent reference may be stored on disk or passed between processes.</p></blockquote><ol><li>一个持久化引用，引用的对象必须是<code>CFDataRef</code></li><li>持久化引用可以存储在磁盘，可以跨进程传递</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="Adding-a-Password-to-the-Keychain"><a href="#Adding-a-Password-to-the-Keychain" class="headerlink" title="Adding a Password to the Keychain"></a><a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/adding_a_password_to_the_keychain?language=objc">Adding a Password to the Keychain</a></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">struct <span class="hljs-title class_">Credentials</span> &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-attr">username</span>: <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-attr">password</span>: <span class="hljs-title class_">String</span><br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">KeychainError</span>: <span class="hljs-title class_">Error</span> &#123;<br>    <span class="hljs-keyword">case</span> noPassword<br>    <span class="hljs-keyword">case</span> unexpectedPasswordData<br>    <span class="hljs-keyword">case</span> <span class="hljs-title function_">unhandledError</span>(<span class="hljs-attr">status</span>: <span class="hljs-title class_">OSStatus</span>)<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> server = <span class="hljs-string">&quot;www.example.com&quot;</span><br><br><span class="hljs-keyword">let</span> account = credentials.<span class="hljs-property">username</span><br><span class="hljs-keyword">let</span> password = credentials.<span class="hljs-property">password</span>.<span class="hljs-title function_">data</span>(<span class="hljs-attr">using</span>: <span class="hljs-title class_">String</span>.<span class="hljs-property">Encoding</span>.<span class="hljs-property">utf8</span>)!<br><span class="hljs-keyword">var</span> <span class="hljs-attr">query</span>: [<span class="hljs-title class_">String</span>: <span class="hljs-title class_">Any</span>] = [kSecClass <span class="hljs-keyword">as</span> <span class="hljs-title class_">String</span>: kSecClassInternetPassword,<br>                            kSecAttrAccount <span class="hljs-keyword">as</span> <span class="hljs-title class_">String</span>: account,<br>                            kSecAttrServer <span class="hljs-keyword">as</span> <span class="hljs-title class_">String</span>: server,<br>                            kSecValueData <span class="hljs-keyword">as</span> <span class="hljs-title class_">String</span>: password]<br><span class="hljs-keyword">let</span> status = <span class="hljs-title class_">SecItemAdd</span>(query <span class="hljs-keyword">as</span> <span class="hljs-title class_">CFDictionary</span>, nil)<br>guard status == errSecSuccess <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">throw</span> <span class="hljs-title class_">KeychainError</span>.<span class="hljs-title function_">unhandledError</span>(<span class="hljs-attr">status</span>: status) &#125;<br><br></code></pre></td></tr></table></figure><h2 id="Searching-for-Keychain-Items"><a href="#Searching-for-Keychain-Items" class="headerlink" title="Searching for Keychain Items"></a><a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/searching_for_keychain_items?language=objc">Searching for Keychain Items</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> query: [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [kSecClass <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kSecClassInternetPassword,<br>                            kSecAttrServer <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: server,<br>                            kSecMatchLimit <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kSecMatchLimitOne,<br>                            kSecReturnAttributes <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: <span class="hljs-literal">true</span>,<br>                            kSecReturnData <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: <span class="hljs-literal">true</span>]<br><br><span class="hljs-keyword">var</span> item: <span class="hljs-type">CFTypeRef</span>?<br><span class="hljs-keyword">let</span> status <span class="hljs-operator">=</span> <span class="hljs-type">SecItemCopyMatching</span>(query <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>, <span class="hljs-operator">&amp;</span>item)<br><span class="hljs-keyword">guard</span> status <span class="hljs-operator">!=</span> errSecItemNotFound <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">throw</span> <span class="hljs-type">KeychainError</span>.noPassword &#125;<br><span class="hljs-keyword">guard</span> status <span class="hljs-operator">==</span> errSecSuccess <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">throw</span> <span class="hljs-type">KeychainError</span>.unhandledError(status: status) &#125;<br><br><span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> existingItem <span class="hljs-operator">=</span> item <span class="hljs-keyword">as?</span> [<span class="hljs-type">String</span> : <span class="hljs-keyword">Any</span>],<br>    <span class="hljs-keyword">let</span> passwordData <span class="hljs-operator">=</span> existingItem[kSecValueData <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>] <span class="hljs-keyword">as?</span> <span class="hljs-type">Data</span>,<br>    <span class="hljs-keyword">let</span> password <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(data: passwordData, encoding: <span class="hljs-type">String</span>.<span class="hljs-type">Encoding</span>.utf8),<br>    <span class="hljs-keyword">let</span> account <span class="hljs-operator">=</span> existingItem[kSecAttrAccount <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>] <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-type">KeychainError</span>.unexpectedPasswordData<br>&#125;<br><span class="hljs-keyword">let</span> credentials <span class="hljs-operator">=</span> <span class="hljs-type">Credentials</span>(username: account, password: password)<br><br></code></pre></td></tr></table></figure><h2 id="Updating-and-Deleting-Keychain-Items"><a href="#Updating-and-Deleting-Keychain-Items" class="headerlink" title="Updating and Deleting Keychain Items"></a><a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/updating_and_deleting_keychain_items?language=objc">Updating and Deleting Keychain Items</a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> query: [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [kSecClass <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kSecClassInternetPassword,<br>                            kSecAttrServer <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: server]<br><br><span class="hljs-keyword">let</span> account <span class="hljs-operator">=</span> credentials.username<br><span class="hljs-keyword">let</span> password <span class="hljs-operator">=</span> credentials.password.data(using: <span class="hljs-type">String</span>.<span class="hljs-type">Encoding</span>.utf8)<span class="hljs-operator">!</span><br><span class="hljs-keyword">let</span> attributes: [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [kSecAttrAccount <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: account,<br>                                 kSecValueData <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: password]<br><br><span class="hljs-comment">//update  </span><br><span class="hljs-keyword">let</span> status <span class="hljs-operator">=</span> <span class="hljs-type">SecItemUpdate</span>(query <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>, attributes <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>)<br><span class="hljs-keyword">guard</span> status <span class="hljs-operator">!=</span> errSecItemNotFound <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">throw</span> <span class="hljs-type">KeychainError</span>.noPassword &#125;<br><span class="hljs-keyword">guard</span> status <span class="hljs-operator">==</span> errSecSuccess <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">throw</span> <span class="hljs-type">KeychainError</span>.unhandledError(status: status) &#125;<br><br><span class="hljs-comment">//delete</span><br><span class="hljs-keyword">let</span> status <span class="hljs-operator">=</span> <span class="hljs-type">SecItemDelete</span>(query <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>)<br><span class="hljs-keyword">guard</span> status <span class="hljs-operator">==</span> errSecSuccess <span class="hljs-operator">||</span> status <span class="hljs-operator">==</span> errSecItemNotFound <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">throw</span> <span class="hljs-type">KeychainError</span>.unhandledError(status: status) &#125;<br></code></pre></td></tr></table></figure><h1 id="keychain-group-app-group"><a href="#keychain-group-app-group" class="headerlink" title="keychain group &amp; app group"></a>keychain group &amp; app group</h1><p>参考：<a href="https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps?language=objc">Sharing Access to Keychain Items Among a Collection of Apps</a></p><blockquote><p>Enable apps to share keychain items with each other by adding the apps to an access group.</p></blockquote><p>通过keychain group 可以在 app 间共享keychain item。</p><blockquote><p>An access group is a logical collection of apps tagged with a particular group name string. Any app in a given group can share keychain items with all the other apps in the same group. You can add an app to any number of groups, but the app is always part of at least one group that contains only itself. That is, an app can always store and retrieve private keychain items, regardless of whether it also participates in any other groups. Keychain items, on the other hand, are always part of exactly one group.</p></blockquote><p>默认情况下，app 加入了以自身id 为标记的分组中，这个分组中的所有 keychain item 仅限app 自身访问。</p><p>通过加入其他分组，app 间可以通过 keychain group 共享 keychain item。</p><h2 id="keychain-group-类型"><a href="#keychain-group-类型" class="headerlink" title="keychain group 类型"></a>keychain group 类型</h2><p>You control the groups that your app belongs to by manipulating its entitlements. In particular, an app belongs to all the groups named in a virtual array of strings that the system forms for each app as the concatenation of the following items, evaluated in this order:</p><p><strong>Keychain access groups</strong><br>The optional Keychain Access Groups Entitlement holds an array of strings, each of which names an access group.</p><p>显示指定加入的 keychain group， group id为 <code>[$(teamID).$(keychain group id)]</code></p><p><strong>Application identifier</strong><br>Xcode automatically adds the application-identifier entitlement (or the com.apple.application-identifier entitlement in macOS) to every app during code signing, formed as the team identifier (team ID) plus the bundle identifier (bundle ID).</p><p>隐式的加入了以自身为组的 keychain group,  group id为 <code>[$(teamID).$(bundle ID)]</code></p><p><strong>Application groups</strong><br>When you collect related apps into an application group using the App Groups Entitlement, they share access to a group container, and gain the ability to message each other in certain ways. Starting in iOS 8, the array of strings given by this entitlement also extends the list of keychain access groups.</p><p>由于加入了app group， 隐式的加入了以 app group 为组的 keychain group,  group id为 <code>[$(app group id)]</code></p><p>Xcode handles the application identifier (app ID) for you when you set the bundle ID. You set the others by manipulating capabilities in Xcode.</p><p>添加keychain group 和 app group 可以在xcode 中通过操作capabilities来实现。<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16694538450341669453844996.png"><br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16694538730181669453872352.png"></p><h2 id="app-group-和-keychain-group-区别"><a href="#app-group-和-keychain-group-区别" class="headerlink" title="app group 和 keychain group 区别"></a>app group 和 keychain group 区别</h2><p>App groups and keychain access groups aren’t mutually exclusive—you can use both in the same app—but they do differ in several important ways that may help you decide which to use for a given situation.</p><p>两者不是互相排斥的， 一个app可以同时加入keychain group 和 app group。</p><p>First, as described above, using an app group enables additional data sharing beyond keychain items. You might want this extra sharing, or might already be using an app group for this purpose, and thus not need to add keychain access groups. On the other hand, you might not want to enable this additional sharing at all, and prefer keychain access groups instead.</p><p>app group 除了共享 keychain item 之外，还能共享其他内容，例如共享偏好设置</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">let <span class="hljs-keyword">user</span>Defualts = UserDefaults.init(suiteName: <span class="hljs-string">&quot;$(group_Id)&quot;</span>)<br><span class="hljs-keyword">user</span>Defualts?.<span class="hljs-built_in">set</span>Value(data, <span class="hljs-keyword">for</span>Key: key)<br><span class="hljs-keyword">user</span>Defualts?.synchronize()<br></code></pre></td></tr></table></figure><p>Second, order matters. The system considers the first item in the list of access groups to be the app’s default access group. This is the access group that keychain services assumes if you don’t otherwise specify one when adding keychain items. An app group can’t ever be the default, because the app ID is always present and appears earlier in the list. However, a keychain access group can be the default, because it appears before the app ID. In particular, the first keychain access group, if any, that you specify in the corresponding capability becomes the app’s default access group. If you don’t specify any keychain access groups, then the app ID is the default.</p><p>关于默认 group， 当添加，查询，更新，删除 keychain item 时，不指定<code>kSecAttrAccessGroup </code>时，默认操作的是哪个group ？</p><ol><li>系统以 group list 数组中的第一个为默认 group</li><li>默认group 不会是app group， 因为它不会是第一个</li><li>如果加入keychain group， 该 keychain group 可能为默认的 keychain group</li><li>想限定keychain item 只在 app 内访问，不能被keychain group 访问，需要将 bundle id 所在的keychain group 置顶，或者明确指定使用 bundle id 标记的keychain group</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行重启iPhone</title>
    <link href="/2022/11/16/Shell/2022-11-16-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFiPhone/"/>
    <url>/2022/11/16/Shell/2022-11-16-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFiPhone/</url>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://apple.stackexchange.com/questions/150880/any-way-to-reboot-a-idevice-that-is-connected-to-a-usb-port-via-terminal-mac-te">Any way to reboot a iDevice that is connected to a USB port via terminal (Mac terminal)?</a></p><p>安装<code>libimobiledevice</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>libimobiledevice<br><br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">idevicediagnostics restart</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 配置 clang-format 格式化 C++代码</title>
    <link href="/2022/10/29/c++/2022-10-29-Xcode%20%E9%85%8D%E7%BD%AE%20clang-format%20%E6%A0%BC%E5%BC%8F%E5%8C%96%20c++%20%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/10/29/c++/2022-10-29-Xcode%20%E9%85%8D%E7%BD%AE%20clang-format%20%E6%A0%BC%E5%BC%8F%E5%8C%96%20c++%20%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>在命令行，通过<code>clang-format</code>工具，可以对代码进行格式化。但 <code>clang-fromat</code> 只能在终端中使用，有没有什么办法可以让它在Xcode中也可以使用呢，这样就很方便的对当前文档进行格式化了。 答案是： 借助 macOS 自带的 Automator 工具。</p><h2 id="clang-format-安装"><a href="#clang-format-安装" class="headerlink" title="clang-format 安装"></a>clang-format 安装</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>clang-format<br></code></pre></td></tr></table></figure><h2 id="添加-Automator-服务"><a href="#添加-Automator-服务" class="headerlink" title="添加 Automator 服务"></a>添加 Automator 服务</h2><p>打开 Automator 选择  “Quick Action”。<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16670101357781667010134833.png"></p><p>左侧 Library 中搜索 “Run Shell Script” 并拖动到右侧。在脚本编辑框中输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br>clang-format<br></code></pre></td></tr></table></figure><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16670116407351667011639954.png"></p><p>同时记得勾选上 “Output replaces selected text”，然后保存并输入保存的名称，比如 clang-format。</p><p>至此一个服务便已添加好。</p><h3 id="Automator-在磁盘上的位置"><a href="#Automator-在磁盘上的位置" class="headerlink" title="Automator 在磁盘上的位置"></a>Automator 在磁盘上的位置</h3><p>The location of the user created services is under:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">~<span class="hljs-regexp">/Library/</span>Services/<br></code></pre></td></tr></table></figure><p>other locations you get by entering following command in Terminal:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mdfind <span class="hljs-string">.workflow</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>用户主目录，创建 <code>.clang-format</code> 文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">clang-<span class="hljs-built_in">format</span> -style=google -<span class="hljs-built_in">dump</span>-<span class="hljs-built_in">config</span> &gt; .clang-<span class="hljs-built_in">format</span><br></code></pre></td></tr></table></figure><p>打开 Xcode， 选中需要格式化的代码并右键唤出菜单。选择 Services-&gt; clang-format，这里 Services 中的名称即为前面步骤中保存的 Services 名称。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16670146406641667014640354.png"></p><h3 id="添加快捷键"><a href="#添加快捷键" class="headerlink" title="添加快捷键"></a>添加快捷键</h3><p>显然右键这种方式不够便捷，进一步添加快捷键来实现更加方便的代码格式化。因为 Xcode 中格式化代码默认的快捷键为 control + I，不防我们就设置 clang-format 这个服务的快捷键为这个按键组合。</p><p>打开系统的首选项设置（可通过在 SpotLight 中搜索 “system preference”），然后打开键盘设置 “Kyeboard” 并切换到 “Shortcuts” 标签。</p><p>选中左侧 “App Shortcuts” 然后为 “Xcode” 绑定 <code>control</code> + <code>I</code> 执行 clang-format。<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16670145906661667014590001.png"></p><p>然后便可通过快捷键方便地进行代码格式化了。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16670146746631667014674463.png"></p><p><strong>注意：</strong><br>如果不生效，将 Xcode 中 <code>control</code> + <code>I</code> 相关的快捷键置空。</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p>存在一些其他以插件形式的工具，同样能达到使用 clang-format 格式化代码的目的，比如 <a href="https://github.com/travisjeffery/ClangFormat-Xcode">travisjeffery&#x2F;ClangFormat-Xcode</a>，但不支持 Xcode 9+，可安装其替代版 <a href="https://github.com/V5zhou/ZZClang-format">V5zhou&#x2F;ZZClang-format</a></p><p>该插件安装好后，支持在文件保存时自动格式化，比较方便。</p><p>但因为是来自社区的插件，需要先将 Xcode 去掉签名 （unsign），参见 <a href="https://github.com/inket/update_xcode_plugins">inket&#x2F;update_xcode_plugins</a>。</p><p>原文链接： <a href="https://www.cnblogs.com/Wayou/p/xcode_clang_setup.html">Xcode 中配置 clang-format 格式化 C++ 代码</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake Importing and Exporting Guide</title>
    <link href="/2022/10/24/cmake/2022-10-24-cmake%20Importing%20and%20Exporting%20Guide/"/>
    <url>/2022/10/24/cmake/2022-10-24-cmake%20Importing%20and%20Exporting%20Guide/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html">https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html</a> </p><h1 id="Importing"><a href="#Importing" class="headerlink" title="Importing"></a>Importing</h1><p>IMPORTED targets 将cmake工程外部的库，可执行文件引入到当前的cmake工程中，被引入的内容会关联到一个cmake 中一个<br>逻辑上的target。</p><p>创建方式，调用<code>add_executable()</code>,<code>add_library()</code>命令创建target， 但是要添加<code>IMPORTED</code>参数。</p><p>这个IMPORTED target不产生任何构建文件，因为他们引入的都是现成的库或者可执行文件。</p><p>一旦IMPORTED target 被创建好了，就可以像工程中的其他target一样被引用了。 通过这种方式，就可以方便，灵活引用外部可执行文件和库了。</p><h2 id="Importing-Executables"><a href="#Importing-Executables" class="headerlink" title="Importing Executables"></a>Importing Executables</h2><p>使用磁盘上的可执行文件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(myexe IMPORTED)</span></span><br><span class="hljs-built_in">set_property</span>(TARGET myexe PROPERTY<br>             IMPORTED_LOCATION <span class="hljs-string">&quot;../InstallMyExe/bin/myexe&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">add_custom_command</span><span class="hljs-params">(OUTPUT main.cc COMMAND myexe)</span></span><br><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(mynewexe main.cc)</span></span><br></code></pre></td></tr></table></figure><ol><li>创建一个IMPORTED target</li><li>设置target相关属性，这里指定其关联的可执行文件路径</li><li>添加了一个custom command， 用target myexe指定的可执行文件来生成文件<code>main.cc</code></li><li>创建一个正常的可执行target, 使用上一步生成的<code>main.cc</code>作为源文件</li></ol><h2 id="Importing-Libraries"><a href="#Importing-Libraries" class="headerlink" title="Importing Libraries"></a>Importing Libraries</h2><p>导入已经构建好的库作为一个target来使用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add_library</span><span class="hljs-params">(foo STATIC IMPORTED)</span></span><br><span class="hljs-built_in">set_property</span>(TARGET foo PROPERTY<br>             IMPORTED_LOCATION <span class="hljs-string">&quot;/path/to/libfoo.a&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(myexe src1.c src2.c)</span></span><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(myexe PRIVATE foo)</span></span><br></code></pre></td></tr></table></figure><ol><li>创建一个IMPORTED target</li><li>设置target相关属性，这里指定其关联的静态库路径</li><li>创建一个正常的可执行target myexe，链接上面创建的target foo</li></ol><p>考虑到可能会有debug，release 等不同配置，引入具有不同配置的同一个库，可以使用下面的形式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find_library</span><span class="hljs-params">(math_REL NAMES m)</span></span><br><span class="hljs-function"><span class="hljs-title">find_library</span><span class="hljs-params">(math_DBG NAMES md)</span></span><br><span class="hljs-function"><span class="hljs-title">add_library</span><span class="hljs-params">(math STATIC IMPORTED GLOBAL)</span></span><br><span class="hljs-built_in">set_target_properties</span>(math PROPERTIES<br>  IMPORTED_LOCATION <span class="hljs-string">&quot;$&#123;math_REL&#125;&quot;</span><br>  IMPORTED_LOCATION_DEBUG <span class="hljs-string">&quot;$&#123;math_DBG&#125;&quot;</span><br>  IMPORTED_CONFIGURATIONS <span class="hljs-string">&quot;RELEASE;DEBUG&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(myexe src1.c src2.c)</span></span><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(myexe PRIVATE math)</span></span><br></code></pre></td></tr></table></figure><h1 id="Exporting-Targets"><a href="#Exporting-Targets" class="headerlink" title="Exporting Targets"></a>Exporting Targets</h1><blockquote><p>While IMPORTED targets on their own are useful, they still require that the project that imports them knows the locations of the target files on disk. The real power of IMPORTED targets is when the project providing the target files also provides a CMake file to help import them. A project can be setup to produce the necessary information so that it can easily be used by other CMake projects be it from a build directory, a local install or when packaged.</p></blockquote><ol><li>IMPORTED targets 要求使用这些target的工程，知道相关文件在磁盘上的位置。</li><li>要想屏蔽这些细节，库的提供方，同时提供一个导入这个库的帮助文件 <code>xxxTargets.cmake</code></li><li>要想生成的库，可以通过<code>find_package()</code>命令来索引使用的话，可以在cmake工程中配置，在构建工程的时候，同时生成对应的帮助文件<ul><li><code>xxxTargets.cmake</code></li><li><code>xxxConfig.cmake</code></li><li><code>xxxConfigVersion.cmake</code></li></ul></li></ol><h2 id="xxxTargets-cmake"><a href="#xxxTargets-cmake" class="headerlink" title="xxxTargets.cmake"></a><code>xxxTargets.cmake</code></h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><span class="hljs-keyword">project</span>(MathFunctions)<br><br><span class="hljs-comment"># make cache variables for install destinations</span><br><span class="hljs-keyword">include</span>(GNUInstallDirs)<br><br><span class="hljs-comment"># specify the C++ standard</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br><br><span class="hljs-comment"># create library</span><br><span class="hljs-keyword">add_library</span>(MathFunctions STATIC MathFunctions.cxx)<br><br><span class="hljs-comment"># add include directories</span><br><span class="hljs-keyword">target_include_directories</span>(MathFunctions<br>                           PUBLIC<br>                           <span class="hljs-string">&quot;$&lt;BUILD_INTERFACE:$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&gt;&quot;</span><br>                           <span class="hljs-string">&quot;$&lt;INSTALL_INTERFACE:$&#123;CMAKE_INSTALL_INCLUDEDIR&#125;&gt;&quot;</span><br>)<br><br><span class="hljs-comment"># install the target and create export-set</span><br><span class="hljs-keyword">install</span>(TARGETS MathFunctions<br>        <span class="hljs-keyword">EXPORT</span> MathFunctionsTargets<br>        LIBRARY DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span><br>        ARCHIVE DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span><br>        RUNTIME DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_BINDIR&#125;</span><br>        INCLUDES DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_INCLUDEDIR&#125;</span><br>)<br><br><span class="hljs-comment"># install header file</span><br><span class="hljs-keyword">install</span>(FILES MathFunctions.h DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_INCLUDEDIR&#125;</span>)<br><br><span class="hljs-comment"># generate and install export file</span><br><span class="hljs-keyword">install</span>(<span class="hljs-keyword">EXPORT</span> MathFunctionsTargets<br>        <span class="hljs-keyword">FILE</span> MathFunctionsTargets.cmake<br>        NAMESPACE MathFunctions::<br>        DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span>/cmake/MathFunctions<br>)<br><span class="hljs-comment"># create IMPORTED target, set target property</span><br><span class="hljs-keyword">add_library</span>(MathFunctions::MathFunctions STATIC IMPORTED)<br><span class="hljs-keyword">set_target_properties</span>(MathFunctions::MathFunctions PROPERTIES<br>  INTERFACE_INCLUDE_DIRECTORIES <span class="hljs-string">&quot;$&#123;_IMPORT_PREFIX&#125;/include&quot;</span><br>)<br></code></pre></td></tr></table></figure><ol><li>创建一个正常的静态库</li><li>设置静态库头文件搜索路径，分别指定构建时和安装后的路径</li><li>创建一个install命令，指定生成二进制文件的安装路径。其中<code>EXPORT MathFunctionsTargets</code>,指定了导出target文件对应的文件名字是<code>MathFunctionsTargets.cmake</code></li><li>指定头文件如何安装</li><li>指定<code>MathFunctionsTargets.cmake</code>文件如何安装，<code>NAMESPACE MathFunctions::</code> 给导出的target添加前缀命名空间，一般带有命名空间的target，都是<code>IMPORTED target</code></li><li>创建一个<code>IMPORTED target</code>,名字是<code>MathFunctions::MathFunctions</code></li><li>设置<code>MathFunctions::MathFunctions</code>的属性，此处是头文件路径</li></ol><p>如何使用导出的target文件, 在<code>CMakeLists.txt</code>文件中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">($&#123;INSTALL_PREFIX&#125;/lib/cmake/MathFunctionTargets.cmake)</span></span><br><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(myexe src1.c src2.c )</span></span><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(myexe PRIVATE MathFunctions::MathFunctions)</span></span><br></code></pre></td></tr></table></figure><ol><li>首先包含<code>/MathFunctionTargets.cmake</code>文件</li><li>创建一个可执行目标myexe</li><li>链接MathFunctions::MathFunctions到myexe</li></ol><h2 id="支持find-package"><a href="#支持find-package" class="headerlink" title="支持find_package()"></a>支持<code>find_package()</code></h2><p>使用示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find_package</span><span class="hljs-params">(Stats <span class="hljs-number">2.6</span>.<span class="hljs-number">4</span> REQUIRED)</span></span><br><span class="hljs-function"><span class="hljs-title">target_link_libraries</span><span class="hljs-params">(MathFunctions PUBLIC Stats::Types)</span></span><br></code></pre></td></tr></table></figure><p>find_package() 支持两种搜索模式</p><ul><li>module mode， 针对非cmake构建的库，搜索<code>Find&lt;PackageName&gt;.cmake</code>文件</li><li>config mode， 针对cmake构建的库，相关文件为<ul><li>target相关： <code>&lt;lowercasePackageName&gt;-config.cmake</code>或者<code>&lt;PackageName&gt;Config.cmake</code></li><li>版本相关： <code>&lt;lowercasePackageName&gt;-config-version.cmake</code> 或 <code>&lt;PackageName&gt;ConfigVersion.cmake</code></li></ul></li></ul><p>因此，cmake构建的库，想要支持<code>find_package()</code>的config模式，需要提供</p><ul><li><code>xxxConfig.cmake</code></li><li><code>xxConfigVersion.cmake</code></li></ul><p>首先包含<code>CMakePackageConfigHelpers</code>模块</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">(CMakePackageConfigHelpers)</span></span><br></code></pre></td></tr></table></figure><h3 id="Creating-a-Package-Configuration-File"><a href="#Creating-a-Package-Configuration-File" class="headerlink" title="Creating a Package Configuration File"></a>Creating a Package Configuration File</h3><p>使用<code>CMakePackageConfigHelpers</code>模块中的<code>configure_package_config_file</code>命令来生成<code>MathFunctionsConfig.cmake</code>文件，蓝本是<code>Config.cmake.in</code>,同时指定生成后的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">configure_package_config_file(<span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/Config.cmake.in<br>  <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/MathFunctionsConfig.cmake&quot;</span><br>  INSTALL_DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span>/cmake/MathFunctions<br>)<br></code></pre></td></tr></table></figure><p>通过<code>isntall</code>命令指定<code>xxxConfig.cmake</code>和<code>xxxConfigVersion.cmake</code>文件安装规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">install(FILES<br>          <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/MathFunctionsConfig.cmake&quot;</span><br>          <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/MathFunctionsConfigVersion.cmake&quot;</span><br>        DESTINATION <span class="hljs-variable">$&#123;CMAKE_INSTALL_LIBDIR&#125;</span>/cmake/MathFunctions<br>)<br></code></pre></td></tr></table></figure><p>关于<code>Config.cmake.in</code>文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">@PACKAGE_INIT@<br><br><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">(<span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_LIST_DIR&#125;/MathFunctionsTargets.cmake&quot;</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">check_required_components</span><span class="hljs-params">(MathFunctions)</span></span><br></code></pre></td></tr></table></figure><p><code>@PACKAGE_INIT@</code> 在配置的时候，会被替换和展开，展开后包含</p><ol><li>以<code>PACKAGE_</code>为前缀的相对路径</li><li><code>set_and_check()</code> 和 <code>heck_required_components()</code>两个宏定义。</li></ol><p><code>check_required_components</code> 针对所有的组件，给<code>&lt;Package&gt;_&lt;Component&gt;_FOUND</code>变量赋值， 找到为<code>TRUE</code>,找不到为<code>FALSE</code>。 同时给<code>&lt;Package&gt;_FOUND</code>变量赋值， 如果结果为<code>FALSE</code>,认为该package没有找到。</p><p><code>set_and_check</code>主要给对应的目录和文件路径赋值，如果引用的文件或路径没有找到，该宏执行失败。</p><h3 id="Creating-a-Package-Version-File"><a href="#Creating-a-Package-Version-File" class="headerlink" title="Creating a Package Version File"></a>Creating a Package Version File</h3><p><code>CMakePackageConfigHelpers</code>模块，提供了<code>write_basic_package_version_file()</code>命令来生成<code>xxConfigVersion.cmake</code>文件。 当<code>find_package()</code>命令指定了版本号的时候， cmake 会读取该文件来获取版本号信息做匹配</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">set(<span class="hljs-keyword">version</span> <span class="hljs-number">3.4</span>.<span class="hljs-number">1</span>)<br><br>set_property(TARGET MathFunctions <span class="hljs-keyword">PROPERTY</span><span class="hljs-title"> </span><span class="hljs-keyword">VERSION</span> $&#123;<span class="hljs-keyword">version</span>&#125;)<br>set_property(TARGET MathFunctions <span class="hljs-keyword">PROPERTY</span><span class="hljs-title"> </span>SOVERSION <span class="hljs-number">3</span>)<br>set_property(TARGET MathFunctions <span class="hljs-keyword">PROPERTY</span><span class="hljs-title"></span><br><span class="hljs-title">  </span>INTERFACE_MathFunctions_MAJOR_VERSION <span class="hljs-number">3</span>)<br>set_property(TARGET MathFunctions APPEND <span class="hljs-keyword">PROPERTY</span><span class="hljs-title"></span><br><span class="hljs-title">  </span>COMPATIBLE_INTERFACE_STRING MathFunctions_MAJOR_VERSION<br>)<br><br><span class="hljs-comment"># generate the version file for the config file</span><br>write_basic_package_version_file(<br>  <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/MathFunctionsConfigVersion.cmake&quot;</span><br>  <span class="hljs-keyword">VERSION</span> <span class="hljs-string">&quot;$&#123;version&#125;&quot;</span><br>  COMPATIBILITY AnyNewerVersion<br>)<br></code></pre></td></tr></table></figure><ol><li>设置target的版本号相关的变量</li><li>将版本号信息，写入<code>MathFunctionsConfigVersion.cmake</code>文件</li></ol><p>此时已经配置好如何生成<code>xxxConfig.cmake</code>和<code>xxxConfigVersion.cmake</code>文件.<br>执行构建，安装</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mkdir build <br><span class="hljs-keyword">cd</span> build <br>cmake <span class="hljs-string">..</span><br>cmake <span class="hljs-params">--build</span> .<br>cmake <span class="hljs-params">--install</span> . <span class="hljs-params">--prefix</span> `&lt;prefix&gt;`<br></code></pre></td></tr></table></figure><p>观察输出, 对应的文件已经生成</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">MathFunctionsConfig<span class="hljs-selector-class">.cmake</span><br>MathFunctionsConfigVersion<span class="hljs-selector-class">.cmake</span><br>MathFunctionsTargets-noconfig<span class="hljs-selector-class">.cmake</span><br>MathFunctionsTargets.cmake<br></code></pre></td></tr></table></figure><p>使用<code>find_package()</code>来使用生成config文件, 此时需要通过<code>CMAKE_PREFIX_PATH</code>来指定config文件的搜罗路径。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><span class="hljs-built_in">project</span>(Downstream)<br><br># specify the C++ standard<br><span class="hljs-built_in">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-built_in">set</span>(CMAKE_CXX_STANDARD_REQUIRED True)<br><br><span class="hljs-built_in">find_package</span>(MathFunctions <span class="hljs-number">3.4</span>.<span class="hljs-number">1</span> EXACT)<br><br><span class="hljs-built_in">add_executable</span>(myexe main.cc)<br><span class="hljs-built_in">target_link_libraries</span>(myexe PRIVATE MathFunctions::MathFunctions)<br></code></pre></td></tr></table></figure><p>注意：<br>导出配置，不应该引用绝对路径，应当关联相对路径，这样，无论安装在哪里，都可以通过config文件正确索引到库。</p><ol><li>不应当显示的依赖<code>CMAKE_INSTALL_PREFIX</code></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby">target_include_directories(tgt <span class="hljs-variable constant_">INTERFACE</span><br>  <span class="hljs-comment"># Wrong, not relocatable:</span><br>  <span class="hljs-variable">$&lt;</span><span class="hljs-variable constant_">INSTALL_INTERFACE</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">CMAKE_INSTALL_PREFIX</span>&#125;/<span class="hljs-keyword">include</span>/<span class="hljs-title class_">TgtName</span>&gt;<br>)<br><br>target_include_directories(tgt <span class="hljs-variable constant_">INTERFACE</span><br>  <span class="hljs-comment"># Ok, relocatable:</span><br>  <span class="hljs-variable">$&lt;</span><span class="hljs-variable constant_">INSTALL_INTERFACE</span><span class="hljs-symbol">:include/TgtName&gt;</span><br>)<br></code></pre></td></tr></table></figure><ol start="2"><li>可以使用<code>$&lt;INSTALL_PREFIX&gt; generator expression</code></li></ol><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">target_include_directories(tgt INTERFACE<br>  <span class="hljs-comment"># Ok, relocatable:</span><br>  <span class="hljs-variable">$&lt;</span><span class="hljs-symbol">INSTALL_INTERFACE:</span><span class="hljs-variable">$&lt;</span>INSTALL_PREFIX&gt;<span class="hljs-regexp">/include/</span>TgtName&gt;<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake add_custom_command</title>
    <link href="/2022/10/23/cmake/2022-10-23-cmake%20add_custom_command/"/>
    <url>/2022/10/23/cmake/2022-10-23-cmake%20add_custom_command/</url>
    
    <content type="html"><![CDATA[<p>目的： 添加自定义的构建规则到生成的构建系统中。</p><p>有两种用法：</p><ol><li>使用外部命令来产生一个输出, 例如生成文件</li><li>监听一个target的构建事件，在target构建前或者构建后，执行命令</li></ol><h1 id="Examples-Generating-Files"><a href="#Examples-Generating-Files" class="headerlink" title="Examples: Generating Files"></a>Examples: Generating Files</h1><p>添加命令，执行后生成源文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">add_custom_command</span>(<br>  OUTPUT out<span class="hljs-selector-class">.c</span><br>  COMMAND someTool -<span class="hljs-selector-tag">i</span> $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/<span class="hljs-keyword">in</span><span class="hljs-selector-class">.txt</span><br>                   -o out<span class="hljs-selector-class">.c</span><br>  DEPENDS $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/<span class="hljs-keyword">in</span><span class="hljs-selector-class">.txt</span><br>  VERBATIM)<br><span class="hljs-function"><span class="hljs-title">add_library</span><span class="hljs-params">(myLib out.c)</span></span><br></code></pre></td></tr></table></figure><p>通过生成器表达式，为每个config指定不同的输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">add_custom_command</span>(<br>  OUTPUT <span class="hljs-string">&quot;out-$&lt;CONFIG&gt;.c&quot;</span><br>  COMMAND someTool -<span class="hljs-selector-tag">i</span> $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/<span class="hljs-keyword">in</span><span class="hljs-selector-class">.txt</span><br>                   -o <span class="hljs-string">&quot;out-$&lt;CONFIG&gt;.c&quot;</span><br>                   -c <span class="hljs-string">&quot;$&lt;CONFIG&gt;&quot;</span><br>  DEPENDS $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/<span class="hljs-keyword">in</span><span class="hljs-selector-class">.txt</span><br>  VERBATIM)<br><span class="hljs-function"><span class="hljs-title">add_library</span><span class="hljs-params">(myLib <span class="hljs-string">&quot;out-$&lt;CONFIG&gt;.c&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h1 id="Examples-Build-Events"><a href="#Examples-Build-Events" class="headerlink" title="Examples: Build Events"></a>Examples: Build Events</h1><p>在target被构建，链接之后，执行自定义命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(myExe myExe.c)</span></span><br><span class="hljs-built_in">add_custom_command</span>(<br>  TARGET myExe POST_BUILD<br>  COMMAND someHasher -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&quot;$&lt;TARGET_FILE:myExe&gt;&quot;</span><br>                     -o <span class="hljs-string">&quot;$&lt;TARGET_FILE:myExe&gt;.hash&quot;</span><br>  VERBATIM)<br></code></pre></td></tr></table></figure><p>目前支持两种</p><ul><li>PRE_LINK 编译后，连接前执行命令</li><li>POST_BUILD 构建后，成功链接后执行命令</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HLS 介绍，M3U8 格式分析</title>
    <link href="/2022/10/13/hls/2022-10-13-HLS-%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/10/13/hls/2022-10-13-HLS-%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="HLS-是什么"><a href="#HLS-是什么" class="headerlink" title="HLS 是什么"></a>HLS 是什么</h1><p>维基百科的介绍：</p><p>HTTP Live Streaming，缩写为HLS，是由苹果公司提出基于HTTP的流媒体网络传输协议。是苹果公司QuickTime X和iPhone软件系统的一部分。它的工作原理是把整个流分成一个个小的基于HTTP的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。在开始一个流媒体会话时，客户端会下载一个包含元数据的扩充 M3U (m3u8) 播放列表文件，用于寻找可用的媒体流。</p><p>HLS只请求基本的HTTP报文，与实时传输协议（RTP）不同，HLS可以穿过任何允许HTTP数据通过的防火墙或者代理服务器。它也很容易使用内容分发网络来传输媒体流。</p><p>苹果公司把HLS协议作为一个互联网草案（逐步提交），在第一阶段中已作为一个非正式的标准提交到IETF。2017年8月，RFC 8216发布，描述了HLS协议第7版的定义。</p><p>苹果自己的介绍：</p><blockquote><p>Send live and on‐demand audio and video to iPhone, iPad, Mac, Apple Watch, Apple TV, and PC with HTTP Live Streaming (HLS) technology from Apple. Using the same protocol that powers the web, HLS lets you deploy content using ordinary web servers and content delivery networks. HLS is designed for reliability and dynamically adapts to network conditions by optimizing playback for the available speed of wired and wireless connections.</p></blockquote><p>总结一下：</p><ol><li>基于HTTP的流媒体网络传输协议，支持安全通信（通过https, 媒体数据加密等）</li><li>工作原理是把整个流分成一个个小的基于HTTP的文件来下载, 使用m3u8描述播放列表。</li><li>支持直播和点播（VOD， video on demand）</li><li>当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率</li></ol><h2 id="HLS-流媒体架构"><a href="#HLS-流媒体架构" class="headerlink" title="HLS 流媒体架构"></a>HLS 流媒体架构</h2><blockquote><p>Conceptually, HTTP Live Streaming consists of three parts: the server component, the distribution component, and the client software.</p><p>In a typical configuration, a hardware encoder takes audio-video input, encodes it as HEVC video and AC-3 audio, and outputs a fragmented MPEG-4 file or an MPEG-2 transport stream. A software stream segmenter then breaks the stream into a series of short media files, which are placed on a web server. The segmenter also creates and maintains an index file containing a list of the media files. The URL of the index file is published on the web server. Client software reads the index, then requests the listed media files in order and displays them without any pauses or gaps between segments.</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16656504345291665650434432.png"></p><p>概念上，HLS 包含</p><ul><li>服务端组件</li><li>分发组件</li><li>客户端软件</li></ul><p>步骤：</p><ol><li>服务端硬件编码器，将音视频输入编码(视频编码成HEVC，H264, 音频编码成AAC，AC-3)， 输出ts流（也可以生成分段的mp4文件， 很少用）</li><li>分段软件会将ts流分割，打包成ts文件，同时生成索引文件（m3u8）,索引文件保存了媒体文件的信息。</li><li>客户端读取m3u8索引文件，下载对应的ts文件，将内容播放给用户</li></ol><p>苹果提供了一套用于HLS的工具集，参考：</p><p><a href="https://developer.apple.com/documentation/http_live_streaming/using_apple_s_http_live_streaming_hls_tools">Using Apple’s HTTP Live Streaming (HLS) Tools</a></p><ul><li>Media File Segmenter (mediafilesegmenter), 媒体文件分割器</li><li>Media Subtitle Segmenter (mediasubtitlesegmenter)， 字幕分割器</li><li>Media Stream Segmenter (mediastreamsegmenter) 媒体流分割器</li><li>Variant Playlist Creator (variantplaylistcreator) 可变播放列表生成器</li><li>…</li></ul><h1 id="M3U8"><a href="#M3U8" class="headerlink" title="M3U8"></a>M3U8</h1><blockquote><p>The Unicode version of M3U is M3U8, which uses UTF-8-encoded characters. M3U8 files are the basis for the HTTP Live Streaming (HLS) format originally developed by Apple to stream video and radio to iOS devices, and which is now a popular format for adaptive streaming in general.</p></blockquote><blockquote><p>M3U (MP3 URL or Moving Picture Experts Group Audio Layer 3 Uniform Resource Locator in full) is a computer file format for a multimedia playlist. One common use of the M3U file format is creating a single-entry playlist file pointing to a stream on the Internet.</p></blockquote><blockquote><p>Although originally designed for audio files, such as MP3, it is commonly used to point media players to audio and video sources, including online sources.</p></blockquote><p>总结一下：</p><ol><li>M3U8 是M3U的Unicode版本，使用 UTF-8 编码， 是 HLS 的基础</li><li>M3U 最初是为音频文件设计的，例如MP3， 现在不再局限于音频文件，可以用来索引音频和视频资源，网络资源</li><li>下面分析M3U 文件格式</li></ol><p><strong>M3U</strong></p><blockquote><p>An M3U file is a plain text file that specifies the locations of one or more media files. The file is saved with the “m3u” filename extension if the text is encoded in the local system’s default non-Unicode encoding (e.g., a Windows codepage), or with the “m3u8” extension if the text is UTF-8 encoded.</p></blockquote><p>总结一下：</p><ol><li>M3U 文件是纯文本文件，指定了资源文件的位置</li><li>以<code>.m3u</code>为文件后缀</li><li>使用 UTF-8 编码的版本，以 <code>.m3u8</code>为后缀</li></ol><h2 id="Extended-M3U"><a href="#Extended-M3U" class="headerlink" title="Extended M3U"></a>Extended M3U</h2><p>看一个例子：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#EXTM3U</span><br><span class="hljs-comment">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class="hljs-comment">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-comment">#EXT-X-VERSION:4</span><br><span class="hljs-comment">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceA.ts<br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceB.ts<br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceC.ts<br><span class="hljs-comment">#EXTINF:9.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceD.ts<br><span class="hljs-comment">#EXT-X-ENDLIST</span><br></code></pre></td></tr></table></figure><p>语法：</p><ul><li>Tags: begin with ‘#EXT’</li><li>Comments: only begin with ‘#’</li><li>标签后面可以有参数，例如<code>#EXTINF:10.0</code></li><li>标签内容可以是：<ol><li>an absolute local pathname</li><li>a local pathname relative to the M3U file location; e.g. Heavysets.mp3</li><li>a URL</li></ol></li></ul><p>表格参考：<a href="https://en.wikipedia.org/wiki/M3U">https://en.wikipedia.org/wiki/M3U</a></p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16656557421391665655741667.png"></p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16656557911381665655790476.png"></p><h2 id="例子分析"><a href="#例子分析" class="headerlink" title="例子分析"></a>例子分析</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#EXTM3U</span><br><span class="hljs-comment">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class="hljs-comment">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-comment">#EXT-X-VERSION:4</span><br><span class="hljs-comment">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceA.ts<br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceB.ts<br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceC.ts<br><span class="hljs-comment">#EXTINF:9.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceD.ts<br><span class="hljs-comment">#EXT-X-ENDLIST</span><br></code></pre></td></tr></table></figure><p><strong>EXTM3U</strong></p><p>表明是<code>extended M3U</code>文件， 区别于基本的<code>M3U</code>文件。m3u8文件必须以该标签开始。</p><p><strong>EXT-X-PLAYLIST-TYPE</strong></p><p>类型可以是：</p><ul><li>VOD， 代表点播， 结尾包含<code>#EXT-X-ENDLIST</code></li><li>EVENT， 代表直播, 结尾不包含<code>#EXT-X-ENDLIST</code></li></ul><p><strong>EXT-X-TARGETDURATION</strong></p><p>单个媒体文件的最大时长。每一个<code>#EXTINF:10.0</code>标签指定的时长<code>&lt;=</code>EXT-X-TARGETDURATION</p><p><strong>EXT-X-MEDIA-SEQUENCE</strong></p><blockquote><p>Indicates the sequence number of the first URL that appears in a playlist file. Each media file URL in a playlist has a unique integer sequence number. The sequence number of a URL is higher by 1 than the sequence number of the URL that preceded it. The media sequence numbers have no relation to the names of the files.</p></blockquote><p>m3u8文件中第一个URL文件的编号，与文件名字无关，每次比前面的+1。</p><p><strong>EXT-X-VERSION</strong></p><blockquote><p>The EXT-X-VERSION tag indicates the compatibility version of the Playlist file. This file, its associated media, and its server must comply with all provisions of the IETF Internet-Draft of “HTTP Live Streaming 2nd Edition” (or earlier specifications) describing the protocol version indicated by the tag value. A Playlist file that doesn’t contain an EXT-X-VERSION tag must comply with version 1 of this protocol.</p></blockquote><p>表明该m3u8文件的版本兼容性。该m3u8文件，关联的媒体，服务器必须服从于该版本特性。如果不包含该字段，必须服从与版本1的规定。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16656577590671665657758695.png"></p><p>参考： <a href="https://developer.apple.com/documentation/http_live_streaming/about_the_ext-x-version_tag">About the EXT-X-VERSION tag</a></p><p><strong>EXTINF</strong></p><ul><li>描述资源文件时长，URL</li><li>时长： 版本小于3是int， 版本大于等于3是float, 单位秒</li></ul><p><strong>EXT-X-ENDLIST</strong></p><p>结束标志，表明没有更多资源了。vod有，event可能没有。</p><h3 id="VOD-Playlist-点播"><a href="#VOD-Playlist-点播" class="headerlink" title="VOD Playlist 点播"></a>VOD Playlist 点播</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#EXTM3U</span><br><span class="hljs-comment">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class="hljs-comment">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-comment">#EXT-X-VERSION:4</span><br><span class="hljs-comment">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceA.ts<br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceB.ts<br><span class="hljs-comment">#EXTINF:10.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceC.ts<br><span class="hljs-comment">#EXTINF:9.0,</span><br>http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/movie1/</span>fileSequenceD.ts<br><span class="hljs-comment">#EXT-X-ENDLIST</span><br></code></pre></td></tr></table></figure><h3 id="live-Playlist-Sliding-Window-直播滑动窗口"><a href="#live-Playlist-Sliding-Window-直播滑动窗口" class="headerlink" title="live Playlist(Sliding Window) 直播滑动窗口"></a>live Playlist(Sliding Window) 直播滑动窗口</h3><blockquote><p>In live sessions, the index file is updated by removing media URIs from the file as new media files are created and made available. The EXT-X-ENDLIST tag isn’t present in the live playlist, indicating that new media files will be added to the index file as they become available.</p></blockquote><p>直播流，m3u8文件会更新，前面的资源会被移除，后面的资源会被追加。<br>没有<code>EXT-X-ENDLIST</code>标签，表示还会有新的资源被添加。</p><p>看一个例子，开始时文件内容</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr">#EXTM3</span>U<br><span class="hljs-attr">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-attr">#EXT-X-VERSION:4</span><br><span class="hljs-attr">#EXT-X-MEDIA-SEQUENCE:1</span><br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce1</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce2</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce3</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce4</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce5</span>.ts<br></code></pre></td></tr></table></figure><p>旧资源被删除，新资被添加，看到<code>EXT-X-MEDIA-SEQUENCE</code>也发生了变化</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr">#EXTM3</span>U<br><span class="hljs-attr">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-attr">#EXT-X-VERSION:4</span><br><span class="hljs-attr">#EXT-X-MEDIA-SEQUENCE:2</span><br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce2</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce3</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.00</span>,<br>fileSeque<span class="hljs-symbol">nce4</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.00</span>,<br>fileSeque<span class="hljs-symbol">nce5</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce6</span>.ts<br></code></pre></td></tr></table></figure><p>再次更新</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr">#EXTM3</span>U<br><span class="hljs-attr">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-attr">#EXT-X-VERSION:4</span><br><span class="hljs-attr">#EXT-X-MEDIA-SEQUENCE:4</span><br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.00</span>,<br>fileSeque<span class="hljs-symbol">nce4</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.00</span>,<br>fileSeque<span class="hljs-symbol">nce5</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce6</span>.ts,<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce7</span>.ts,<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce8</span>.ts,<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce9</span>.ts<br></code></pre></td></tr></table></figure><h3 id="Event-Playlist"><a href="#Event-Playlist" class="headerlink" title="Event Playlist"></a>Event Playlist</h3><blockquote><p>An event playlist is specified by the EXT-X-PLAYLIST-TYPE tag with a value of EVENT. It doesn’t initially have an EXT-X-ENDLIST tag, indicating that new media files will be added to the playlist as they become available.</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr">#EXTM3</span>U<br><span class="hljs-attr">#EXT-X-PLAYLIST-TYPE:EVENT</span><br><span class="hljs-attr">#EXT-X-TARGETDURATION:10</span><br><span class="hljs-attr">#EXT-X-VERSION:4</span><br><span class="hljs-attr">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.00</span>,<br>fileSeque<span class="hljs-symbol">nce0</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce1</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce2</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce3</span>.ts<br><span class="hljs-attr">#EXTINF:10</span><span class="hljs-number">.0</span>,<br>fileSeque<span class="hljs-symbol">nce4</span>.ts<br></code></pre></td></tr></table></figure><p>观察到<code>#EXT-X-PLAYLIST-TYPE:EVENT</code></p><blockquote><p>If the tag is present and has a value of EVENT, the server must not change or delete any part of the playlist file (although it may append lines to it). If the tag is present and has a value of VOD, the playlist file must not change.</p></blockquote><blockquote><p>You can’t remove anything from the playlist when using the EVENT tag; you may only append new segments to the end of the file. New segments are added to the end of the file until the event has concluded, at which time the EXT-X-ENDLIST tag is appended.</p></blockquote><p>如果类型为EVENT，更新m3u8文件，只能追加，不能删除。<br>如果类型为VOD，不能更改m3u8播放列表。</p><p>更新后</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#EXTM3U</span><br><span class="hljs-selector-id">#EXT-X-PLAYLIST-TYPE</span>:EVENT<br><span class="hljs-selector-id">#EXT-X-TARGETDURATION</span>:<span class="hljs-number">10</span><br><span class="hljs-selector-id">#EXT-X-VERSION</span>:<span class="hljs-number">4</span><br><span class="hljs-selector-id">#EXT-X-MEDIA-SEQUENCE</span>:<span class="hljs-number">0</span><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence0<span class="hljs-selector-class">.ts</span><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence1<span class="hljs-selector-class">.ts</span><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence2<span class="hljs-selector-class">.ts</span><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence3<span class="hljs-selector-class">.ts</span><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence4<span class="hljs-selector-class">.ts</span><br><br><span class="hljs-comment">// List of files between 4 and 120 go here.</span><br><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence120<span class="hljs-selector-class">.ts</span><br><span class="hljs-selector-id">#EXTINF</span>:<span class="hljs-number">10.0</span>,<br>fileSequence121<span class="hljs-selector-class">.ts</span><br>#EXT-X-ENDLIST<br></code></pre></td></tr></table></figure><h3 id="Creating-a-Multivariant-Playlist"><a href="#Creating-a-Multivariant-Playlist" class="headerlink" title="Creating a Multivariant Playlist"></a>Creating a Multivariant Playlist</h3><blockquote><p>Offer multiple playlist files to provide different encodings of the same content.</p></blockquote><p>为同一份内容，提供多个m3u8索引，每个m3u8采用不同的编码参数。</p><blockquote><p>The Multivariant Playlist describes all of the available variants for your content. Each variant is a version of the stream at a particular bit rate and is contained in a separate playlist. The client switches to the most appropriate variant based on the measured network bit rate. The client’s player is tuned to minimize stalling of playback, to give the user the best possible streaming experience.</p></blockquote><p>为同一份内容，提供多个码率的m3u8,方便客户端播放器选择适应自身网络状况的最佳码率资源。</p><p>结构图：</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16656676568981665667656356.png"></p><p>文件示例</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#EXTM3U</span><br><span class="hljs-meta">#EXT-X-STREAM-INF:BANDWIDTH=150000,RESOLUTION=416x234,CODECS=<span class="hljs-string">&quot;avc1.42e00a,mp4a.40.2&quot;</span></span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/low/index.m3u8</span><br><span class="hljs-meta">#EXT-X-STREAM-INF:BANDWIDTH=240000,RESOLUTION=416x234,CODECS=<span class="hljs-string">&quot;avc1.42e00a,mp4a.40.2&quot;</span></span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/lo_mid/index.m3u8</span><br><span class="hljs-meta">#EXT-X-STREAM-INF:BANDWIDTH=440000,RESOLUTION=416x234,CODECS=<span class="hljs-string">&quot;avc1.42e00a,mp4a.40.2&quot;</span></span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/hi_mid/index.m3u8</span><br><span class="hljs-meta">#EXT-X-STREAM-INF:BANDWIDTH=640000,RESOLUTION=640x360,CODECS=<span class="hljs-string">&quot;avc1.42e00a,mp4a.40.2&quot;</span></span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/high/index.m3u8</span><br><span class="hljs-meta">#EXT-X-STREAM-INF:BANDWIDTH=64000,CODECS=<span class="hljs-string">&quot;mp4a.40.5&quot;</span></span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/audio/index.m3u8</span><br></code></pre></td></tr></table></figure><p><strong>EXT-X-STREAM-INF</strong><br>Indicates that the next URL in the playlist file identifies another playlist file.</p><p>表明它的URL内容是一个m3u8文件。</p><p>The EXT-X-STREAM-INF tag has the following parameters:</p><p><strong>AVERAGE-BANDWIDTH</strong></p><p>(Optional, but recommended) An integer that represents the average bit rate for the variant stream.</p><p>平均码率，可选。</p><p><strong>BANDWIDTH</strong></p><p>(Required) An integer that is the upper bound of the overall bit rate for each media file, in bits per second. The upper bound value is calculated to include any container overhead that appears or will appear in the playlist.</p><p>带宽。</p><p><strong>FRAME-RATE</strong></p><p>(Optional, but recommended) A floating-point value that describes the maximum frame rate in a variant stream.</p><p>帧率，可选， 表示该流的最大帧率。</p><p><strong>HDCP-LEVEL</strong></p><p>(Optional) Indicates the type of encryption used. Valid values are TYPE-0 and NONE. Use TYPE-0 if the stream may not play unless the output is protected by HDCP.</p><p>加密方式，可选。</p><p><strong>RESOLUTION</strong></p><p>(Optional, but recommended) The optional display size, in pixels, at which to display the video in the playlist. This parameter should be included for any stream that includes video.</p><p>视频分辨率。</p><p><strong>VIDEO-RANGE</strong></p><p>(Required depending on encoding) A string with valid values of SDR or PQ. If transfer characteristic codes 1, 16, or 18 aren’t specified, then this parameter must be omitted.</p><p><strong>CODECS</strong></p><p>(Optional, but recommended) A quoted string containing a comma-separated list of formats, where each format specifies a media sample type that’s present in a media segment in the playlist file. Valid format identifiers are those in the ISO file format name space defined by RFC 6381.</p><p>编码器相关参数。</p><h3 id="Adding-Alternate-Media-to-a-Playlist"><a href="#Adding-Alternate-Media-to-a-Playlist" class="headerlink" title="Adding Alternate Media to a Playlist"></a>Adding Alternate Media to a Playlist</h3><blockquote><p>Specify Rendition Playlists that can override the main presentation.</p></blockquote><blockquote><p>Adding alternate media to a Multivariant Playlist allows a provider to specify one of a set of variant playlists as an override of the main presentation. The client plays only the override media (audio or video), and suppresses any media of the same type from the main presentation, if present. This allows a presentation to offer multiple versions of the media without requiring the provider to store duplicate media, or requiring the client to download all variants when it only needs one. It also allows additional media to be offered subsequently without remastering the original content.</p></blockquote><p>在主音频视频资源外，提供多路备选资源。<br>选择备选的音视频，客户端只会播放备选音视频资源。</p><p>下面的例子，提供备选的多语言音频播放列表</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#EXTM3U<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;eng&quot;</span>,NAME=<span class="hljs-string">&quot;English&quot;</span>,AUTOSELECT=YES, DEFAULT=YES,URI=<span class="hljs-string">&quot;eng/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;fre&quot;</span>,NAME=<span class="hljs-string">&quot;Français&quot;</span>,AUTOSELECT=YES, DEFAULT=NO,URI=<span class="hljs-string">&quot;fre/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;sp&quot;</span>,NAME=<span class="hljs-string">&quot;Espanol&quot;</span>,AUTOSELECT=YES, DEFAULT=NO,URI=<span class="hljs-string">&quot;sp/prog_index.m3u8&quot;</span><br><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:PROGRAM<span class="hljs-params">-ID</span>=<span class="hljs-number">1</span>,BANDWIDTH=<span class="hljs-number">195023</span>,CODECS=<span class="hljs-string">&quot;avc1.42e00a,mp4a.40.2&quot;</span>,AUDIO=<span class="hljs-string">&quot;audio&quot;</span><br>lo/prog_index.m3u8<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:PROGRAM<span class="hljs-params">-ID</span>=<span class="hljs-number">1</span>,BANDWIDTH=<span class="hljs-number">591680</span>,CODECS=<span class="hljs-string">&quot;avc1.42e01e,mp4a.40.2&quot;</span>,AUDIO=<span class="hljs-string">&quot;audio&quot;</span><br>hi/prog_index.m3u8<br></code></pre></td></tr></table></figure><p>The tags used in this Multivariant Playlist example include:</p><p><strong>EXT-X-MEDIA</strong><br>Identifies an element of a media selection group. All the elements of a media selection group must have similar characteristics, for example, the same codecs and the same maximum bandwidth.</p><p>表示媒体选项分组中的一个元素，同一个分组中的媒体具有相同的特征，如相同的编解码或带宽。</p><p>EXT-X-STREAM-INF<br>indicates that the next URL in the Multivariant Playlist identifies a Rendition Playlist. See Creating a Multivariant Playlist for the basic parameters.</p><p>表明它的内容是一个索引， 指向一个m3u8文件</p><p>The EXT-X-MEDIA tag has the following parameters:</p><p>TYPE<br>(Required) A string indicating the type of media. Valid values are AUDIO, VIDEO, SUBTITLES, and CLOSED-CAPTIONS.</p><p>媒体类型</p><ul><li>AUDIO</li><li>VIDEO</li><li>SUBTITLES</li><li>CLOSED-CAPTIONS</li></ul><p>GROUP-ID<br>(Required) A string specifying the group that the media selection belongs to.</p><p>分组标识，字符串，必须有。</p><p>LANGUAGE<br>(Optional) A string that identifies the primary language used in the media selection.</p><p>该选项中媒体文件对应的语言，可选。</p><p>NAME<br>(Required) A string that describes the primary language used in the media selection.</p><p>该选项中媒体文件对应的语言的字符串标识，必须。</p><p>AUTOSELECT<br>(Optional) A string that indicates that the client may play the media selection in the absence of explicit user preference. Valid values are YES and NO. If the value of DEFAULT is YES, this value must also be YES.</p><p>是否自动选择，可选。在用户偏好缺省的时候，指示客户端是否应该自动选择该选项。合法的值是YES和NO，<br>如果<code>DEFAULT</code>是YES， 该字段的值必须也是YES.</p><p>DEFAULT<br>(Optional) A string indicating that the media selection should be played if the user hasn’t selected another option. Valid values are YES and NO.</p><p>是否默认播放该选项，可选。用户没有选择其他选项的时候，是否默认播放该选项。</p><p>INSTREAM-ID<br>(Required for closed captions) A string that specifies a rendition within the segments in the media playlist. When the TYPE attribute is CLOSED-CAPTIONS, the INSTREAM-ID must have one of the following values: CC1, CC3, CC3, CC4, or SERVICEn, where n is between 1 and 63.</p><p>ASSOC-LANGUAGE<br>(Optional) A string containing a language tag for the rendition. An associated language is often different from the language specified in the LANGUAGE attribute.</p><p>关联的语言，可选。</p><p>CHANNELS<br>(Required when two renditions have the same codec but a different number of channels) An ordered string that indicates the maximum number of independent, simultaneous audio channels present in a media segment.</p><p>表明该音频文件有几个声道</p><p>URI<br>(Optional) A string containing a URI that identifies the media playlist file. If the TYPE is CLOSED-CAPTIONS, this attribute must be omitted. When this attribute is omitted, the media content is in the original variant.</p><p>媒体文件地址，可选。</p><p>When its URI attribute is omitted, the EXT-X-MEDIA tag can indicate that the media described is included in the URI of the EXT-X-STREAM-INF tag.</p><p>如果URI字段不存在，<code>EXT-X-MEDIA</code>描述的的媒体文件存在于<code>EXT-X-STREAM-INF</code>标签中。</p><p>The EXT-X-STREAM-INF tag has the following parameters:</p><p>AUDIO<br>(Optional) A quoted string that indicates the set of audio streams that may be used when playing the presentation. This value must match the value of the GROUP-ID attribute of an EXT-X-MEDIA tag elsewhere in the Multivariant Playlist whose TYPE attribute is AUDIO.</p><p>VIDEO<br>(Optional) A quoted string that indicates the set of video streams that may be used when playing the presentation. This value must match the value of the GROUP-ID attribute of an EXT-X-MEDIA tag elsewhere in the Multivariant Playlist whose TYPE attribute is VIDEO.</p><p>SUBTITLES<br>(Optional) A quoted string that indicates the set of subtitle renditions that can be used. This value must match the value of the GROUP-ID attribute of an EXT-X-MEDIA tag elsewhere in the Multivariant Playlist whose TYPE attribute is SUBTITLE.</p><p>CLOSED-CAPTIONS<br>(Optional) Either a quoted string that indicates the set of closed captions that can be used or an enumerated string with the value of NONE. When this value is a quoted string, it must match the value of the GROUP-ID attribute of an EXT-X-MEDIA tag elsewhere in the Multivariant Playlist whose TYPE attribute is CLOSED-CAPTIONS. If the enumerated value is NONE, all EXT-X-STREAM-INF tags must have this attribute with a value of NONE.</p><p>总结一下：</p><p>通过<code>EXT-X-MEDIA</code>可以定义资源组，可以有多个组，用GROUP-ID来区分， 有四种组类型</p><ul><li>AUDIO</li><li>VIDEO</li><li>SUBTITLES</li><li>CLOSED-CAPTIONS</li></ul><p>每个分组中流属性是相同，其参数可以通过关联的<code>EXT-X-STREAM-INF</code>指定<br>通过<code>EXT-X-STREAM-INF</code>定义资源组的流参数，带宽，编解码器信息。 它关联一个组ID，这个组内的所有备选媒体都具有相同的性质。</p><p>You can have multiple audio groups to allow changes in codes or bit rate. However, each audio group in a variant must have the same alternates in it. For example, you can’t have English in one audio group and leave it out of the other group. The following example defines two audio groups, one for low bit rates and one for high bit rates. Both audio groups define the same set of languages but are called based on the available bandwidth.</p><p>每个组可以提供多个码率的媒体文件，其码率可以通过<code>EXT-X-STREAM-INF</code>指定，虽然<code>GROUP-ID</code>相同，但是码率是不同的。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#EXTM3U<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio-lo&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;eng&quot;</span>,NAME=<span class="hljs-string">&quot;English&quot;</span>,AUTOSELECT=YES, DEFAULT=YES,URI=<span class="hljs-string">&quot;englo/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio-lo&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;fre&quot;</span>,NAME=<span class="hljs-string">&quot;Français&quot;</span>,AUTOSELECT=YES, DEFAULT=NO,URI=<span class="hljs-string">&quot;frelo/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio-lo&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;es&quot;</span>,NAME=<span class="hljs-string">&quot;Espanol&quot;</span>,AUTOSELECT=YES, DEFAULT=NO,URI=<span class="hljs-string">&quot;splo/prog_index.m3u8&quot;</span><br> <br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio-hi&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;eng&quot;</span>,NAME=<span class="hljs-string">&quot;English&quot;</span>,AUTOSELECT=YES, DEFAULT=YES,URI=<span class="hljs-string">&quot;eng/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio-hi&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;fre&quot;</span>,NAME=<span class="hljs-string">&quot;Français&quot;</span>,AUTOSELECT=YES, DEFAULT=NO,URI=<span class="hljs-string">&quot;fre/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;audio-hi&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;es&quot;</span>,NAME=<span class="hljs-string">&quot;Espanol&quot;</span>,AUTOSELECT=YES, DEFAULT=NO,URI=<span class="hljs-string">&quot;sp/prog_index.m3u8&quot;</span><br> <br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:BANDWIDTH=<span class="hljs-number">195023</span>,CODECS=<span class="hljs-string">&quot;mp4a.40.5&quot;</span>, AUDIO=<span class="hljs-string">&quot;audio-lo&quot;</span><br>lo/prog_index.m3u8<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:BANDWIDTH=<span class="hljs-number">260000</span>,CODECS=<span class="hljs-string">&quot;avc1.42e01e,mp4a.40.2&quot;</span>, AUDIO=<span class="hljs-string">&quot;audio-lo&quot;</span><br>hi/prog_index.m3u8<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:BANDWIDTH=<span class="hljs-number">591680</span>,CODECS=<span class="hljs-string">&quot;mp4a.40.2, avc1.64001e&quot;</span>, AUDIO=<span class="hljs-string">&quot;audio-hi&quot;</span><br>lo/prog_index.m3u8<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:BANDWIDTH=<span class="hljs-number">650000</span>,CODECS=<span class="hljs-string">&quot;avc1.42e01e,mp4a.40.2&quot;</span>, AUDIO=<span class="hljs-string">&quot;audio-hi&quot;</span><br>hi/prog_index.m3u8<br><br></code></pre></td></tr></table></figure><p>You can have both a group and a single stream in a playlist. This is often done when you have multiple camera angles that all use the same audio. Create a group for the video streams and then declare the single audio stream. The following example shows a playlist with three camera angles and a single audio stream:</p><p>一个视频组关联单个音频的情况。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#EXTM3U<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;500kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle1&quot;</span>,AUTOSELECT=YES,DEFAULT=YES<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;500kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle2&quot;</span>,AUTOSELECT=YES,DEFAULT=NO, URI=<span class="hljs-string">&quot;Angle2/500kbs/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;500kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle3&quot;</span>,AUTOSELECT=YES,DEFAULT=NO, URI=<span class="hljs-string">&quot;Angle3/500kbs/prog_index.m3u8&quot;</span><br><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;aac&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;en&quot;</span>,NAME=<span class="hljs-string">&quot;English&quot;</span>,AUTOSELECT=YES, DEFAULT=YES,URI=<span class="hljs-string">&quot;eng/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:PROGRAM<span class="hljs-params">-ID</span>=<span class="hljs-number">1</span>,BANDWIDTH=<span class="hljs-number">754857</span>,CODECS=<span class="hljs-string">&quot;mp4a.40.2,avc1.4d401e&quot;</span>, VIDEO=<span class="hljs-string">&quot;500kbs&quot;</span>,AUDIO=<span class="hljs-string">&quot;aac&quot;</span><br>Angle1/<span class="hljs-number">500</span>kbs/prog_index.m3u8<br></code></pre></td></tr></table></figure><p>To provide different streams for different bit rates, a different video group ID is needed for each bit rate.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#EXTM3U<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;200kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle1&quot;</span>,AUTOSELECT=YES,DEFAULT=YES<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;200kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle2&quot;</span>,AUTOSELECT=YES,DEFAULT=NO, URI=<span class="hljs-string">&quot;Angle2/200kbs/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;200kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle3&quot;</span>,AUTOSELECT=YES,DEFAULT=NO, URI=<span class="hljs-string">&quot;Angle3/200kbs/prog_index.m3u8&quot;</span><br><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;500kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle1&quot;</span>,AUTOSELECT=YES,DEFAULT=YES<br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;500kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle2&quot;</span>,AUTOSELECT=YES,DEFAULT=NO, URI=<span class="hljs-string">&quot;Angle2/500kbs/prog_index.m3u8&quot;</span><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=VIDEO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;500kbs&quot;</span>,NAME=<span class="hljs-string">&quot;Angle3&quot;</span>,AUTOSELECT=YES,DEFAULT=NO, URI=<span class="hljs-string">&quot;Angle3/500kbs/prog_index.m3u8&quot;</span><br><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-MEDIA</span>:<span class="hljs-keyword">TYPE</span>=AUDIO,<span class="hljs-keyword">GROUP</span><span class="hljs-params">-ID</span>=<span class="hljs-string">&quot;aac&quot;</span>,LANGUAGE=<span class="hljs-string">&quot;en&quot;</span>,NAME=<span class="hljs-string">&quot;English&quot;</span>,AUTOSELECT=YES, DEFAULT=YES,URI=<span class="hljs-string">&quot;eng/prog_index.m3u8&quot;</span><br><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:PROGRAM<span class="hljs-params">-ID</span>=<span class="hljs-number">1</span>,BANDWIDTH=<span class="hljs-number">300000</span>,CODECS=<span class="hljs-string">&quot;mp4a.40.2,avc1.4d401e&quot;</span>, VIDEO=<span class="hljs-string">&quot;200kbs&quot;</span>,AUDIO=<span class="hljs-string">&quot;aac&quot;</span><br>Angle1/<span class="hljs-number">200</span>kbs/prog_index.m3u<br><br>#EXT<span class="hljs-params">-X</span><span class="hljs-params">-STREAM</span><span class="hljs-params">-INF</span>:PROGRAM<span class="hljs-params">-ID</span>=<span class="hljs-number">1</span>,BANDWIDTH=<span class="hljs-number">754857</span>,CODECS=<span class="hljs-string">&quot;mp4a.40.2,avc1.4d401e&quot;</span>, VIDEO=<span class="hljs-string">&quot;500kbs&quot;</span>,AUDIO=<span class="hljs-string">&quot;aac&quot;</span><br>Angle1/<span class="hljs-number">500</span>kbs/prog_index.m3u8<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://developer.apple.com/documentation/http_live_streaming">https://developer.apple.com/documentation/http_live_streaming</a><br><a href="https://aleen42.gitbooks.io/wiki/content/summary/m3u8/m3u8.html">https://aleen42.gitbooks.io/wiki/content/summary/m3u8/m3u8.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hls,m3u8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPEG-TS 格式分析</title>
    <link href="/2022/10/12/hls/2022-10-12-MPEG-TS%20%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
    <url>/2022/10/12/hls/2022-10-12-MPEG-TS%20%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="https://blog.csdn.net/Kayson12345/article/details/81266587">MPEG-TS 格式解析</a></p><p><a href="https://tsduck.io/download/docs/mpegts-introduction.pdf">An introduction to MPEG-TS</a></p><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>MPEG-TS一种标准数据容器格式，传输与存储音视频、节目与系统信息协议数据，应用于数字广播系统，譬如DVB,ATSC与IPTV。传输流在MPEG-2第1部分系统中规定，正式称为ISO &#x2F; IEC标准13818-1或ITU-T建议书[1]。</p><p>MPEG2&#x2F;DVB是一种多媒体传输、复用技术，在数字电视广播中可提供数百个节目频道。复用的含义是，可以同时传输多层节目。</p><p>注意，DVB全称为Digital Video Broadcasting，包括不同的系统，如卫星数字电视广播系统，有线数字电视广播系统，地面开路数字电视广播系统，交互式数字电视广播系统以及数字电视加扰系统。DVB系统标准是一种全球数字电视技术的标准。如何定义广播中的比特流语法与句法，以实现在比特流中复用数字音频与视频，欧洲的DVB采用数字视频压缩MPEG-2标准，该标准是定义比特流的语法与句法的一个ISO&#x2F;IEC标准，即13818-1标准。DVB系统的核心技术是采用MPEG-2技术进行视频、音频的编码，使用统一的MPEG-2传输流（TS流）。</p><p>MPEG-2标准中，有两种不同的码流输出到信道，一种是节目码流（PS: Program Stream），适用于没有传输误差的场景；一种是传送流（TS：Transport Stream)，适用于有信道噪声的传输场景。节目流设计用于合理可靠的媒体，如光盘（如DVD），而传输流设计用于不太可靠的传输，即地面或卫星广播。此外，传输流可以携带多个节目。</p><p>MPEG-2 system（编号13818-1）是MPEG-2标准的其中一部分，该部分描述了多个视频，音频和数据多种基本流（ES）合成传输流（TS）和节目流（PS）的方式。</p><h1 id="TS-介绍"><a href="#TS-介绍" class="headerlink" title="TS 介绍"></a>TS 介绍</h1><p>一路TS比特流通常由连续的固定字节的TS包组成，所包含的内容有：</p><ul><li><p>一路或多路视频流（多个PES包组成，每个PES包的PID是一致的，一个PES包可能由若干个TS包组成）</p></li><li><p>一路或多路音频流（通常为杜比的音频格式）</p></li><li><p>一路或多路字幕</p></li><li><p>PSI表格信息（Program Specific Information，包括PAT与PMT表，即节目关联表与节目映射表）</p></li><li><p>PES: Packetized Elementary Stream，一路基本码流（如MEPG2视频流）会在编码器端被打包成PES流，由多个PES包组成，打包的过程中主要加入了PTS&#x2F;DTS信息。</p></li></ul><p>PAT(Program Association Table)描述有多少路节目，每路节目的PMT（Program Map Table）表的PID是多少，PMT则描述了本节目有多少流，每一路流的类型与PID是多少，举个例子，你找个一个TS包，它的PID是0，说明它的负载内容是PAT信息，解析PAT信息，你发现节目1的PMT表的PID是0x10，接着，你在比特流中寻找一个PID为0x10的TS包，它的负载内容是节目1的PMT表信息，解析该PMT信息，你可以发现第一路流是MPEG2音频流，PID号0x21，第二路流是MPEG2视频流，PID号是0x22，第三路流是DVB字幕流，PID号是0x23，解析完毕，凡是比特流中PID号为0x22的TS包，所负载的内容为MPEG2视频流，把这些包一个一个找出来，把其中的有效码流一部分一部分的拼接起来，然后送给解码器去解码。</p><p>注意，就一般的视频流而言，只要拼接成一个完整的PES包，就可以送出去给解码器，然后再继续拼接下一个PES包。</p><p>什么是ES流，PES流，TS流？</p><ul><li><p>ES流：有三种，图像数据流，音频数据流，以及其他编码数据流。</p></li><li><p>PES流：PES流是ES流经过PES打包器处理后形成的数据流，在这个过程中完成了将ES流分组、打包、加入包头信息等操作（对ES流的第一次打包）。PES流的基本单位是PES包。</p></li><li><p>TS流：由定长的TS包组成（188字节），而TS包是对PES包的一个重新封装（到这里，ES经过了两层的封装） 。应用于相对有错环境下的传输与存储（如DVB中），其基本单位是TS包，长度固定188字节。日本的DVB-S广播系统采用192个字节的TS包，美国采用204个字节的TS包，多加了16个字节的前向纠错校验码（FEC）。</p></li></ul><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655696635121665569663420.png"><br>Fig. 1. ES流打包成PES流<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655697239811665569723213.png"><br>Fig. 2. PES流打包成TS流</p><p>什么是PSI表？</p><p>PSI(Program Specific Info)，节目特定信息，该表格信息用来描述传送流的组成结构。PSI信息由四种类型的表组成，包括节目关联表（PAT），节目映射表（PMT），条件接收表（CAT），网络信息表（NIT）。PAT与PMT两张表帮助我们找到该传送流中的所有节目与流，PAT告诉我们，该TS流由哪些节目组成，每个节目的节目映射表PMT的PID是什么，而PMT告诉我们，该节目由哪些流组成，每一路流的类型与PID是什么。CAT与NIT暂时不考虑。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655698149521665569814410.png"></p><p>Fig. 3. PSI表</p><h1 id="TS解封装的原理"><a href="#TS解封装的原理" class="headerlink" title="TS解封装的原理"></a>TS解封装的原理</h1><p>TS流的形成过程：</p><ol><li>将原始音视频数据压缩之后，压缩结果组成一个基本码流（ES）。</li><li>对ES（基本码流）进行打包形成PES。</li><li>在PES包中加入时间戳信息(PTS&#x2F;DTS)。</li><li>将PES包内容分配到一系列固定长度的传输包（TS Packet）中。</li><li>在传输包中加入定时信息(PCR)。</li><li>在传输包中加入节目专用信息(PSI) 。</li><li>连续输出传输包形成具有恒定比特率的MPEG-TS流。</li></ol><p>TS流的解析过程，可以说是生成的逆过程：</p><ol><li>从复用的MPEG-TS流中解析出TS包；</li><li>从TS包中获取PAT及对应的PMT（PSI中的表格）；</li><li>从而获取特定节目的音视频PID；</li><li>通过PID筛选出特定音视频相关的TS包，并解析出PES；</li><li>从PES中读取到PTS&#x2F;DTS，并从PES中解析出基本码流ES；</li><li>将ES交给解码器，获得压缩前的原始音视频数据</li></ol><h1 id="TS格式详解"><a href="#TS格式详解" class="headerlink" title="TS格式详解"></a>TS格式详解</h1><h2 id="1-TS包格式"><a href="#1-TS包格式" class="headerlink" title="1. TS包格式"></a>1. TS包格式</h2><p>TS包主要由两部分组成，一是4个字节的包头信息，二是有效载荷，另外中间有可能插入自适应调整字段。有效载荷包括节目专用信息，打包后的流数据，以及业务信息。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655700779571665570077901.png"></p><p>Fig. 4. TS包的组成结构</p><p>TS的语法结构如下：</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655701129401665570112830.png"></p><p>Fig. 5. TS的语法结构</p><p>主要字段解析：<br>Sync byte:同步字节，值为0x47；</p><p>Transport error indicator:传输错误指示位，置1时，表示传送包中至少有一个不可纠正的错误位。</p><p>Payload unit start indicator:负载单元起始指标位，表示TS包的有效净荷以PES&#x2F;PSI包的第一个字节开始，举个例子，一个PES包可能由多个TS包构成，第一个TS包的负载单元起始指标位才会被置位。</p><p>Transport priority:传输优先级，表明该包比同个PID的但未置位的TS包有更高的优先级。</p><p>PID:该TS包的ID号，如果净荷是PAT包，则PID固定为0x00。</p><p>Transport scrambling control:传输加扰控制位</p><p>Adaption field control:自适应调整域控制位，置位则表明该TS包存在自适应调整字段。</p><p>Continuity counter:连续计数器，随着具有相同PID的TS包的增加而增加，达到最大时恢复为0，如果两个连续相同PID的TS包具有相同的计数，则表明这两个包是一样的，只取一个解析即可。</p><p>Payload:负载内容，可能为PAT&#x2F;PMT&#x2F;PES。data_byte为1B长<br>度的数据，为负载字节。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655826274671665582627092.png"></p><p>Fig. 6. TS的语法结构代码示意</p><h2 id="2-PAT-格式"><a href="#2-PAT-格式" class="headerlink" title="2. PAT 格式"></a>2. PAT 格式</h2><p>PAT的语法结构如下：</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655846904131665584689570.png"><br>Fig. 7. PAT的语法结构示意</p><p>主要的字段解析如下：</p><p>table_id: 标识一个TS PSI 分段的内容是节目关联分段，条件访问分段还是节目映射分段。对于PAT，置为0x00。</p><p>section_syntax_indicator: 对于PAT，置为0x01。</p><p>section_length: 分段长度字段，其值为从section_length（不包括在内）到CRC_32字段的字节数，其值不超过1021。</p><p>transport_stream_id: 区别与其他复用流的标识。</p><p>version_number: PAT的版本号，如果PAT有变，则版本号加1。</p><p>current_next_indicator:置0时，表明该传送的表分段不能使用，下一个表分段才有效。</p><p>section_number: 表明该TS包属于该PAT的第几个分段，分段号从0开始。</p><p>last_section_number: 表明最后一个分段号，同时表明该PAT的最大分段数目。一般，一个PAT表由一个TS包传送。</p><p>program_number: 节目的编号。</p><p>network_PID: NIT表的PID值。</p><p>program_map_PID: PMT表的PID值。</p><p>CRC_32: CRC校验。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655849004091665584900226.png"><br>Fig. 8. PAT语法结构代码示意</p><h2 id="3-PMT-格式"><a href="#3-PMT-格式" class="headerlink" title="3. PMT 格式"></a>3. PMT 格式</h2><p>PMT的语法结构如下：<br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655849504061665584950270.png"><br>Fig. 9. PMT语法结构</p><p>主要的字段解析如下：</p><p>table_id: 标识一个TS PSI 分段的内容是节目关联分段，条件访问分段还是节目映射分段。对于PMT，置为0x02。</p><p>section_syntax_indicator: 对于PMT，置为0x01。</p><p>section_length: 分段长度字段，其值为从section_length（包括在内）到CRC_32字段的字节数，其值不超过1021。</p><p>program_number: 表明一共有多少个节目。</p><p>version_number: PMT的版本号，如果字段中有关信息有变，则版本号以32为模加1。版本号是对一个节目的定义。</p><p>current_next_indicator:置0时，表明该传送的表分段不能使用，下一个表分段才有效。</p><p>section_number: 总为0x00。</p><p>last_section_number: 总为0x00。</p><p>PCR_PID: 指示含有该节目的PCR字段的TS包的PID。</p><p>program_info_length: 表明跟随其后的对节目信息描述的字节数，也就是第一个N loop descriptors的字节数。</p><p>stream_type: 表明PES流的类型。譬如，0x01表明是MPEG-1视频，0X03表明是MPEG-1音频。</p><p>elementary_PID: 表明该负载有该PES流的TS包的PID值。</p><p>ES_info_length: 表明跟随其后的描述相关节目元素的字节数，也就是第二个N loop descriptors的字节数。</p><p>CRC_32: 在CEDARX代码中仅对DVB的场景下作校验。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655851034681665585103423.png"></p><p>Fig. 10. PMT的语法结构代码示意</p><h2 id="4-PES格式"><a href="#4-PES格式" class="headerlink" title="4.PES格式"></a>4.PES格式</h2><p>PES的语法如图10所示，它携带的主要信息包括流的ID，PES包的长度，PTS以及流的数据，也就是音视频与字幕数据。</p><p>主要的字段解析如下：</p><p>packet_start_code_prefix: 固定0x000001</p><p>stream_id: 指定基本流的类型与编号</p><p>PES_packet_length: 表明在该字段后面还有多少个字节。0表明PES包的长度未指示也未限定，对于当前的PES包而言。</p><p>PES_scrambling_control: PES包的有效载荷的加扰方式。</p><p>PES_priority: 多路复用器可以通过该位最优化基本流内的数据。</p><p>data_alignment_indicator:</p><p>copyright: PES包中的有效载荷确定具有版权的话，就置位。</p><p>orginal_or_copy: 置位时，表明PES包的有效载荷的内容是原始的，非复制的。</p><p>PTS_DTS_flags: 2比特字节，表明PTS&#x2F;DTC的存在情况。</p><p>ES_rate_flag: 置位，表明后面存在ES_rate字段。</p><p>PES_header_data_length: 表明该PES包头中由任选字段与填充字节所占据的字节总数。任选字段譬如ES_rate。</p><p>marker_bit: 为1的比特位。</p><p>PTS: 对于音频而言，如果该PES包中存在PTS字段，则有效负载中肯定有新的音频存取单元（access unit），该PTS对应于该音频存取单元。新的音频存取单元指的是一帧新的音频帧。对于视频而言，一般情况下，跟音频一样。</p><p>DTS: 解码时间标志，当前CEDARX解码器未用到DTS。</p><p>ES_rate: 基本流速率，指定系统目标解码器接收PES包字节的速率。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655853343991665585333549.png"><br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655858313871061665585632_.jpg"><br><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16655858713891665585871171.png"><br>Fig. 11. PES的语法结构代码</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] ISO &#x2F; IEC标准13818-1或ITU-T建议书 <a href="http://www.itu.int/rec/T-REC-H.222.0">http://www.itu.int/rec/T-REC-H.222.0</a></p><p>[2] 《数字电视业务信息及其编码》，方涛，国防工业出版社</p><p>[3] <a href="https://wenku.baidu.com/view/87f5439c2f60ddccdb38a066.html?rec_flag=default">https://wenku.baidu.com/view/87f5439c2f60ddccdb38a066.html?rec_flag=default</a></p><p>[4] TS码流结构分析PPT，网络资料</p><p>————————————————</p><p>版权声明：本文为CSDN博主「Kayson12345」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/Kayson12345/article/details/81266587">https://blog.csdn.net/Kayson12345/article/details/81266587</a></p><h1 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h1><p>从TS流中获取PAT，解析PAT得到节目列表，每个节目列表对应一个PMT， 从PMT中得该节目对应的音视频PID， 从TS流根据PID滤出音视频TS包，将TS包还原为PES包，进而还原为ES流（h264, aac）送给解码器解码。</p><p>结合<a href="https://tsduck.io/download/docs/mpegts-introduction.pdf">An introduction to MPEG-TS</a>看起来更易于理解。</p><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><p><a href="https://easyice.cn/archives/85">easyice </a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hls</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aac adts 格式分析</title>
    <link href="/2022/09/23/aac/2022-09-23-aac-adts/"/>
    <url>/2022/09/23/aac/2022-09-23-aac-adts/</url>
    
    <content type="html"><![CDATA[<p>AAC音频格式在MPEG-2（ISO-13318-7 2003）中有定义。AAC后来又被采用到MPEG-4标准中。</p><p>AAC 有两种格式 ADIF(Audio Data Interchange Forma) 和 ADTS(Audio Data Transport Stream)</p><ul><li>ADIF: ADIF只有一个统一的头，所以必须得到所有的数据后解码</li><li>ADTS: 每一帧都有头信息, 可以在任意帧解码</li></ul><h2 id="ADIF"><a href="#ADIF" class="headerlink" title="ADIF"></a>ADIF</h2><p>adif头 + 对齐字节 + 数据块</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">adif_sequence</span>() &#123;<br>    <span class="hljs-built_in">adif_header</span>();<br>    <span class="hljs-built_in">byte_alignment</span>();<br>    <span class="hljs-built_in">raw_data_stream</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ADTS"><a href="#ADTS" class="headerlink" title="ADTS"></a>ADTS</h2><p>数据流是一帧一帧的adts，可以在任何位置解码。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">adts_sequence</span>() &#123;</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-keyword">while</span></span> (<span class="hljs-title">nextbits</span>() == <span class="hljs-variable">syncword</span>) </span><br><span class="hljs-function">    &#123; </span><br><span class="hljs-function">        <span class="hljs-title">adts_frame</span>();</span><br><span class="hljs-function">    &#125; </span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="adts-frame"><a href="#adts-frame" class="headerlink" title="adts_frame"></a>adts_frame</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">adts_frame</span>() &#123;<br>    <span class="hljs-built_in">adts_fixed_header</span>();<br>    <span class="hljs-built_in">adts_variable_header</span>();<br>    if (number_of_raw_data_blocks_in_frame == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">adts_error_check</span>();<br>        <span class="hljs-built_in">raw_data_block</span>(); <br>    &#125;<br>    else &#123;<br>        <span class="hljs-built_in">adts_header_error_check</span>();<br>        for (i = <span class="hljs-number">0</span>; i &lt;= number_of_raw_data_blocks_in_frame; i++) &#123;<br>            <span class="hljs-built_in">raw_data_block</span>();<br>            <span class="hljs-built_in">adts_raw_data_block_error_check</span>();<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>每一帧都有28位的固定header + 28位的可变header组成的，共7字节。</p><h3 id="adts-fixed-header"><a href="#adts-fixed-header" class="headerlink" title="adts_fixed_header"></a>adts_fixed_header</h3><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653251125631665325112115.png"></p><p><strong>syncword</strong></p><p>The bit string <code>1111 1111 1111</code>.</p><p><strong>ID</strong></p><p>0 for MPEG-4, 1 for MPEG-2</p><p><strong>layer</strong></p><p>Indicates which layer is used. Set to <code>00</code>.</p><p><strong>protection_absent</strong></p><p>Indicates whether error_check() data is present or not.<br>0 存在，1 不存在。</p><p><strong>profile</strong></p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653255915411665325591471.png"></p><p><strong>sampling_frequency_index</strong></p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653256535451665325652832.png"></p><p><strong>private_bit</strong></p><p>Bit for private use. This bit will not be used in the future by ISO&#x2F;IEC.<br>set to 0 when encoding, ignore when decoding ？？</p><p><strong>channel_configuration</strong></p><p>声道信息，大于0 根据下表来决定， 等于0？</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653263524151665326351568.png"></p><p><strong>original&#x2F;copy</strong></p><p>This bit equals ‘O if the bitstream is a copy, ‘1’ if it is an original.</p><p>编码时设置为0，解码时忽略?</p><p><strong>home</strong></p><p>编码时设置为0，解码时忽略?</p><h3 id="adts-variable-header"><a href="#adts-variable-header" class="headerlink" title="adts_variable_header"></a>adts_variable_header</h3><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653274014091665327401231.png"></p><p><strong>copyright_identification_bit</strong></p><p>编码时设置为0，解码时忽略?</p><p><strong>copyright_identification_start</strong></p><p>编码时设置为0，解码时忽略?</p><p><strong>frame_length</strong></p><p>Length of the frame including headers and error_check in bytes</p><p><strong>adts_buffer_fullness</strong></p><blockquote><p>state of the bit reservoir in the course of encoding the ADTS frame, up to and including the first raw_data_block(). It is transmitted as the number of available bits in the bit reservoir divided by NCC divided by 32 and truncated to an integer value (Table 9). A value of hexadecimal 7FF signals that the bitstream is a variable rate bitstream. In this case, buffer fullness is not applicable</p></blockquote><p>0x7FF 代表码率是可变的。</p><p><strong>number_of_raw_data_blocks_in_frame</strong></p><blockquote><p>Number of raw_data_block()’s that are multiplexed in the adts_frame() is equal to<br>raw_data_block_position[i]<br>number_of_raw_data_blocks_in_frame + 1. The minimum value is 0 indicating 1 raw_data_block()</p></blockquote><p>根据 <code>number_of_raw_data_blocks_in_frame</code> 是否等于 0 做区分</p><ul><li>等于0， 该帧里面中只有一个raw_data_block</li><li>大于0， 该帧中有<code>number_of_raw_data_blocks_in_frame + 1</code>个raw_data_block</li><li>大于 0 的情况较少见?</li><li>每个raw_data_block对应于1024个采样?</li></ul><h3 id="adts-error-check"><a href="#adts-error-check" class="headerlink" title="adts_error_check"></a>adts_error_check</h3><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653285183621665328517592.png"></p><p>是否开启循环冗余校验，开启后header总长（28 + 28 + 16 &#x3D; 72）9个字节。</p><h3 id="adts-header-error-check"><a href="#adts-header-error-check" class="headerlink" title="adts_header_error_check"></a>adts_header_error_check</h3><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653287093611665328708587.png"></p><p><strong>raw_data_block_position[i]</strong></p><blockquote><p>Start position of the i-th raw_data_block() in the adts_frame(), measured as an offset in bytes from the start position of the first raw_data_block() in the adts_frame().</p></blockquote><p>如果开启循环冗余校验，并且<code>number_of_raw_data_blocks_in_frame &gt; 0</code>, 记录每个<code>raw_data_block</code>开始位置，添加crc校验。</p><h3 id="raw-data-block"><a href="#raw-data-block" class="headerlink" title="raw_data_block"></a>raw_data_block</h3><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653290063481665329006023.png"></p><p>判断声道，根据声道会有变化。</p><h3 id="adts-raw-data-block-error-check"><a href="#adts-raw-data-block-error-check" class="headerlink" title="adts_raw_data_block_error_check"></a>adts_raw_data_block_error_check</h3><p>每个<code>raw_data_block</code>对应的校验。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653291083431665329107537.png"></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>访问<a href="https://www.p23.nl/projects/aac-header/">https://www.p23.nl/projects/aac-header/</a>, 可以输入自己的aac 文件头部， 分析aac header 信息。</p><p><img src="https://fastly.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16653292653371665329265242.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>aac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fdk aac</title>
    <link href="/2022/09/23/aac/2022-09-23-fdk-aac/"/>
    <url>/2022/09/23/aac/2022-09-23-fdk-aac/</url>
    
    <content type="html"><![CDATA[<p>github 地址： <a href="https://github.com/mstorsjo/fdk-aac">https://github.com/mstorsjo/fdk-aac</a></p><p>fdk-aac 提供了跨平台的编解码 aac 的功能。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>fdk-aac提供了CMake构建静态库和动态库。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> fdk-aac<br>mkidr build <br><span class="hljs-comment">#BUILD_SHARED_LIBS 控制构建静态库还是动态库</span><br>cmake <span class="hljs-string">..</span> -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF<br>cmake <span class="hljs-params">--build</span> <span class="hljs-params">--config</span> Release<br><span class="hljs-comment"># install</span><br>cmake <span class="hljs-params">--install</span> &lt;dir&gt; <span class="hljs-params">--prefix</span> &lt;prefix&gt;<br></code></pre></td></tr></table></figure><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>在documentation目录下，有两个pdf文件，分别对应编码和解码相关的文档。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">aacDecoder<span class="hljs-selector-class">.pdf</span><br>aacEncoder.pdf<br></code></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>fdk-aac 提供一个编码的示例<code>aac-enc.c</code>， 主要介绍如何实现aac 编码功能<br>该demo 可以通过cmake来调试。<br>首先在cmake 中启用该程序，给cmake 传递参数<code>-DBUILD_PROGRAMS=TRUE</code></p><p>运行构建后的程序 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">aac-enc <span class="hljs-selector-attr">[-r bitrate]</span> <span class="hljs-selector-attr">[-t aot]</span> <span class="hljs-selector-attr">[-a afterburner]</span> <span class="hljs-selector-attr">[-s sbr]</span> <span class="hljs-selector-attr">[-v vbr]</span> <span class="hljs-keyword">in</span><span class="hljs-selector-class">.wav</span> out.aac<br></code></pre></td></tr></table></figure><p>该程序可以读取wav音频文件，编码为aac，将编码后的数据写入<code>out.aac</code> 文件中。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>fdk-aac 只支持采样格式为<code>int16</code>类型的定点格式，不支持如<code>float32</code>类型的浮点格式。</p><p>fdk-aac 默认一帧1024个采样。</p>]]></content>
    
    
    
    <tags>
      
      <tag>aac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg 命令</title>
    <link href="/2022/09/23/ffmpeg/2022-09-23-ffmpeg-%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/09/23/ffmpeg/2022-09-23-ffmpeg-%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...<br></code></pre></td></tr></table></figure><p>音频转码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#转码生成新的文件，目标为 </span><br><span class="hljs-bullet">-</span> ar 采样率 44100，<br><span class="hljs-bullet">-</span> ac 双声道，编码格式 aac<br><span class="hljs-bullet">-</span> acodec 编码器 aac<br>ffmpeg -i source.mp3 -ar 44100 -ac 2 -acodec aac -y output.m4a<br><br><span class="hljs-section"># 转换为 pcm</span><br>ffmpeg -i source.mp3 -f s16le -acodec pcm<span class="hljs-emphasis">_s16le output.raw</span><br></code></pre></td></tr></table></figure><p>从 mp4 中提取 yuv</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">ffmpeg -i xx.mp4 -s 960x540 -pix_fmt yuv420p xx.yuv<br></code></pre></td></tr></table></figure><ul><li><code>-s</code> 来设置 yuv 数据的分辨率</li><li><code>-pix_fmt</code> 设置 yuv 的颜色格式</li></ul><p>从mp4或flv文件中提取h264</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">ffmpeg -i <span class="hljs-keyword">test</span>.flv -vcodec <span class="hljs-keyword">copy</span> -<span class="hljs-keyword">an</span> -bsf:v h264_mp4toannexb <span class="hljs-keyword">test</span>.h264<br></code></pre></td></tr></table></figure><p>从mp4文件中提取aac</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -vn -c:<span class="hljs-selector-tag">a</span> copy output.aac<br></code></pre></td></tr></table></figure><p>把一个 non-fragment MP4 转换成 fragment MP4，可以使用 FFmpeg 的 -movflags 来转换。参考：<a href="https://shangxin.me/2017/08/11/fragment-mp4-%E8%BD%AC%E6%8D%A2/">fragment mp4 转换</a></p><p>对于原始文件为非 MP4 文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> trailer_1080p<span class="hljs-selector-class">.mov</span> -c:v copy -c:<span class="hljs-selector-tag">a</span> copy -movflags frag_keyframe+empty_moov bunny_fragmented<span class="hljs-selector-class">.mp4</span><br><br></code></pre></td></tr></table></figure><p>对于原始文件已经是 MP4 文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> non_fragmented<span class="hljs-selector-class">.mp4</span> -strict -<span class="hljs-number">2</span> -movflags frag_keyframe+empty_moov fragmented<span class="hljs-selector-class">.mp4</span><br><br></code></pre></td></tr></table></figure><p>将 yuv 编码成 mp4</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -f rawvideo -pix_fmt yuv420p -s:v <span class="hljs-number">1920</span>x1080 -r <span class="hljs-number">25</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.yuv</span> \<br>-c:v libx264 output.mp4<br></code></pre></td></tr></table></figure><p>将 yuv 编码成 h264, 参考 <a href="https://superuser.com/questions/322354/using-ffmpeg-to-encode-a-raw-video-to-h-264-format">Using ffmpeg to encode a raw video to H.264 format</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -f rawvideo -pix_fmt yuv420p -s:v <span class="hljs-number">1920</span>x1080 -r <span class="hljs-number">25</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.yuv</span> \<br>-c:v libx264 -f rawvideo output.<span class="hljs-number">264</span><br></code></pre></td></tr></table></figure><h2 id="ffplay"><a href="#ffplay" class="headerlink" title="ffplay"></a>ffplay</h2><p>播放yuv</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffplay</span> -f rawvideo -video_size <span class="hljs-number">1280</span>x720 -pixel_format nv12 xxx.yuv<br><span class="hljs-attribute">ffplay</span> -f rawvideo -video_size <span class="hljs-number">1280</span>x720 -pixel_format yuv420p xxx.yuv<br></code></pre></td></tr></table></figure><p>播放pcm</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffplay</span> -ar <span class="hljs-number">16000</span> -ac <span class="hljs-number">1</span> -f s16le -i xxx.pcm<br></code></pre></td></tr></table></figure><p>ffplay 字幕， 参考<a href="https://www.pianshen.com/article/9580874222/">https://www.pianshen.com/article/9580874222/</a></p><p>使用自带的第0个字幕流</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ffplay -vf <span class="hljs-attribute">subtitles</span>=infile:si=0 infile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过脚本修改xcode pbxproj文件</title>
    <link href="/2022/05/11/2022-05-11-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BF%AE%E6%94%B9%20xcode%20pbxproj%20%E6%96%87%E4%BB%B6/"/>
    <url>/2022/05/11/2022-05-11-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BF%AE%E6%94%B9%20xcode%20pbxproj%20%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="分析-xcode-pbxproj-文件格式"><a href="#分析-xcode-pbxproj-文件格式" class="headerlink" title="分析 xcode pbxproj 文件格式"></a>分析 xcode pbxproj 文件格式</h2><p> 创建一个新的iOS工程<code>demo</code>, 进入工程目录, 找到<code>project.pbxproj</code>。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">➜  <span class="hljs-built_in">demo</span> git:(main) ✗ ls<br><span class="hljs-built_in">demo</span>           <span class="hljs-built_in">demo</span>.xcodeproj demoTests      demoUITests<br>➜  <span class="hljs-built_in">demo</span> git:(main) ✗ cd <span class="hljs-built_in">demo</span>.xcodeproj<br>➜  <span class="hljs-built_in">demo</span>.xcodeproj git:(main) ✗ ls<br>project.pbxproj     project.xcworkspace xcuserdata<br></code></pre></td></tr></table></figure><p>通过code打开看看文件内容。</p><blockquote><p>The Xcode project file is an old-style plist (Next style) based on braces to delimit the hierarchy. The file begins with an explicit encoding information, usually the UTF-8 one.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521761658021652176165259.png"></p><p><code>project.pbxproj</code>文件格式是旧式的plist，通过<code>plutil</code>将project.pbxproj转换为json</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">plutil -convert json <span class="hljs-keyword">project</span>.pbxproj<br></code></pre></td></tr></table></figure><p>通过可视化工具分析json内容</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521715227351652171521885.png"></p><p>rootObject 对应的value是24位16进制的UUID。</p><p>展开objects 找到<code>FEF5F49A2829212600E85303</code>对应的object</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521733421961652173342151.png"></p><p>buildConfigurationList 保存了配置信息，对应的UUID为 FEF5F49D2829212600E85303</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521737007771652173700399.png"></p><p>buildConfigurations是个数组，我们分析第一个。找到FEF5F4CF2829212700E85303对应的object</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521738897811652173889220.png"></p><p>展开buildSettings看一看</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521739817831652173981353.png"></p><p>在xcode-build settings中可以找到对应的设置。</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16521742047871652174204307.png"></p><p>说明：</p><ol><li><p>objects数组包含了所有object 对象的信息， 包含rootObject， rootObject 的isa 是<code>PBXProject</code></p></li><li><p>通过rootObject，根据UUID在objects数组找到对应的object, 可以构建一棵树，这棵树描述了xcode工程的所有配置信息。</p></li></ol><h2 id="通过脚本修改pbxproj文件的方法"><a href="#通过脚本修改pbxproj文件的方法" class="headerlink" title="通过脚本修改pbxproj文件的方法"></a>通过脚本修改pbxproj文件的方法</h2><ol><li><p>通过<code>plutil</code>将pbxproj转换为json或xml， 编辑转换后的json或者xml。虽然文件内容会被转换为json或者xml， 但是xcode 依然可以加载修改后的pbxproj文件。 通过xcode 修改任何配置信息后，pbxproj会被重新改写为旧式的plist文件格式。</p></li><li><p>通过现成的一些工具</p><ul><li><p><a href="https://github.com/CocoaPods/Xcodeproj">GitHub - CocoaPods&#x2F;Xcodeproj: Create and modify Xcode projects from Ruby.</a></p></li><li><p><a href="https://github.com/tuist/XcodeProj">GitHub - tuist&#x2F;XcodeProj: 📝 Read, update and write your Xcode projects</a></p></li><li><p><a href="https://github.com/kronenthaler/mod-pbxproj">GitHub - kronenthaler&#x2F;mod-pbxproj: A python module to manipulate XCode projects</a></p></li><li><p><a href="https://github.com/alunny/node-xcode">GitHub - alunny&#x2F;node-xcode: tools and utilities for working with xcode&#x2F;ios projects</a></p></li><li></li></ul></li></ol><h3 id="Xcodeproj-使用介绍"><a href="#Xcodeproj-使用介绍" class="headerlink" title="Xcodeproj 使用介绍"></a><a href="https://github.com/CocoaPods/Xcodeproj">Xcodeproj</a> 使用介绍</h3><ol><li><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">gem <span class="hljs-keyword">install</span> xcodeproj<br></code></pre></td></tr></table></figure></li><li><p>写ruby脚本，不会的可以去学一下ruby， 入门很很简单</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">require <span class="hljs-string">&#x27;xcodeproj&#x27;</span><br>project_path = <span class="hljs-string">&#x27;/your_path/your_project.xcodeproj&#x27;</span><br><span class="hljs-keyword">project</span> = Xcodeproj::<span class="hljs-keyword">Project</span>.open(project_path)<br><span class="hljs-keyword">project</span>.targets.<span class="hljs-keyword">each</span> <span class="hljs-keyword">do</span> |target|<br>  target.build_configurations.<span class="hljs-keyword">each</span> <span class="hljs-keyword">do</span> |config|<br>    config.build_settings[<span class="hljs-string">&#x27;MY_CUSTOM_FLAG&#x27;</span>] ||= <span class="hljs-string">&#x27;TRUE&#x27;</span><br>  end<br>end<br><span class="hljs-keyword">project</span>.save<br></code></pre></td></tr></table></figure></li></ol><p>参考：</p><p><a href="http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/">Let’s Talk About project.pbxproj</a></p><p><a href="http://www.monobjc.net/xcode-project-file-format.html">Xcode Project File Format</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffplay 代码结构与总结</title>
    <link href="/2022/03/27/ffmpeg/2022-03-27-ffplay%20%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/27/ffmpeg/2022-03-27-ffplay%20%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="ffplay-源码分析系列-CSDN"><a href="#ffplay-源码分析系列-CSDN" class="headerlink" title="ffplay 源码分析系列 - CSDN"></a>ffplay 源码分析系列 - CSDN</h2><p><a href="https://www.cnblogs.com/leisure_chn/p/10301215.html">ffplay源码分析1-概述 - 叶余 - 博客园</a></p><p><a href="https://www.cnblogs.com/leisure_chn/p/10301253.html">ffplay源码分析2-数据结构 - 叶余 - 博客园</a></p><p><a href="https://www.cnblogs.com/leisure_chn/p/10301831.html">ffplay源码分析3-代码框架 - 叶余 - 博客园</a></p><p><a href="https://www.cnblogs.com/leisure_chn/p/10307089.html">ffplay源码分析4-音视频同步 - 叶余 - 博客园</a></p><p><a href="https://www.cnblogs.com/leisure_chn/p/10311376.html">ffplay源码分析5-图像格式转换 - 叶余 - 博客园</a></p><p><a href="https://www.cnblogs.com/leisure_chn/p/10312713.html">ffplay源码分析6-音频重采样 - 叶余 - 博客园</a></p><p><a href="https://www.cnblogs.com/leisure_chn/p/10316225.html">ffplay源码分析7-播放控制 - 叶余 - 博客园</a></p><h2 id="ffplay-源码分析系列-知乎"><a href="#ffplay-源码分析系列-知乎" class="headerlink" title="ffplay 源码分析系列 - 知乎"></a>ffplay 源码分析系列 - 知乎</h2><p> <a href="https://zhuanlan.zhihu.com/p/43295650">ffplay packet queue分析</a></p><p> <a href="https://zhuanlan.zhihu.com/p/43564980">ffplay frame queue分析</a></p><p> <a href="https://zhuanlan.zhihu.com/p/43672062">ffplay read线程分析</a></p><p> <a href="https://zhuanlan.zhihu.com/p/43948483">ffplay解码线程分析</a></p><p> <a href="https://zhuanlan.zhihu.com/p/44122324">ffplay video显示线程分析</a></p><p> <a href="https://zhuanlan.zhihu.com/p/44139512">ffplay audio输出线程分析</a></p><p> <a href="https://zhuanlan.zhihu.com/p/44207804">ffplay subtitle显示线程分析</a></p><p><a href="https://zhuanlan.zhihu.com/p/44615185">ffplay音视频同步分析——基础概念</a></p><p><a href="https://zhuanlan.zhihu.com/p/44615401">ffplay音视频同步分析——视频同步音频</a></p><p><a href="https://zhuanlan.zhihu.com/p/44680734">ffplay音视频同步分析——音频同步视频</a></p><p><a href="https://zhuanlan.zhihu.com/p/44684432">ffplay音视频同步分析——同步到外部时钟</a></p><p><a href="https://zhuanlan.zhihu.com/p/44694286">ffplay 分析概述</a></p><h2 id="ffplay-思维导图"><a href="#ffplay-思维导图" class="headerlink" title="ffplay 思维导图"></a>ffplay 思维导图</h2><img title="" src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/1648385500340ffplay.png" alt="" width="821"><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GjBg4Rhq9j3NR2cp5nxibjIKz83QIicCQLV5SloO4tGdhWEdOgtkC7xJyRtspkhAeicqE3s39Lv90evp2WJbibg3cA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>ffmpeg数据流向</p><ol><li><p>从文件或者直播流中获取AVPacket存入Packet queue， </p></li><li><p>从paket queue 获取 AVPacket ， 发送给解码器解码，得到AVFrame 存入frame queue</p></li><li><p>SDL音频播放器从frame queue 中获取 AVFrame 进行播放，同时更新音频时钟</p></li><li><p>视频播放，从frame queue 中获取 AVFrame，根据音频时钟进行播放。</p></li></ol><h3 id="Packet-获取"><a href="#Packet-获取" class="headerlink" title="Packet 获取"></a>Packet 获取</h3><p>read_thead</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">for <span class="hljs-comment">(;;)</span> &#123;<br>    <span class="hljs-comment">//解封装，将解封装得到的pkt放入pkt queue</span><br>    ret = av_read_frame<span class="hljs-comment">(ic, pkt)</span>;<br>    packet_queue_put<span class="hljs-comment">(&amp;is-&gt;subtitleq, pkt)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="视频解码"><a href="#视频解码" class="headerlink" title="视频解码"></a>视频解码</h3><p>video_thread</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">for (;;) &#123;<br>   <span class="hljs-comment">//解码</span><br>    <span class="hljs-built_in">packet_queue_get</span>()<br>    <span class="hljs-built_in">avcodec_send_packet</span>()<br>    <span class="hljs-built_in">avcodec_receive_frame</span>()<br>   <span class="hljs-comment">//将解码后的数据放入 frame queue</span><br>    <span class="hljs-built_in">frame_queue_peek_writable</span>();<br>    <span class="hljs-built_in">frame_queue_push</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="视频绘制"><a href="#视频绘制" class="headerlink" title="视频绘制"></a>视频绘制</h3><p>video_refresh</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">frame_queue_peek</span>();<br><span class="hljs-built_in">frame_queue_next</span>();<br></code></pre></td></tr></table></figure><h3 id="音频解码"><a href="#音频解码" class="headerlink" title="音频解码"></a>音频解码</h3><p>audio_thread</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">for (;;) &#123;<br>   <span class="hljs-comment">//解码</span><br>    <span class="hljs-built_in">packet_queue_get</span>()<br>    <span class="hljs-built_in">avcodec_send_packet</span>()<br>    <span class="hljs-built_in">avcodec_receive_frame</span>()<br>   <span class="hljs-comment">//将解码后的数据放入 frame queue</span><br>    <span class="hljs-built_in">frame_queue_peek_writable</span>();<br>    <span class="hljs-built_in">frame_queue_push</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="音频播放"><a href="#音频播放" class="headerlink" title="音频播放"></a>音频播放</h3><p>sdl_audio_callback</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">frame_queue_peek_readable</span>();<br><span class="hljs-built_in">frame_queue_next</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac上通过 doxygen + graphviz生成函数调用图</title>
    <link href="/2022/03/26/ffmpeg/2022-03-26-mac%E4%B8%8A%E9%80%9A%E8%BF%87%20doxygen%20+%20graphviz%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9B%BE/"/>
    <url>/2022/03/26/ffmpeg/2022-03-26-mac%E4%B8%8A%E9%80%9A%E8%BF%87%20doxygen%20+%20graphviz%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>安装<a href="https://www.doxygen.nl/index.html">Doxygen</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>doxygen<br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>doxygen --cask<br></code></pre></td></tr></table></figure><p>安装<a href="https://graphviz.org/">Graphviz</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>graphviz<br></code></pre></td></tr></table></figure><h2 id="配置doxygen"><a href="#配置doxygen" class="headerlink" title="配置doxygen"></a>配置doxygen</h2><p>配置工作目录，源码目录，生成文档目录</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482609835051648260982959.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482610615021648261060637.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482621994932022-03-26-10-18-39-image.png"></p><p>配置DOT_PATH</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  ~ which dot<br><span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/bin/</span>dot<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482622484922022-03-26-10-19-09-image.png"></p><p>生成文档和函数调用图</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482622864902022-03-26-10-19-27-image.png"></p><h2 id="查看函数调用图"><a href="#查看函数调用图" class="headerlink" title="查看函数调用图"></a>查看函数调用图</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  ff_doc <span class="hljs-keyword">ls</span><br>html  latex<br>➜  ff_doc <span class="hljs-keyword">cd</span> html<br>➜  html <span class="hljs-keyword">open</span> <span class="hljs-built_in">index</span>.html<br></code></pre></td></tr></table></figure><p>文档生成目录下，打开<code>html/index.html</code></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482623074922022-03-26-10-26-47-image.png"></p><p>可以看到生成的函数调用图</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16482623224912022-03-26-10-28-07-image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffplay video_thread 分析</title>
    <link href="/2022/03/22/ffmpeg/2022-03-22-ffplay%20video_thread%20%E5%88%86%E6%9E%90/"/>
    <url>/2022/03/22/ffmpeg/2022-03-22-ffplay%20video_thread%20%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>去除滤镜相关，简化为</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">static int video_thread(void *arg)<br>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">//获取解码后的frame</span><br>        ret = get_video_frame(<span class="hljs-keyword">is</span>, frame);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//收到了退出请求，结束循环</span><br>            goto the_end;<br>        <span class="hljs-keyword">if</span> (!ret)<br>            continue;<br>        <span class="hljs-comment">//根据帧率，计算frame的播放持续时间</span><br>        duration = (frame_rate.num &amp;&amp; frame_rate.den ? av_q2d((AVRational)&#123;frame_rate.den, frame_rate.num&#125;) : <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//根据视频流时间基计算pts</span><br>        <span class="hljs-function"><span class="hljs-title">pts</span> = (frame-&gt;</span><span class="hljs-function"><span class="hljs-title">pts</span> == AV_NOPTS_VALUE) ? NAN : frame-&gt;</span>pts * av_q2d(tb);<br>        <span class="hljs-comment">//放入frame队列</span><br>        <span class="hljs-function"><span class="hljs-title">ret</span> = queue_picture(<span class="hljs-keyword">is</span>, frame, pts, duration, frame-&gt;</span><span class="hljs-function"><span class="hljs-title">pkt_pos</span>, <span class="hljs-keyword">is</span>-&gt;</span>viddec.pkt_serial);<br>        <span class="hljs-comment">//取消引用frame</span><br>        av_frame_unref(frame);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整体就是一个循环，调用get_video_frame 获取解码后frame， 调用queue_picture 将frame放入解码后的队列。</p><h2 id="get-video-frame"><a href="#get-video-frame" class="headerlink" title="get_video_frame"></a>get_video_frame</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_video_frame</span><span class="hljs-params">(VideoState *is, AVFrame *frame)</span><br>&#123;<br>    <span class="hljs-type">int</span> got_picture;<br>    <span class="hljs-comment">//解码，将解码后的数据放入frame中</span><br>    <span class="hljs-keyword">if</span> ((got_picture = decoder_decode_frame(&amp;is-&gt;viddec, frame, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//处理abort</span><br><br>    <span class="hljs-keyword">if</span> (got_picture) &#123;<br>        <span class="hljs-type">double</span> dpts = NAN;<br><br>        <span class="hljs-keyword">if</span> (frame-&gt;pts != AV_NOPTS_VALUE)<br>            dpts = av_q2d(is-&gt;video_st-&gt;time_base) * frame-&gt;pts;<br><br>        frame-&gt;sample_aspect_ratio = av_guess_sample_aspect_ratio(is-&gt;ic, is-&gt;video_st, frame);<br>        <span class="hljs-comment">//处理丢帧</span><br>        <span class="hljs-keyword">if</span> (framedrop&gt;<span class="hljs-number">0</span> || (framedrop &amp;&amp; get_master_sync_type(is) != AV_SYNC_VIDEO_MASTER)) &#123;<br>            <span class="hljs-keyword">if</span> (frame-&gt;pts != AV_NOPTS_VALUE) &#123;<br>                <span class="hljs-type">double</span> diff = dpts - get_master_clock(is);<br>                <span class="hljs-keyword">if</span> (!isnan(diff) &amp;&amp; <span class="hljs-built_in">fabs</span>(diff) &lt; AV_NOSYNC_THRESHOLD &amp;&amp;<br>                    diff - is-&gt;frame_last_filter_delay &lt; <span class="hljs-number">0</span> &amp;&amp;<br>                    is-&gt;viddec.pkt_serial == is-&gt;vidclk.serial &amp;&amp;<br>                    is-&gt;videoq.nb_packets) &#123;<br>                    is-&gt;frame_drops_early++;<br>                    av_frame_unref(frame);<br>                    got_picture = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> got_picture;<br>&#125;<br></code></pre></td></tr></table></figure><p>get_video_frame 调用decoder_decode_frame 获取解码后的一帧数据。</p><p>获取frame后，判断是否需要处理丢帧，做丢帧处理。</p><p>返回值: 成功获取frame(&gt;0)， 被丢帧（&#x3D;0），收到了退出请求（-1）</p><h2 id="decoder-decode-frame"><a href="#decoder-decode-frame" class="headerlink" title="decoder_decode_frame"></a>decoder_decode_frame</h2><p>需要先关注一个结构体Decoder</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> Decoder &#123;<br>    <span class="hljs-comment">//解码前数据</span><br>    <span class="hljs-built_in">AVPacket</span> *pkt;<br>    <span class="hljs-comment">//pkt队列</span><br>    PacketQueue *queue;<br>    <span class="hljs-comment">//解码器上下文</span><br>    <span class="hljs-built_in">AVCodecContext</span> *avctx;<br>    <span class="hljs-type">int</span> pkt_serial;<br>    <span class="hljs-type">int</span> finished;<br>    <span class="hljs-type">int</span> packet_pending; <span class="hljs-comment">//标记当前pkt未被成功消费，后续需要重新处理</span><br>    SDL_cond *empty_queue_cond; <span class="hljs-comment">//绑定read_thread线程的continue_read_thread</span><br>    int64_t start_pts;<br>    <span class="hljs-built_in">AVRational</span> start_pts_tb;<br>    int64_t next_pts;<br>    <span class="hljs-built_in">AVRational</span> next_pts_tb;<br>    SDL_Thread *decoder_tid;<br>&#125; Decoder;<br></code></pre></td></tr></table></figure><p>在VideoState 结构体中,保存了音频，视频，字幕解码相关的Decoder实例。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Decoder auddec<span class="hljs-comment">;</span><br>Decoder viddec<span class="hljs-comment">;</span><br>Decoder subdec<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>decoder_decode_frame 根据 Decoder， 实现音频，视频，字幕解码的主要逻辑。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">static <span class="hljs-keyword">int</span> decoder_decode_frame(Decoder *d, AVFrame *frame, AVSubtitle *<span class="hljs-function"><span class="hljs-keyword">sub</span>) </span>&#123;<br>    <span class="hljs-keyword">int</span> ret = AVERROR(EAGAIN);<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>       <span class="hljs-regexp">//</span>.....<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>整体又是一个大循环， 我们把它拆开看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (d-&gt;<span class="hljs-built_in">queue</span>-&gt;serial == d-&gt;pkt_serial) &#123;<br>    <span class="hljs-comment">//判断packetqueue的序列号等于Decoder的序列号</span><br>    <span class="hljs-comment">//packetqueue的序列号，在发生seek操作后，会+1</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (d-&gt;<span class="hljs-built_in">queue</span>-&gt;abort_request)<br>            <span class="hljs-comment">//如果收到了退出请求，返回-1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">switch</span> (d-&gt;avctx-&gt;codec_type) &#123;<br>            <span class="hljs-keyword">case</span> AVMEDIA_TYPE_VIDEO:<br>                <span class="hljs-comment">//从解码器读frame</span><br>                ret = avcodec_receive_frame(d-&gt;avctx, frame);<br>                <span class="hljs-keyword">if</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//读到了frame, 设置frame的pts</span><br>                    <span class="hljs-comment">//decoder_reorder_pts: let decoder reorder pts 0=off 1=on -1=auto</span><br>                    <span class="hljs-keyword">if</span> (decoder_reorder_pts == <span class="hljs-number">-1</span>) &#123;<br>                        frame-&gt;pts = frame-&gt;best_effort_timestamp;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!decoder_reorder_pts) &#123;<br>                        frame-&gt;pts = frame-&gt;pkt_dts;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> AVMEDIA_TYPE_AUDIO:<br>                <span class="hljs-comment">//从解码器读frame</span><br>                ret = avcodec_receive_frame(d-&gt;avctx, frame);<br>                <span class="hljs-keyword">if</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//读到了frame，设置frame的pts</span><br>                    AVRational tb = (AVRational)&#123;<span class="hljs-number">1</span>, frame-&gt;sample_rate&#125;;<br>                    <span class="hljs-keyword">if</span> (frame-&gt;pts != AV_NOPTS_VALUE)<br>                        <span class="hljs-comment">//pts转换，从编码器的时间基，转换为tb作为时间基</span><br>                        frame-&gt;pts = av_rescale_q(frame-&gt;pts, d-&gt;avctx-&gt;pkt_timebase, tb);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d-&gt;next_pts != AV_NOPTS_VALUE)<br>                        <span class="hljs-comment">//frame的pts没有值，参考d-&gt;next_pts，并做时间基的转化</span><br>                        frame-&gt;pts = av_rescale_q(d-&gt;next_pts, d-&gt;next_pts_tb, tb);<br>                    <span class="hljs-keyword">if</span> (frame-&gt;pts != AV_NOPTS_VALUE) &#123;<br>                        <span class="hljs-comment">//计算next_pts，会被没有pts的Frame参考</span><br>                        <span class="hljs-comment">//保存next_pts_tb</span><br>                        d-&gt;next_pts = frame-&gt;pts + frame-&gt;nb_samples;<br>                        d-&gt;next_pts_tb = tb;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ret == AVERROR_EOF) &#123;<br>            <span class="hljs-comment">//解码器结束，所有的帧已经被读出</span><br>            d-&gt;finished = d-&gt;pkt_serial;<br>            <span class="hljs-comment">//重置解码器内部状态</span><br>            avcodec_flush_buffers(d-&gt;avctx);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ret &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">while</span> (ret != AVERROR(EAGAIN)); <span class="hljs-comment">//需要送入更多的pkts</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一个if条件，内嵌一个do.while循环。</p><p>首先 if 判断<code>d-&gt;queue-&gt;serial == d-&gt;pkt_serial</code>，保证当前要处理的pkt与pkt-&gt;queue的序列号一致。如果不一致，证明是该pkt和pkt-&gt;queue中元素，是两段不连续的数据，进入后续流程，做丢帧处理。</p><p>如果序列号一致，进入循环，尝试从解码器获取frame。</p><p>我们看下这个循环</p><ol><li><p>判断是否收到退出请求</p></li><li><p>switch判断解码器的类型，处理audio 和 video 的情况。 调用avcodec_receive_frame 尝试从解码器获取frame。 返回值&gt;&#x3D;0 代表获取成功，转换frame的pts</p></li><li><p>处理avcodec_receive_frame的返回值。</p><ul><li><p>ret &#x3D; AVERROR_EOF 解码器所有的帧已被读出，解码结束，返回0.</p></li><li><p>ret &gt;&#x3D; 0,  成功获取了frame， 直接返回 1</p></li><li><p>ret &#x3D; AVERROR(EAGAIN)， 解码器需要接受更多pkt才可以输出frame，跳出do.while循环。</p></li></ul></li></ol><p>上一阶段尝试从解码器中读取frame， 但是解码器报告AVERROR(EAGAIN)，需要更多的pkt 才能产出frame。 那么下一阶段处理获取pkt，给解码发送pkt。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">if</span> (d-&gt;<span class="hljs-built_in">queue</span>-&gt;nb_packets == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//pkt队列为空，通知read_thread去获取更多数据</span><br>        SDL_CondSignal(d-&gt;empty_queue_cond);<br>    <span class="hljs-keyword">if</span> (d-&gt;packet_pending) &#123;<br>        d-&gt;packet_pending = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> old_serial = d-&gt;pkt_serial;<br>        <span class="hljs-keyword">if</span> (packet_queue_get(d-&gt;<span class="hljs-built_in">queue</span>, d-&gt;pkt, <span class="hljs-number">1</span>, &amp;d-&gt;pkt_serial) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//如果新的pkt的序列号，和之前的不一致。可能是发生了seek操作，两段数据不连续了</span><br>        <span class="hljs-comment">//冲洗解码器</span><br>        <span class="hljs-keyword">if</span> (old_serial != d-&gt;pkt_serial) &#123;<br>            <span class="hljs-comment">//冲洗解码器内部的buffer</span><br>            avcodec_flush_buffers(d-&gt;avctx);<br>            d-&gt;finished = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//更新pts， timebase</span><br>            d-&gt;next_pts = d-&gt;start_pts;<br>            d-&gt;next_pts_tb = d-&gt;start_pts_tb;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断序列号是否满足</span><br>    <span class="hljs-keyword">if</span> (d-&gt;<span class="hljs-built_in">queue</span>-&gt;serial == d-&gt;pkt_serial)<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//过滤掉序列号不满足条件的pkt</span><br>    av_packet_unref(d-&gt;pkt);<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>又是一个do.while 循环。</p><ol><li><p>如果pkt-queue为空，调用SDL_CondSignal，通知read_thread去获取更多的pkt</p></li><li><p>如果d-&gt;packet_pending为true,  将d-&gt;packet_pending标记为false。在下一阶段，将pkt发送给解码器时，如果解码器的pkt队列已满，无法接受d- &gt;pkt。 通过将d-&gt;packet_pending设置为1， 标记d- &gt;pkt 为待处理，下次重新将d-&gt;pkt发送给解码器。</p></li><li><p>没有待处理pkt，调用packet_queue_get从d-&gt;queue中获取一个pkt。其中 packet_queue_get 的第三个参数block 被设置为1， 在获取ptk的时候，如果没有ptk queue 为空，内部调用SDL_CondWait将线程置于等待状态。</p></li><li><p>如果从队列里获得了pkt，pkt的序列号和Decoder之前保存的pkt的序列号不一致。例如发生了seek，中间数据不连续了，此时调用avcodec_flush_buffers冲洗解码器内部buffer，让解码器准备好从seek位置开始解码。</p></li><li><p>循环将pkt序列号不一致的pkt调用av_packet_unref(d-&gt;pkt);丢弃，直到<code>d-&gt;queue-&gt;serial == d-&gt;pkt_serial</code>,此时获取了一个pkt。</p></li></ol><p>前面解码器要更多的ptk才可以输出frame, 然后第二阶段我们从pkt queue中也获取到了一个pkt，下一步将获取的pkt发送给解码器了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (d-&gt;avctx-&gt;codec_type == AVMEDIA_TYPE_SUBTITLE) &#123;<br>    <span class="hljs-type">int</span> got_frame = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//Return a negative value on error, otherwise return the number of bytes used</span><br>    ret = avcodec_decode_subtitle2(d-&gt;avctx, sub, &amp;got_frame, d-&gt;pkt);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//解码发生了错误，为了和avcodec_send_packet的错误码一起处理，转换为AVERROR(EAGAIN)，尝试继续发送pkt</span><br>        ret = AVERROR(EAGAIN);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (got_frame &amp;&amp; !d-&gt;pkt-&gt;data) &#123;<br>            <span class="hljs-comment">//d-&gt;pkt-&gt;data = NULL 代表给解码器发送flush消息，</span><br>            <span class="hljs-comment">//需要持续给解码器flush消息，直到无法继续读取到新的frame, </span><br>            <span class="hljs-comment">//因此将packet_pending设置为1,标记当前pkt为待处理，直到flush完成</span><br>            d-&gt;packet_pending = <span class="hljs-number">1</span>;<br>        &#125;<br>        ret = got_frame ? <span class="hljs-number">0</span> : (d-&gt;pkt-&gt;data ? AVERROR(EAGAIN) : AVERROR_EOF);<br>    &#125;<br>    av_packet_unref(d-&gt;pkt);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//给音视频解码器发送pkt</span><br>    <span class="hljs-keyword">if</span> (avcodec_send_packet(d-&gt;avctx, d-&gt;pkt) == AVERROR(EAGAIN)) &#123;<br>        <span class="hljs-comment">//报错AVERROR(EAGAIN)，解码器此时不能接受更多了pkt</span><br>        <span class="hljs-comment">//需要调用avcodec_receive_frame将解码器中的frame读出才可以继续send pkt</span><br>        av_log(d-&gt;avctx, AV_LOG_ERROR, <span class="hljs-string">&quot;Receive_frame and send_packet both returned EAGAIN, which is an API violation.\n&quot;</span>);<br>        <span class="hljs-comment">//比较当前pkt未被成功消费，后续需要重新处理</span><br>        d-&gt;packet_pending = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//send pkt 成功，引用计数-1</span><br>        av_packet_unref(d-&gt;pkt);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里字幕解码器发送pkt 调用的是 avcodec_decode_subtitle2 </p><p>给音视频解码器发送pkt 调用的是 avcodec_send_packet。</p><p>注意发送pkt返回AVERROR(EAGAIN)， 此时解码器无法接受当前pkt（可能是内部的pkt的队列满了）。通过<code>d-&gt;packet_pending = 1</code>将pkt标记为待处理，下次循环，重新尝试发送给解码器解码。</p><p>如果解码器成功消费了pkt，继续进入循环。回到读frame的阶段，读到了frame，就返回给上层去加入队列。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> video_thread的工作是循环从pkt queue 取出pkt，送给解码器解码，将解码后的frame 放入frame queue。</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16479425075661647942506708.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git hooks  结合 clang-format 提交前自动格式化代码</title>
    <link href="/2022/03/21/c++/2022-03-21-git%20hook%20clang-format/"/>
    <url>/2022/03/21/c++/2022-03-21-git%20hook%20clang-format/</url>
    
    <content type="html"><![CDATA[<h2 id="ClangFormat"><a href="#ClangFormat" class="headerlink" title="ClangFormat "></a><a href="https://clang.llvm.org/docs/ClangFormat.html">ClangFormat </a></h2><p>ClangFormat 描述了一组构建在 <a href="(https://clang.llvm.org/docs/LibFormat.html)">LibFormat</a> 之上的工具。它可以以多种方式支持您的工作流，包括独立工具和编辑器集成。</p><p>其中独立的工具就是clang-format, 可用于格式化 c&#x2F;c + +&#x2F;Java&#x2F;JavaScript&#x2F;JSON&#x2F;Objective-C&#x2F;Protobuf&#x2F;c # 代码。</p><p>clang-format的默认配置文件是<code>.clang-format</code>或<code>_clang-format</code>, 也可以通过<code>clang-format -style=file</code>指定配置文件。</p><p><code>.clang-format</code> 使用yaml格式，指定了如何对文件格式化的规则。</p><p>可以基于预定义的样式，快速创建<code>.clang-format</code>文件。</p><ul><li><p><code>LLVM</code> A style complying with the <a href="https://llvm.org/docs/CodingStandards.html">LLVM coding standards</a></p></li><li><p><code>Google</code> A style complying with <a href="https://google.github.io/styleguide/cppguide.html">Google’s C++ style guide</a></p></li><li><p><code>Chromium</code> A style complying with <a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/styleguide/styleguide.md">Chromium’s style guide</a></p></li><li><p><code>Mozilla</code> A style complying with <a href="https://firefox-source-docs.mozilla.org/code-quality/coding-style/index.html">Mozilla’s style guide</a></p></li><li><p><code>WebKit</code> A style complying with <a href="https://www.webkit.org/coding/coding-style.html">WebKit’s style guide</a></p></li><li><p><code>Microsoft</code> A style complying with <a href="https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference">Microsoft’s style guide</a></p></li><li><p><code>GNU</code> A style complying with the <a href="https://www.gnu.org/prep/standards/standards.html">GNU coding standards</a></p></li></ul><p>例如生成llvm风格的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">clang-<span class="hljs-built_in">format</span> -style=llvm -<span class="hljs-built_in">dump</span>-<span class="hljs-built_in">config</span> &gt; .clang-<span class="hljs-built_in">format</span><br></code></pre></td></tr></table></figure><p> 然后可以基于生成的<code>.clang-format</code>文件修改参数，定制自己的样式。</p><p>更多参考： <a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html">Clang-Format Style Options </a></p><p>mac 下安装 clang-format</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>clang-format<br></code></pre></td></tr></table></figure><p>将生成的<code>.clang-format</code>放入工程目录，执行命令格式化文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">clang-format -<span class="hljs-selector-tag">i</span> xx<span class="hljs-selector-class">.cpp</span><br></code></pre></td></tr></table></figure><p><code>-i</code>格式化当前文件，并将格式化后的内容输出到当前文件。不加<code>-i</code>会将格式化的内容输出到标准输出。</p><p>然后我们希望在提交的时候根据我们的配置，自动格式化代码，如何做呢？</p><p>可以通过git hooks 结合clang-format 在提交的时候自动格式化我们的代码。</p><h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a><a href="https://pre-commit.com/">pre-commit</a></h2><blockquote><p>A framework for managing and maintaining multi-language pre-commit hooks.</p></blockquote><p> 安装：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ brew install pre<span class="hljs-operator">-</span><span class="hljs-keyword">commit</span><br># 查看版本<br>$ pre<span class="hljs-operator">-</span><span class="hljs-keyword">commit</span> <span class="hljs-comment">--version</span><br>pre<span class="hljs-operator">-</span><span class="hljs-keyword">commit</span> <span class="hljs-number">2.17</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>添加配置文件<code>.pre-commit-config.yaml</code>，通过<a href="https://pre-commit.com/#pre-commit-sample-config"><code>pre-commit sample-config</code></a></p><p>命令快速生成一个基本的配置文件。 更多关于文件中选项的配置，参考<a href="https://pre-commit.com/#plugins">pre-commit</a></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">➜  ~ pre-commit sample-config<br><span class="hljs-comment"># See https://pre-commit.com for more information</span><br><span class="hljs-comment"># See https://pre-commit.com/hooks.html for more hooks</span><br>repos:<br>-   repo: https://github.com/pre-commit/pre-commit-hooks<br>    rev: v3.2.0<br>    hooks:<br>    -   id: trailing-whitespace<br>    -   id: end-of-file-fixer<br>    -   id:<span class="hljs-built_in"> check-yaml</span><br><span class="hljs-built_in"></span>    -   id: check-added-large-files<br></code></pre></td></tr></table></figure><p>上面配置指定了如何去格式化python代码，pre commit 支持格式化其他的编程语言，参考</p><p><a href="https://pre-commit.com/hooks.html">supported hooks</a>查看所有支持的语言。</p><p>想结合clang-format对工程中的c++代码自动格式化。在<a href="https://pre-commit.com/hooks.html">supported hooks</a>找到了<a href="https://github.com/doublify/pre-commit-clang-format">GitHub - doublify&#x2F;pre-commit-clang-format: ClangFormat hook for pre-commit</a></p><p>如何使用呢?</p><ol><li><p>在工程中创建<code>.pre-commit-config.yaml</code>文件</p></li><li><p>配置<code>.pre-commit-config.yaml</code>文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">repos</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">  repo: https://github.com/doublify/pre-commit-clang-format.git</span><br>    <span class="hljs-attribute">rev</span><span class="hljs-punctuation">:</span> <span class="hljs-string">62302476d0da01515660132d76902359bed0f782</span><br>    <span class="hljs-attribute">hooks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">  id: clang-format</span><br></code></pre></td></tr></table></figure></li><li><p>安装git hooks 脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ pre<span class="hljs-operator">-</span><span class="hljs-keyword">commit</span> install<br>pre<span class="hljs-operator">-</span><span class="hljs-keyword">commit</span> installed <span class="hljs-keyword">at</span> .git<span class="hljs-operator">/</span>hooks<span class="hljs-operator">/</span>pre<span class="hljs-operator">-</span><span class="hljs-keyword">commit</span><br></code></pre></td></tr></table></figure></li><li><p>(可选)手动调用pre commit，看看格式化后的效果</p></li></ol>   <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> pre-commit run --<span class="hljs-keyword">all</span>-<span class="hljs-keyword">files</span><br></code></pre></td></tr></table></figure><ol start="5"><li>调用<code>git commit</code>, 会触发git hook，调用<code>clang-format</code>自动化格式代码。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffplay read_thread 分析</title>
    <link href="/2022/03/20/ffmpeg/2022-03-20-ffplay%20read_thread%20%E5%88%86%E6%9E%90/"/>
    <url>/2022/03/20/ffmpeg/2022-03-20-ffplay%20read_thread%20%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://zhuanlan.zhihu.com/p/43672062">ffplay read线程分析</a></p><blockquote><p>ffplay main 函数 做了什么</p></blockquote><ol><li><p>参数验证与解析</p></li><li><p>注册codecs， demux， protocols</p></li><li><p>sdl 初始化，创建窗口</p></li><li><p>调用stream_open打开流</p></li><li><p>调用event_loop进入运行循环</p></li></ol><blockquote><p>stream_open 做了什么</p></blockquote><p>    主要是初始化VideoState *is，填充关键信息</p><ol><li><p>初始化，分配内存<code>is = av_mallocz(sizeof(VideoState));</code></p></li><li><p>调用frame_queue_init给VideoState对应的音频，视频，字幕对应Frame队列初始化分配内存</p></li><li><p>调用packet_queue_init给VideoState对应的音频，视频，字幕对应Packet队列初始化分配内存</p></li><li><p>创建条件变量continue_read_thread， 用于控制是否继续读取或者等待</p></li><li><p>调用init_clock 初始化音频，视频，外部时钟</p></li><li><p>设置同步类型av_sync_type</p></li><li><p>创建并开启read_thread</p></li></ol><h2 id="read-thread"><a href="#read-thread" class="headerlink" title="read_thread"></a>read_thread</h2><p>分为两个阶段：</p><ol><li><p>准备阶段</p></li><li><p>循环读pkt</p></li></ol><p>准备阶段：</p><p>stream_open 对VideoState *is 做了初始化关键参数的填充。read_thread 在这个基础上，打开输入的流，解封装，读取流的信息，找到音频，视频，字幕对应的stream，读取解码参数，创建解码器，开启解码器。分别为音频，视频，字幕开启创建解码线程。</p><p>循环读pkt：</p><p>然后进入循环，从流中读取pkt，根据同步时钟，放入pkt队列或者丢弃。如果读结束，给pkt队列放入空包，用于冲洗解码器。</p><p>循环中还要处理终止暂停恢复事件，seek事件，根据队列的状态（是否有足够的数据）控制等待还是继续读取新的pkt。</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>打开文件，解封装，获取文件信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">VideoState *is = arg;<br>AVFormatContext *ic = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//创建AVFormatContext</span><br>ic = avformat_alloc_context();<br><span class="hljs-comment">//interrupt_callback用于ffmpeg内部在执行耗时操作时检查是否有退出请求，并提前中断，避免用户退出请求没有及时响应</span><br>ic-&gt;interrupt_callback.callback = decode_interrupt_cb;<br>ic-&gt;interrupt_callback.opaque = is;<br><span class="hljs-comment">//特定选项处理</span><br><span class="hljs-keyword">if</span> (!av_dict_get(format_opts, <span class="hljs-string">&quot;scan_all_pmts&quot;</span>, <span class="hljs-literal">NULL</span>, AV_DICT_MATCH_CASE)) &#123;<br>    av_dict_set(&amp;format_opts, <span class="hljs-string">&quot;scan_all_pmts&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, AV_DICT_DONT_OVERWRITE);<br>    scan_all_pmts_set = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//打开输入的流，读取流的头部信息</span><br>err = avformat_open_input(&amp;ic, is-&gt;filename, is-&gt;iformat, &amp;format_opts);<br><span class="hljs-comment">//保存AVFormatContext</span><br>is-&gt;ic = ic;<br><span class="hljs-keyword">if</span> (find_stream_info) &#123;<br>    <span class="hljs-comment">//如果文件不包含头部信息(如ts)，通过读取一段文件分析后得到流信息</span><br>    err = avformat_find_stream_info(ic, opts);<br>&#125;<br></code></pre></td></tr></table></figure><p>判断是否是实时流</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//是否是实时流rtp/rtsp/sdp等</span><br>is-&gt;realtime = is_realtime(ic);<br></code></pre></td></tr></table></figure><p>is_realtime 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_realtime</span><span class="hljs-params">(AVFormatContext *s)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(   !<span class="hljs-built_in">strcmp</span>(s-&gt;iformat-&gt;name, <span class="hljs-string">&quot;rtp&quot;</span>)<br>       || !<span class="hljs-built_in">strcmp</span>(s-&gt;iformat-&gt;name, <span class="hljs-string">&quot;rtsp&quot;</span>)<br>       || !<span class="hljs-built_in">strcmp</span>(s-&gt;iformat-&gt;name, <span class="hljs-string">&quot;sdp&quot;</span>)<br>    )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span>(s-&gt;pb &amp;&amp; (   !<span class="hljs-built_in">strncmp</span>(s-&gt;url, <span class="hljs-string">&quot;rtp:&quot;</span>, <span class="hljs-number">4</span>)<br>                 || !<span class="hljs-built_in">strncmp</span>(s-&gt;url, <span class="hljs-string">&quot;udp:&quot;</span>, <span class="hljs-number">4</span>)<br>                )<br>    )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>选择音频，视频，字幕流。实际操作中，选择的策略很多，一般根据具体需求来定——比如可以是选择最高清的视频流；选择本地语言的音频流；直接选择第一条视频、音频轨道；等等。</p><p>ffplay主要是通过<code>av_find_best_stream</code>来选择：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//如果用户通过wanted_stream_spec指定了流，找到用户选择的流</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ic-&gt;nb_streams; i++) &#123;<br>    AVStream *st = ic-&gt;streams[i];<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">AVMediaType</span> <span class="hljs-title">type</span> =</span> st-&gt;codecpar-&gt;codec_type;<br>    st-&gt;discard = AVDISCARD_ALL;<br>    <span class="hljs-keyword">if</span> (type &gt;= <span class="hljs-number">0</span> &amp;&amp; wanted_stream_spec[type] &amp;&amp; st_index[type] == <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">if</span> (avformat_match_stream_specifier(ic, st, wanted_stream_spec[type]) &gt; <span class="hljs-number">0</span>)<br>            st_index[type] = i;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; AVMEDIA_TYPE_NB; i++) &#123;<br>    <span class="hljs-keyword">if</span> (wanted_stream_spec[i] &amp;&amp; st_index[i] == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-comment">//处理找不到用户选择的流的情况</span><br>        av_log(<span class="hljs-literal">NULL</span>, AV_LOG_ERROR, <span class="hljs-string">&quot;Stream specifier %s does not match any %s stream\n&quot;</span>, wanted_stream_spec[i], av_get_media_type_string(i));<br>        st_index[i] = INT_MAX;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取video stream</span><br><span class="hljs-keyword">if</span> (!video_disable)<br>    st_index[AVMEDIA_TYPE_VIDEO] =<br>        av_find_best_stream(ic, AVMEDIA_TYPE_VIDEO,<br>                            st_index[AVMEDIA_TYPE_VIDEO], <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//获取audio stream，参考视频流选择</span><br><span class="hljs-keyword">if</span> (!audio_disable)<br>    st_index[AVMEDIA_TYPE_AUDIO] =<br>        av_find_best_stream(ic, AVMEDIA_TYPE_AUDIO,<br>                            st_index[AVMEDIA_TYPE_AUDIO],<br>                            st_index[AVMEDIA_TYPE_VIDEO],<br>                            <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//获取subtitle stream，优先参考音频流</span><br><span class="hljs-keyword">if</span> (!video_disable &amp;&amp; !subtitle_disable)<br>    st_index[AVMEDIA_TYPE_SUBTITLE] =<br>        av_find_best_stream(ic, AVMEDIA_TYPE_SUBTITLE,<br>                            st_index[AVMEDIA_TYPE_SUBTITLE],<br>                            (st_index[AVMEDIA_TYPE_AUDIO] &gt;= <span class="hljs-number">0</span> ?<br>                             st_index[AVMEDIA_TYPE_AUDIO] :<br>                             st_index[AVMEDIA_TYPE_VIDEO]),<br>                            <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>wanted_stream_spec通过main函数传参设定，格式可以有很多种，参考<a href="https://www.ffmpeg.org/ffplay.html#Stream-specifiers-1">官方文档</a></p><p>如果用户没有指定流，或指定部分流，或指定流不存在，则主要由av_find_best_stream发挥作用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">av_find_best_stream</span><span class="hljs-params">(AVFormatContext *ic,</span><br><span class="hljs-params">                        <span class="hljs-keyword">enum</span> AVMediaType type,<span class="hljs-comment">//要选择的流类型</span></span><br><span class="hljs-params">                        <span class="hljs-type">int</span> wanted_stream_nb,<span class="hljs-comment">//目标流索引</span></span><br><span class="hljs-params">                        <span class="hljs-type">int</span> related_stream,<span class="hljs-comment">//参考流索引</span></span><br><span class="hljs-params">                        AVCodec **decoder_ret,</span><br><span class="hljs-params">                        <span class="hljs-type">int</span> flags)</span>;<br></code></pre></td></tr></table></figure><p>如果指定了正确的wanted_stream_nb，一般情况都是直接返回该指定流，即用户选择的流。如果指定了参考流，且未指定目标流的情况，会根据参考流去查找所需类型的流，但一般结果，都是返回该类型第一个流。</p><p>已经获取了流信息，下一步就是创建解码器，开启解码线程。 </p><p>主要在<code>stream_component_open</code>方法中实现, 简化代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">stream_component_open</span><span class="hljs-params">(VideoState *is, <span class="hljs-type">int</span> stream_index)</span><br>&#123;<br>    <span class="hljs-comment">//创建解码器上下文</span><br>    avctx = avcodec_alloc_context3(<span class="hljs-literal">NULL</span>);        <br>    <span class="hljs-comment">//填充解码参数</span><br>    ret = avcodec_parameters_to_context(avctx, ic-&gt;streams[stream_index]-&gt;codecpar);<br>    <span class="hljs-comment">//设置解码器的时间基，等于stream的时间基</span><br>    avctx-&gt;pkt_timebase = ic-&gt;streams[stream_index]-&gt;time_base;<br>    <span class="hljs-comment">//找解码器</span><br>    codec = avcodec_find_decoder(avctx-&gt;codec_id);<br>    <span class="hljs-keyword">if</span> (forced_codec_name)<br>        <span class="hljs-comment">//如果用户指定了解码器，使用用户指定的解码器</span><br>        codec = avcodec_find_decoder_by_name(forced_codec_name);<br>    <span class="hljs-comment">//打开解码器</span><br>    <span class="hljs-keyword">if</span> ((ret = avcodec_open2(avctx, codec, &amp;opts)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> fail;<br>    &#125;<br>    <span class="hljs-keyword">switch</span> (avctx-&gt;codec_type) &#123;<br>    <span class="hljs-keyword">case</span> AVMEDIA_TYPE_AUDIO:<br>        <span class="hljs-comment">//打开音频播放器</span><br>        <span class="hljs-keyword">if</span> ((ret = audio_open(is, channel_layout, nb_channels, sample_rate, &amp;is-&gt;audio_tgt)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br>        <span class="hljs-comment">//给is-&gt;auddec初始化</span><br>        <span class="hljs-keyword">if</span> ((ret = decoder_init(&amp;is-&gt;auddec, avctx, &amp;is-&gt;audioq, is-&gt;continue_read_thread)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br>        <span class="hljs-comment">//开启音频解码线程</span><br>        <span class="hljs-keyword">if</span> ((ret = decoder_start(&amp;is-&gt;auddec, audio_thread, <span class="hljs-string">&quot;audio_decoder&quot;</span>, is)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> out;<br>        <span class="hljs-comment">//暂停音频播放器</span><br>        SDL_PauseAudioDevice(audio_dev, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> AVMEDIA_TYPE_VIDEO:<br>        is-&gt;video_stream = stream_index;<br>        is-&gt;video_st = ic-&gt;streams[stream_index];<br>        <span class="hljs-comment">//给is-&gt;viddec初始化</span><br>        <span class="hljs-keyword">if</span> ((ret = decoder_init(&amp;is-&gt;viddec, avctx, &amp;is-&gt;videoq, is-&gt;continue_read_thread)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br>        <span class="hljs-comment">//开启视频解码线程</span><br>        <span class="hljs-keyword">if</span> ((ret = decoder_start(&amp;is-&gt;viddec, video_thread, <span class="hljs-string">&quot;video_decoder&quot;</span>, is)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> out;<br>        is-&gt;queue_attachments_req = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> AVMEDIA_TYPE_SUBTITLE:<br>        is-&gt;subtitle_stream = stream_index;<br>        is-&gt;subtitle_st = ic-&gt;streams[stream_index];<br>        <span class="hljs-comment">//初始化字幕解码</span><br>        <span class="hljs-keyword">if</span> ((ret = decoder_init(&amp;is-&gt;subdec, avctx, &amp;is-&gt;subtitleq, is-&gt;continue_read_thread)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> fail;<br>        <span class="hljs-comment">//开启字幕解码线程</span><br>        <span class="hljs-keyword">if</span> ((ret = decoder_start(&amp;is-&gt;subdec, subtitle_thread, <span class="hljs-string">&quot;subtitle_decoder&quot;</span>, is)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> out;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">//....</span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对音频，需要另外处理音频播放器的初始化，暂停状态。</p><p>对音频，视频，字幕，调用<code>decoder_init</code>初始化Decoder， 调用<code>decoder_start</code>开启对应的解码线程。</p><p>decoder_init</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">static int decoder_init(Decoder *d, AVCodecContext *avctx, PacketQueue *queue, SDL_cond *empty_queue_cond) &#123;<br>    memset(d, <span class="hljs-number">0</span>, sizeof(Decoder));<br>    <span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>pkt = av_packet_alloc();<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!d-&gt;</span>pkt)<br>        return AVERROR(ENOMEM);<br>    <span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>avctx = avctx;<br>    <span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>queue = queue;<br>    <span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>empty_queue_cond = empty_queue_cond;<br>    <span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>start_pts = AV_NOPTS_VALUE;<br>    <span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>pkt_serial = -<span class="hljs-number">1</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>decoder_start</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">decoder_start</span><span class="hljs-params">(Decoder *d, <span class="hljs-type">int</span> (*fn)(<span class="hljs-type">void</span> *), <span class="hljs-type">const</span> <span class="hljs-type">char</span> *thread_name, <span class="hljs-type">void</span>* arg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//开启packet queue</span><br>    <span class="hljs-built_in">packet_queue_start</span>(d-&gt;queue);<br>    <span class="hljs-comment">//开启解码线程</span><br>    d-&gt;decoder_tid = <span class="hljs-built_in">SDL_CreateThread</span>(fn, thread_name, arg);<br>    <span class="hljs-keyword">if</span> (!d-&gt;decoder_tid) &#123;<br>        <span class="hljs-built_in">av_log</span>(<span class="hljs-literal">NULL</span>, AV_LOG_ERROR, <span class="hljs-string">&quot;SDL_CreateThread(): %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主循环读包"><a href="#主循环读包" class="headerlink" title="主循环读包"></a>主循环读包</h3><p>简化一下如下</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (<span class="hljs-keyword">is</span>-&gt;</span>abort_request)<br>            break;<span class="hljs-comment">//处理退出消息</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">paused</span> != <span class="hljs-keyword">is</span>-&gt;</span>last_paused) &#123;<br>            <span class="hljs-comment">//处理暂停与恢复</span><br>            <span class="hljs-comment">//.......</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-title">if</span> (<span class="hljs-keyword">is</span>-&gt;</span>seek_req) &#123;<br>            <span class="hljs-comment">//处理seek操作</span><br>            <span class="hljs-function"><span class="hljs-title">ret</span> = avformat_seek_file(<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">ic</span>, -1, seek_min, seek_target, seek_max, <span class="hljs-keyword">is</span>-&gt;</span>seek_flags);<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        控制队列大小</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">if</span> (infinite_buffer&lt;<span class="hljs-number">1</span> &amp;&amp;<br>              (<span class="hljs-function"><span class="hljs-title">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">audioq</span>.size + <span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">videoq</span>.size + <span class="hljs-keyword">is</span>-&gt;</span>subtitleq.size &gt; MAX_QUEUE_SIZE<br>            || (<span class="hljs-function"><span class="hljs-title">stream_has_enough_packets</span>(<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">audio_st</span>, <span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">audio_stream</span>, &amp;<span class="hljs-keyword">is</span>-&gt;</span>audioq) &amp;&amp;<br>                <span class="hljs-function"><span class="hljs-title">stream_has_enough_packets</span>(<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">video_st</span>, <span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">video_stream</span>, &amp;<span class="hljs-keyword">is</span>-&gt;</span>videoq) &amp;&amp;<br>                <span class="hljs-function"><span class="hljs-title">stream_has_enough_packets</span>(<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">subtitle_st</span>, <span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">subtitle_stream</span>, &amp;<span class="hljs-keyword">is</span>-&gt;</span>subtitleq)))) &#123;<br>            <span class="hljs-comment">/* wait 10 ms */</span><br>            SDL_LockMutex(wait_mutex);<br>            SDL_C<span class="hljs-function"><span class="hljs-title">ondWaitTimeout</span>(<span class="hljs-keyword">is</span>-&gt;</span>continue_read_thread, wait_mutex, <span class="hljs-number">10</span>);<br>            SDL_UnlockMutex(wait_mutex);<br>            continue;<br>        &#125;<br>        <span class="hljs-comment">//处理循环播放</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (!<span class="hljs-keyword">is</span>-&gt;</span>paused &amp;&amp;<br>            (!<span class="hljs-function"><span class="hljs-title">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">audio_st</span> || (<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">auddec</span>.finished == <span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">audioq</span>.serial &amp;&amp; frame_queue_nb_remaining(&amp;<span class="hljs-keyword">is</span>-&gt;</span>sampq) == <span class="hljs-number">0</span>)) &amp;&amp;<br>            (!<span class="hljs-function"><span class="hljs-title">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">video_st</span> || (<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">viddec</span>.finished == <span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">videoq</span>.serial &amp;&amp; frame_queue_nb_remaining(&amp;<span class="hljs-keyword">is</span>-&gt;</span>pictq) == <span class="hljs-number">0</span>))) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">loop</span> != <span class="hljs-number">1</span> &amp;&amp; (!<span class="hljs-keyword">loop</span> || --<span class="hljs-keyword">loop</span>)) &#123;<br>                stream_seek(<span class="hljs-keyword">is</span>, start_time != AV_NOPTS_VALUE ? start_time : <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (autoexit) &#123;<br>                ret = AVERROR_EOF;<br>                goto fail;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//读pkt</span><br>        ret = av_read_frame(ic, pkt);<br><br>        <span class="hljs-comment">//在播放区间，放入队列</span><br>        <span class="hljs-function"><span class="hljs-title">packet_queue_put</span>(&amp;<span class="hljs-keyword">is</span>-&gt;</span>videoq, pkt);<br>        <span class="hljs-comment">//不在播放区间，丢弃</span><br>        av_packet_unref(pkt);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>主要的代码就<code>av_read_frame</code>和<code>packet_queue_put</code>，<code>av_read_frame</code>从文件中读取视频数据，并获取一个AVPacket，<code>packet_queue_put</code>把它放入到对应的PacketQueue中。</p><p>当然，读取过程还会有seek、pause、resume、abort等事件，所以有专门的分支处理这些请求。</p><p>PacketQueue默认情况下会有大小限制，达到这个大小后，就需要等待10ms，以让消费者——解码线程能有时间消耗。</p><p>播放完成后，会根据loop的设置决定是否循环。</p><p>暂停&#x2F;恢复的处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (is-&gt;paused != is-&gt;last_paused) &#123;<br>    <span class="hljs-comment">//更新paused状态</span><br>    is-&gt;last_paused = is-&gt;paused;<br>    <span class="hljs-keyword">if</span> (is-&gt;paused)<br>        <span class="hljs-comment">//暂停</span><br>        is-&gt;read_pause_return = av_read_pause(ic);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">//恢复播放</span><br>        av_read_play(ic);<br>&#125;<br></code></pre></td></tr></table></figure><p>ffmpeg有专门针对暂停和恢复的函数，所以直接调用就可以了。</p><blockquote><p>av_read_pause和av_read_play对于URLProtocol，会调用其url_read_pause，通过参数区分是要暂停还是恢复。对于AVInputFormat会调用其read_pause和read_play.<br>一般情况下URLProtocol和AVInputFormat都不需要专门处理暂停和恢复，但对于像rtsp&#x2F;rtmp这种在通讯协议上支持(需要)暂停、恢复的就特别有用了。</p></blockquote><p>对于seek的处理，会比暂停&#x2F;恢复略微复杂一些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (is-&gt;seek_req) &#123;<br>    <span class="hljs-comment">//处理seek操作</span><br>    <span class="hljs-type">int64_t</span> seek_target = is-&gt;seek_pos;<br>    <span class="hljs-type">int64_t</span> seek_min    = is-&gt;seek_rel &gt; <span class="hljs-number">0</span> ? seek_target - is-&gt;seek_rel + <span class="hljs-number">2</span>: INT64_MIN;<br>    <span class="hljs-type">int64_t</span> seek_max    = is-&gt;seek_rel &lt; <span class="hljs-number">0</span> ? seek_target - is-&gt;seek_rel - <span class="hljs-number">2</span>: INT64_MAX;<br><span class="hljs-comment">// FIXME the +-2 is due to rounding being not done in the correct direction in generation</span><br><span class="hljs-comment">//      of the seek_pos/seek_rel variables</span><br>    <span class="hljs-comment">//seek到正确的位置</span><br>    ret = avformat_seek_file(is-&gt;ic, <span class="hljs-number">-1</span>, seek_min, seek_target, seek_max, is-&gt;seek_flags);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        av_log(<span class="hljs-literal">NULL</span>, AV_LOG_ERROR,<br>               <span class="hljs-string">&quot;%s: error while seeking\n&quot;</span>, is-&gt;ic-&gt;url);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (is-&gt;audio_stream &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">//清空音频帧队列</span><br>            packet_queue_flush(&amp;is-&gt;audioq);<br>        <span class="hljs-keyword">if</span> (is-&gt;subtitle_stream &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">//清空字幕帧队列</span><br>            packet_queue_flush(&amp;is-&gt;subtitleq);<br>        <span class="hljs-keyword">if</span> (is-&gt;video_stream &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">//清空视频帧队列</span><br>            packet_queue_flush(&amp;is-&gt;videoq);<br>        <span class="hljs-comment">//更新clock</span><br>        <span class="hljs-keyword">if</span> (is-&gt;seek_flags &amp; AVSEEK_FLAG_BYTE) &#123;<br>           set_clock(&amp;is-&gt;extclk, NAN, <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>           set_clock(&amp;is-&gt;extclk, seek_target / (<span class="hljs-type">double</span>)AV_TIME_BASE, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    is-&gt;seek_req = <span class="hljs-number">0</span>;<br>    is-&gt;queue_attachments_req = <span class="hljs-number">1</span>;<br>    is-&gt;eof = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (is-&gt;paused)<br>        step_to_next_frame(is);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要的seek操作通过avformat_seek_file完成。根据avformat_seek_file的返回值，如果seek成功，需要：</p><ol><li>清除PacketQueue的缓存，并放入一个flush_pkt。放入的flush_pkt可以让PacketQueue的serial增1，以区分seek前后的数据</li><li>同步外部时钟。在后续音视频同步的文章中再具体分析。</li></ol><p>最后清理一些变量，并：</p><ol><li>设置queue_attachments_req以显示attachment画面</li><li>如果当前是暂停状态，就跳到seek后的下一帧，以直观体现seek成功了</li></ol><p>step_to_next_frame</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> step_to_next_frame(VideoState *<span class="hljs-keyword">is</span>)<br>&#123;<br>    <span class="hljs-comment">/* if the stream is paused unpause it, then step */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">is</span>-&gt;paused)<br>        stream_toggle_pause(<span class="hljs-keyword">is</span>);<br>    <span class="hljs-keyword">is</span>-&gt;step = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>原代码的注释比较清晰了——先取消暂停，然后执行step。当设置step为1后，显示线程会显示出一帧画面，然后再次进入暂停：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//in video_refresh</span><br><span class="hljs-function"><span class="hljs-title">if</span> (<span class="hljs-keyword">is</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">step</span> &amp;&amp; !<span class="hljs-keyword">is</span>-&gt;</span>paused)<br>    stream_toggle_pause(<span class="hljs-keyword">is</span>);<br></code></pre></td></tr></table></figure><p>这样seek的处理就完成了。</p><p>前面seek、暂停、恢复都可以通过调用ffmpeg的函数，辅助一些流程控制完成封装。</p><p>而读取缓冲区的控制可以说是ffplay原生的特性了。</p><p>是否需要控制缓冲区大小由变量infinite_buffer决定。infinite_buffer为1表示当前buffer无限大，不需要使用缓冲区限制策略。</p><p>infinite_buffer是可选选项，但在文件是实时协议时，且用户未指定时，这个值会被强制为1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_realtime</span><span class="hljs-params">(AVFormatContext *s)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(   !<span class="hljs-built_in">strcmp</span>(s-&gt;iformat-&gt;name, <span class="hljs-string">&quot;rtp&quot;</span>)<br>       || !<span class="hljs-built_in">strcmp</span>(s-&gt;iformat-&gt;name, <span class="hljs-string">&quot;rtsp&quot;</span>)<br>       || !<span class="hljs-built_in">strcmp</span>(s-&gt;iformat-&gt;name, <span class="hljs-string">&quot;sdp&quot;</span>)<br>    )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span>(s-&gt;pb &amp;&amp; (   !<span class="hljs-built_in">strncmp</span>(s-&gt;url, <span class="hljs-string">&quot;rtp:&quot;</span>, <span class="hljs-number">4</span>)<br>                 || !<span class="hljs-built_in">strncmp</span>(s-&gt;url, <span class="hljs-string">&quot;udp:&quot;</span>, <span class="hljs-number">4</span>)<br>                )<br>    )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>……<br>is-&gt;realtime = is_realtime(ic);<br>……<br><span class="hljs-keyword">if</span> (infinite_buffer &lt; <span class="hljs-number">0</span> &amp;&amp; is-&gt;realtime)<br>    infinite_buffer = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>我们看下需控制缓冲区大小的情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (infinite_buffer&lt;<span class="hljs-number">1</span> &amp;&amp;<br>    (is-&gt;audioq.size + is-&gt;videoq.size + is-&gt;subtitleq.size &gt; MAX_QUEUE_SIZE<br>    || (stream_has_enough_packets(is-&gt;audio_st, is-&gt;audio_stream, &amp;is-&gt;audioq) &amp;&amp;<br>        stream_has_enough_packets(is-&gt;video_st, is-&gt;video_stream, &amp;is-&gt;videoq) &amp;&amp;<br>        stream_has_enough_packets(is-&gt;subtitle_st, is-&gt;subtitle_stream, &amp;is-&gt;subtitleq)))) &#123;<br>    <span class="hljs-comment">/* wait 10 ms */</span><br>    SDL_LockMutex(wait_mutex);<br>    SDL_CondWaitTimeout(is-&gt;continue_read_thread, wait_mutex, <span class="hljs-number">10</span>);<br>    SDL_UnlockMutex(wait_mutex);<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓冲区满有两种可能：</p><ol><li>audioq，videoq，subtitleq三个PacketQueue的总字节数达到了MAX_QUEUE_SIZE（15M）</li><li>音频、视频、字幕流都已有够用的包（stream_has_enough_packets）</li></ol><p>第一种好理解，看下第二种中的stream_has_enough_packets：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">stream_has_enough_packets</span><span class="hljs-params">(AVStream *st, <span class="hljs-type">int</span> stream_id, PacketQueue *<span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> stream_id &lt; <span class="hljs-number">0</span> ||<br>           <span class="hljs-built_in">queue</span>-&gt;abort_request ||<br>           (st-&gt;disposition &amp; AV_DISPOSITION_ATTACHED_PIC) ||<br>           <span class="hljs-built_in">queue</span>-&gt;nb_packets &gt; MIN_FRAMES &amp;&amp; (!<span class="hljs-built_in">queue</span>-&gt;duration || av_q2d(st-&gt;time_base) * <span class="hljs-built_in">queue</span>-&gt;duration &gt; <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在满足PacketQueue总时长为0，或总时长超过1s的前提下：</p><p>有这么几种情况包是够用的：</p><ol><li>流没有打开（stream_id &lt; 0）</li><li>有退出请求（queue-&gt;abort_request）</li><li>配置了AV_DISPOSITION_ATTACHED_PIC？（这个还不理解，后续分析attachement时回头看看）</li><li>队列内包个数大于MIN_FRAMES（&#x3D;25）</li></ol><p>挺饶地，没有深刻体会其设计用意，不评论。</p><p>上述的几种处理都还是在正常播放流程内，接下来是对播放已完成情况的处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!is-&gt;paused &amp;&amp;<br>    (!is-&gt;audio_st || (is-&gt;auddec.finished == is-&gt;audioq.serial &amp;&amp; frame_queue_nb_remaining(&amp;is-&gt;sampq) == <span class="hljs-number">0</span>)) &amp;&amp;<br>    (!is-&gt;video_st || (is-&gt;viddec.finished == is-&gt;videoq.serial &amp;&amp; frame_queue_nb_remaining(&amp;is-&gt;pictq) == <span class="hljs-number">0</span>))) &#123;<br>    <span class="hljs-keyword">if</span> (loop != <span class="hljs-number">1</span> &amp;&amp; (!loop || --loop)) &#123;<br>        stream_seek(is, start_time != AV_NOPTS_VALUE ? start_time : <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (autoexit) &#123;<br>        ret = AVERROR_EOF;<br>        <span class="hljs-keyword">goto</span> fail;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里判断播放已完成的条件依然很“ffplay”，需要满足：</p><ol><li>不在暂停状态</li><li>音频未打开，或者打开了，但是解码已解码完毕，serial等于PacketQueue的serial，并且PacketQueue中没有节点了</li><li>视频未打开，或者打开了，但是解码已解码完毕，serial等于PacketQueue的serial，并且PacketQueue中没有节点了</li></ol><p>在确认已结束的情况下，用户有两个变量可以控制播放器行为：</p><ol><li>loop: 控制播放次数（当前这次也算在内，也就是最小就是1次了），0表示无限次</li><li>autoexit：自动退出，也就是播放完成后自动退出。</li></ol><p>loop条件简化的非常不友好，其意思是：如果loop&#x3D;&#x3D;1，那么已经播了1次了，无需再seek重新播放；如果loop不是1，&#x3D;&#x3D;0，随意，无限次循环；减1后还大于0（–loop），也允许循环。也就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">allow_loop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (loop == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (loop == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    --loop;<br>    <span class="hljs-keyword">if</span> (loop &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面讲了很多读线程主循环内的处理，比如暂停、seek、结束loop处理等，接下来就看看真正读的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">ret = av_read_frame(ic, pkt);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">//文件读取完了，调用packet_queue_put_nullpacket通知解码线程</span><br>    <span class="hljs-keyword">if</span> ((ret == AVERROR_EOF || avio_feof(ic-&gt;pb)) &amp;&amp; !is-&gt;eof) &#123;<br>        <span class="hljs-keyword">if</span> (is-&gt;video_stream &gt;= <span class="hljs-number">0</span>)<br>            packet_queue_put_nullpacket(&amp;is-&gt;videoq, is-&gt;video_stream);<br>        <span class="hljs-keyword">if</span> (is-&gt;audio_stream &gt;= <span class="hljs-number">0</span>)<br>            packet_queue_put_nullpacket(&amp;is-&gt;audioq, is-&gt;audio_stream);<br>        <span class="hljs-keyword">if</span> (is-&gt;subtitle_stream &gt;= <span class="hljs-number">0</span>)<br>            packet_queue_put_nullpacket(&amp;is-&gt;subtitleq, is-&gt;subtitle_stream);<br>        is-&gt;eof = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//发生错误了，退出主循环</span><br>    <span class="hljs-keyword">if</span> (ic-&gt;pb &amp;&amp; ic-&gt;pb-&gt;error)<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-comment">//如果都不是，可能只是要等一等</span><br>    SDL_LockMutex(wait_mutex);<br>    SDL_CondWaitTimeout(is-&gt;continue_read_thread, wait_mutex, <span class="hljs-number">10</span>);<br>    SDL_UnlockMutex(wait_mutex);<br>    <span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    is-&gt;eof = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* check if packet is in play range specified by user, then queue, otherwise discard */</span><br>stream_start_time = ic-&gt;streams[pkt-&gt;stream_index]-&gt;start_time;<br>pkt_ts = pkt-&gt;pts == AV_NOPTS_VALUE ? pkt-&gt;dts : pkt-&gt;pts;<br>pkt_in_play_range = duration == AV_NOPTS_VALUE ||<br>        (pkt_ts - (stream_start_time != AV_NOPTS_VALUE ? stream_start_time : <span class="hljs-number">0</span>)) *<br>        av_q2d(ic-&gt;streams[pkt-&gt;stream_index]-&gt;time_base) -<br>        (<span class="hljs-type">double</span>)(start_time != AV_NOPTS_VALUE ? start_time : <span class="hljs-number">0</span>) / <span class="hljs-number">1000000</span><br>        &lt;= ((<span class="hljs-type">double</span>)duration / <span class="hljs-number">1000000</span>);<br><br><span class="hljs-comment">//如果在时间范围内，那么根据stream_index，放入到视频、音频、会字幕的PacketQueue中</span><br><span class="hljs-keyword">if</span> (pkt-&gt;stream_index == is-&gt;audio_stream &amp;&amp; pkt_in_play_range) &#123;<br>    packet_queue_put(&amp;is-&gt;audioq, pkt);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pkt-&gt;stream_index == is-&gt;video_stream &amp;&amp; pkt_in_play_range<br>           &amp;&amp; !(is-&gt;video_st-&gt;disposition &amp; AV_DISPOSITION_ATTACHED_PIC)) &#123;<br>    packet_queue_put(&amp;is-&gt;videoq, pkt);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pkt-&gt;stream_index == is-&gt;subtitle_stream &amp;&amp; pkt_in_play_range) &#123;<br>    packet_queue_put(&amp;is-&gt;subtitleq, pkt);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    av_packet_unref(pkt);<br>&#125;<br></code></pre></td></tr></table></figure><p>看起来很长，实际比上述各种特殊流程的处理都直白，主要为：</p><ol><li>av_read_frame读取一个包(AVPacket)</li><li>返回值处理</li><li>pkt_in_play_range计算</li><li>packet_queue_put放入各自队列，或者丢弃</li></ol><p>步骤1、步骤2、步骤4，都比较直接，看注释即可。</p><p>这里看下pkt_in_play_range的计算，我们把以上代码分解下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int64_t</span> <span class="hljs-title function_">get_stream_start_time</span><span class="hljs-params">(AVFormatContext* ic, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-type">int64_t</span> stream_start_time = ic-&gt;streams[index]-&gt;start_time;<br>    <span class="hljs-keyword">return</span> stream_start_time != AV_NOPTS_VALUE ? stream_start_time : <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int64_t</span> <span class="hljs-title function_">get_pkt_ts</span><span class="hljs-params">(AVPacket* pkt)</span> &#123;<span class="hljs-comment">//ts: timestamp（时间戳）的缩写</span><br>    <span class="hljs-keyword">return</span> pkt-&gt;pts == AV_NOPTS_VALUE ? pkt-&gt;dts : pkt-&gt;pts;<br>&#125;<br><br><span class="hljs-type">double</span> <span class="hljs-title function_">ts_as_second</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> ts，AVFormatContext* ic，<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> ts * av_q2d(ic-&gt;streams[index]-&gt;time_base);<br>&#125; <br><br><span class="hljs-type">double</span> <span class="hljs-title function_">get_ic_start_time</span><span class="hljs-params">(AVFormatContext* ic)</span> &#123;<span class="hljs-comment">//ic中的时间单位是us</span><br>    <span class="hljs-keyword">return</span> (start_time != AV_NOPTS_VALUE ? start_time : <span class="hljs-number">0</span>) / <span class="hljs-number">1000000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有了这些函数，就可以计算pkt_in_play_range了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">is_pkt_in_play_range</span><span class="hljs-params">(AVFormatContext* ic, AVPacket* pkt)</span> &#123;<br>    <span class="hljs-keyword">if</span> (duration == AV_NOPTS_VALUE) <span class="hljs-comment">//如果当前流无法计算总时长，按无限时长处理</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//计算pkt相对stream位置</span><br>    <span class="hljs-type">int64_t</span> stream_ts = get_pkt_ts(pkt) - get_stream_start_time(ic, pkt-&gt;stream_index);<br>    <span class="hljs-type">double</span> stream_ts_s = ts_as_second(stream_ts, ic, pkt-&gt;stream_index);<br><br>    <span class="hljs-comment">//计算pkt相对ic位置</span><br>    <span class="hljs-type">double</span> ic_ts = stream_ts_s - get_ic_start_time(ic);<br><br>    <span class="hljs-comment">//是否在时间范围内</span><br>    <span class="hljs-keyword">return</span> ic_ts &lt;= ((<span class="hljs-type">double</span>)duration / <span class="hljs-number">1000000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>#pragma once 用法总结</title>
    <link href="/2022/03/19/c++/2022-03-19-pragma%20once%20%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/19/c++/2022-03-19-pragma%20once%20%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="pragma-once-用法总结"><a href="#pragma-once-用法总结" class="headerlink" title="pragma once 用法总结"></a>pragma once 用法总结</h1><h2 id="pragma-once-这个宏有什么用？"><a href="#pragma-once-这个宏有什么用？" class="headerlink" title="pragma once 这个宏有什么用？"></a>pragma once 这个宏有什么用？</h2><p>为了避免同一个头文件被包含（include）多次，C&#x2F;C++中有两种宏实现方式：一种是#ifndef方式；另一种是#pragma once方式。</p><p>在能够支持这两种方式的编译器上，二者并没有太大的区别。但两者仍然有一些细微的区别。</p><h2 id="两者的使用方式有何区别？"><a href="#两者的使用方式有何区别？" class="headerlink" title="两者的使用方式有何区别？"></a>两者的使用方式有何区别？</h2><p>方式1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>  __SOMEFILE_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>   __SOMEFILE_H__</span><br> ... ... <span class="hljs-comment">// 声明、定义语句</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#pragma once</span><br> <span class="hljs-string">...</span> <span class="hljs-string">...</span> <span class="hljs-string">//</span> 声明、定义语句<br></code></pre></td></tr></table></figure><h2 id="两者各有和特点？"><a href="#两者各有和特点？" class="headerlink" title="两者各有和特点？"></a>两者各有和特点？</h2><h3 id="ifndef"><a href="#ifndef" class="headerlink" title="#ifndef"></a>#ifndef</h3><ol><li><p>#ifndef的方式受C&#x2F;C++语言标准支持</p></li><li><p>通过宏来检测，宏的范围可以是单个文件，也可以是代码片段。保证文件或者代码片段不被重复包含，针对文件的内容。</p></li><li><p>可能会发生宏冲突，导致你看到头文件明明存在，但编译器却硬说找不到声明的状况（遇到过一次，查了一晚上）</p></li></ol><h3 id="pragma-once"><a href="#pragma-once" class="headerlink" title="#pragma once"></a>#pragma once</h3><ol><li><p>pragma once由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指物理上的一个文件，而不是指内容相同的两个文件</p></li><li><p>#pragma once&#96;不是一个标准的指令，但是大多的的编译器已经支持</p></li><li><p><code>#pragma once</code>代替include防范将加快编译速度，ifndef方式需要先打开文件</p></li><li><p>你无法对一个头文件中的一段代码作pragma once声明，而只能针对文件</p></li><li><p>好处是，你不必再担心宏名冲突了，当然也就不会出现宏名冲突引发的奇怪问题</p></li></ol><p>参考： <a href="https://blog.csdn.net/fanyun_01/article/details/77413992">#pragma once用法总结_西北老码农的博客-CSDN博客_#pragma once</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake 语言初识</title>
    <link href="/2022/03/17/cmake/2022-03-17-cmake%20%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/17/cmake/2022-03-17-cmake%20%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h1><p>CMake源文件用cmake语言编写，共三种组织形式</p><ul><li><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#directories">Directories</a> (<code>CMakeLists.txt</code>) 目录</p></li><li><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#scripts">Scripts</a> (<code>&lt;script&gt;.cmake</code>) 脚本</p></li><li><p><a href="https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#modules">Modules</a> (<code>&lt;module&gt;.cmake</code>) 模块</p></li></ul><h3 id="Directories-目录"><a href="#Directories-目录" class="headerlink" title="Directories 目录"></a>Directories 目录</h3><p>用cmake 去编译项目时候，入口是项目顶级目录的<code>CMakeLists.txt</code>文件，<code>CMakeLists.txt</code>描述了当前项目构建规则。当遇到<code>add _ subdirectory ()</code>命令，cmake会去命令指定的子目录中搜索<code>CMakeLists.txt</code>，将其添加到构建过程，这是一个递归解析的过程。子目录中的<code>CMakeLists.txt</code>描述了子项目的构建规则。</p><h3 id="Scripts-脚本"><a href="#Scripts-脚本" class="headerlink" title="Scripts 脚本"></a>Scripts 脚本</h3><p>一个单独的<code>&lt;script&gt;.cmake</code>文件可以被当做脚本来处理，可以理解为shell脚本，通过cmake来解析和执行脚本定义的操作。脚本中不允许出现定义构建目标和构建行为的命令，</p><p>cmake 脚本不参与构建过程。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">cmake [&#123;-D <span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&#125;...] -P <span class="hljs-tag">&lt;<span class="hljs-name">cmake-script-file</span>&gt;</span> [-- <span class="hljs-tag">&lt;<span class="hljs-name">unparsed-options</span>&gt;</span>...]<br></code></pre></td></tr></table></figure><blockquote><p>Process the given cmake file as a script written in the CMake language. No configure or generate step is performed and the cache is not modified. If variables are defined using <code>-D</code>, this must be done before the <code>-P</code> argument.</p></blockquote><blockquote><p>Any options after <code>--</code> are not parsed by CMake, but they are still included in the set of <a href="https://cmake.org/cmake/help/latest/variable/CMAKE_ARGV0.html#variable:CMAKE_ARGV0" title="CMAKE_ARGV0"><code>CMAKE_ARGV&lt;n&gt;</code></a> variables passed to the script (including the <code>--</code> itself).</p></blockquote><h3 id="Modules-模块"><a href="#Modules-模块" class="headerlink" title="Modules 模块"></a>Modules 模块</h3><p>就是一个cmake的源文件，形式<code>&lt;module&gt;.cmake</code>。可以在当前<code>CMakeLists.txt</code>或cmake源文件中，通过<code>include()</code>命令，引入其他cmake文件中定义的内容。类似于c语言的</p><p><code>#include&lt;&gt;</code>。</p><p>cmake 内置了很多的模块，可以通过<a href="https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html#manual:cmake-modules(7)">cmake-modules</a>查看。项目可以定义自己cmake modules，通过<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html#variable:CMAKE_MODULE_PATH">CMAKE_MODULE_PATH</a>来指定他们的路径。</p><h1 id="cmake-变量"><a href="#cmake-变量" class="headerlink" title="cmake 变量"></a>cmake 变量</h1><ol><li><p>cmake 变量的值是字符串类型</p></li><li><p>Set ()和 unset ()命令显式地设置或取消设置变量</p></li><li><p>变量名是区分大小写的,建议只使用由字母数字字符加上 <code>_ </code>和<code>-</code>组成的名称</p></li><li><p>根据作用于范围, 变量的类型有normal, cache, or environment variable</p></li></ol><h3 id="变量作用范围"><a href="#变量作用范围" class="headerlink" title="变量作用范围"></a>变量作用范围</h3><p>参考这篇文章<a href="https://blog.csdn.net/weixin_39732534/article/details/110658282">cmake cache变量_反复研究好几遍，我才发现关于 CMake 变量还可以这样理解！_weixin_39732534的博客-CSDN博客</a> 可以更好的理解cmake 变量及其作用域范围。</p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>cmake  通过 <a href="https://cmake.org/cmake/help/latest/command/function.html#command:function" title="function"><code>function()</code></a>命令来定义函数。在函数作用域通过<code>set</code>定义的变量，只在函数作用域内有效，函数返回后，该变量失效。</p><p>但是通过<code>set</code>命令指定 <code>PARENT_SCOPE</code>,可以设置函数上级作用域内的变量。</p><h4 id="CMake-文件中"><a href="#CMake-文件中" class="headerlink" title="CMake 文件中"></a>CMake 文件中</h4><p>每个CMakeLists.txt 和 <code>xx.cmake</code>文件中都定义一个作用域。上级CMakeLists.txt文件中定义的变量，会传递给下级的CMakeLists.txt文件中。</p><p>不在函数用通过<code>set</code>和<code>unset</code>命令设置的变量，作用范围在当前的文件中。</p><p>修改当前CMakeLists.txt文件中定义的变量，在上级CMakeLists.txt文件中不生效，但是通过<code>set</code>命令指定 <code>PARENT_SCOPE</code>,可以修改上级作用域内的变量。</p><h4 id="cache-中"><a href="#cache-中" class="headerlink" title="cache 中"></a>cache 中</h4><p>cache 变量存被保存在<code>CMakeCache.txt</code>文件中。全局变量，多个构建构建中持续生效。</p><p>只能通过set命令，指定<code>CACHE</code>选项来显示修改。</p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>类似于普通变量，但是作用范围是全局，不会被缓存。</p><p>变量引用的格式为 $ENV { &lt; Variable &gt; }</p><p>CMake 环境变量的初始值是调用进程的初始值。可以使用 set ()和 unset ()命令更改值。这些命令只影响正在运行的 CMake 进程，而不影响整个系统环境。更改后的值不会写回调用进程，后续的构建或测试进程也不会看到它们。</p><h3 id="变量求值的顺序："><a href="#变量求值的顺序：" class="headerlink" title="变量求值的顺序："></a>变量求值的顺序：</h3><ol><li><p>当前函数内查找</p></li><li><p>当前文件中查找</p></li><li><p>缓存中查找</p></li><li><p>最后没找到，计为空字符串。</p></li><li><p>可以通过<code>$CACHE&#123;VAR&#125;</code>跳过前面的过程，直接从缓存中查找。</p></li></ol><h3 id="set-给变量赋值"><a href="#set-给变量赋值" class="headerlink" title="set 给变量赋值"></a>set 给变量赋值</h3><h4 id="normal-变量"><a href="#normal-变量" class="headerlink" title="normal 变量"></a>normal 变量</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">set</span>(&lt;<span class="hljs-built_in">variable</span>&gt; &lt;value&gt;<span class="hljs-params">...</span> <span class="hljs-meta">[</span>PARENT_SCOPE<span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><p>如果指定了PARENT_SCOPE，修改会在上级作用域内生效。</p><h4 id="Set-Cache-Entry"><a href="#Set-Cache-Entry" class="headerlink" title="Set Cache Entry"></a>Set Cache Entry</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">set</span>(&lt;<span class="hljs-built_in">variable</span>&gt; &lt;value&gt;<span class="hljs-params">...</span> <span class="hljs-keyword">CACHE</span> &lt;<span class="hljs-keyword">type</span>&gt; &lt;docstring&gt; <span class="hljs-meta">[</span>FORCE<span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><p>不加FORCE，修改不会覆盖之前cache中的值。 FORCE 选项覆盖现有条目。</p><p>type的类型必须指定为以下一种：</p><ol><li><p>BOOL</p></li><li><p>FILEPATH</p></li><li><p>PATH</p></li><li><p>STRING</p></li><li><p>INTERNAL</p></li></ol><blockquote><p>也可以通过cmake命令，通过<code>-D&lt;var&gt;=&lt;value&gt;</code>添加缓存条目。</p></blockquote><h4 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-built_in">set</span>(ENV&#123;<span class="hljs-operator">&lt;</span>variable<span class="hljs-operator">&gt;</span>&#125; <span class="hljs-meta">[&lt;value&gt;]</span>)<br></code></pre></td></tr></table></figure><p>设置给定值的环境变量，<code>$ENV&#123;&lt;variable&gt;&#125;</code>的后续调用将返回这个新值。</p><p>此命令只影响当前的 CMake 进程，而不影响调用 CMake 的进程，也不影响整个系统环境，也不影响后续构建或测试流程的环境。</p><p>如果在 <code>ENV &#123; &lt; variable &gt; &#125;</code>之后没有给出参数，或者如果 <code>&lt; value &gt;</code> 是一个空字符串，那么这个命令将清除任何已存在的环境变量</p><h2 id="list-变量"><a href="#list-变量" class="headerlink" title="list 变量"></a>list 变量</h2><blockquote><p>Note A list in cmake is a <code>;</code> separated group of strings. To create a list the set command can be used. For example, <code>set(var a b c d e)</code> creates a list with <code>a;b;c;d;e</code>, and <code>set(var &quot;a b c d e&quot;)</code> creates a string or a list with one item in it. (Note macro arguments are not variables, and therefore cannot be used in LIST commands.)</p></blockquote><p>列表不应该用于复杂的数据处理任务，常常用来保存源文件列表。</p><p>大多数构造列表的命令不会转义; 列表元素中的字符，因此将嵌套列表展开:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">set(srcs <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.c</span> <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.c</span> c<span class="hljs-selector-class">.c</span>) # sets &quot;srcs&quot; <span class="hljs-selector-tag">to</span> &quot;<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.c</span>;<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.c</span>;c<span class="hljs-selector-class">.c</span>&quot;<br>set(x <span class="hljs-selector-tag">a</span> &quot;<span class="hljs-selector-tag">b</span>;c&quot;) # sets &quot;x&quot; <span class="hljs-selector-tag">to</span> &quot;<span class="hljs-selector-tag">a</span>;<span class="hljs-selector-tag">b</span>;c&quot;, not &quot;<span class="hljs-selector-tag">a</span>;<span class="hljs-selector-tag">b</span>\;c&quot;<br>set(<span class="hljs-selector-tag">var</span> &quot;<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e&quot;) # sets <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">to</span> &quot;<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c d e&quot;<br></code></pre></td></tr></table></figure><p><a href="https://cmake.org/cmake/help/latest/command/list.html">list</a>操作，就是一些增删查改</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">Reading</span><br><span class="language-xml">  list(LENGTH <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>)</span><br><span class="language-xml">  list(GET <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">index</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">index</span>&gt;</span> ...] <span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>)</span><br><span class="language-xml">  list(JOIN <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">glue</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>)</span><br><span class="language-xml">  list(SUBLIST <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">begin</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">length</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>)</span><br><span class="language-xml"></span><br><span class="language-xml">Search</span><br><span class="language-xml">  list(FIND <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>)</span><br><span class="language-xml"></span><br><span class="language-xml">Modification</span><br><span class="language-xml">  list(APPEND <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">element</span>&gt;</span>...])</span><br><span class="language-xml">  list(FILTER <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> </span><span class="hljs-template-variable">&#123;INCLUDE | EXCLUDE&#125;</span><span class="language-xml"> REGEX <span class="hljs-tag">&lt;<span class="hljs-name">regex</span>&gt;</span>)</span><br><span class="language-xml">  list(INSERT <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">index</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">element</span>&gt;</span>...])</span><br><span class="language-xml">  list(POP_BACK <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>...])</span><br><span class="language-xml">  list(POP_FRONT <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">out-var</span>&gt;</span>...])</span><br><span class="language-xml">  list(PREPEND <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">element</span>&gt;</span>...])</span><br><span class="language-xml">  list(REMOVE_ITEM <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>...)</span><br><span class="language-xml">  list(REMOVE_AT <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">index</span>&gt;</span>...)</span><br><span class="language-xml">  list(REMOVE_DUPLICATES <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>)</span><br><span class="language-xml">  list(TRANSFORM <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">ACTION</span>&gt;</span> [...])</span><br><span class="language-xml"></span><br><span class="language-xml">Ordering</span><br><span class="language-xml">  list(REVERSE <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>)</span><br><span class="language-xml">  list(SORT <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span> [...])</span><br></code></pre></td></tr></table></figure><h1 id="file-命令"><a href="#file-命令" class="headerlink" title="file 命令"></a><a href="https://cmake.org/cmake/help/latest/command/file.html">file 命令</a></h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vim">Reading<br>  <span class="hljs-keyword">file</span>(READ <span class="hljs-symbol">&lt;filename&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(STRINGS <span class="hljs-symbol">&lt;filename&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(<span class="hljs-symbol">&lt;HASH&gt;</span> <span class="hljs-symbol">&lt;filename&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span>)<br>  <span class="hljs-keyword">file</span>(TIMESTAMP <span class="hljs-symbol">&lt;filename&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(GET_RUNTIME_DEPENDENCIES [...])<br><br>Writing<br>  <span class="hljs-keyword">file</span>(&#123;WRITE | APPEND&#125; <span class="hljs-symbol">&lt;filename&gt;</span> <span class="hljs-symbol">&lt;content&gt;</span>...)<br>  <span class="hljs-keyword">file</span>(&#123;TOUCH | TOUCH_NOCREATE&#125; [<span class="hljs-symbol">&lt;file&gt;</span>...])<br>  <span class="hljs-keyword">file</span>(GENERATE OUTPUT <span class="hljs-symbol">&lt;output-file&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(CONFIGURE OUTPUT <span class="hljs-symbol">&lt;output-file&gt;</span> CONTENT <span class="hljs-symbol">&lt;content&gt;</span> [...])<br><br>Filesystem<br>  <span class="hljs-keyword">file</span>(&#123;GLOB | GLOB_RECURSE&#125; <span class="hljs-symbol">&lt;out-var&gt;</span> [...] [<span class="hljs-symbol">&lt;globbing-expr&gt;</span>...])<br>  <span class="hljs-keyword">file</span>(MAKE_DIRECTORY [<span class="hljs-symbol">&lt;dir&gt;</span>...])<br>  <span class="hljs-keyword">file</span>(&#123;REMOVE | REMOVE_RECURSE &#125; [<span class="hljs-symbol">&lt;files&gt;</span>...])<br>  <span class="hljs-keyword">file</span>(RENAME <span class="hljs-symbol">&lt;oldname&gt;</span> <span class="hljs-symbol">&lt;newname&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(COPY_FILE <span class="hljs-symbol">&lt;oldname&gt;</span> <span class="hljs-symbol">&lt;newname&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(&#123;COPY | INSTALL&#125; <span class="hljs-symbol">&lt;file&gt;</span>... DESTINATION <span class="hljs-symbol">&lt;dir&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(SIZE <span class="hljs-symbol">&lt;filename&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span>)<br>  <span class="hljs-keyword">file</span>(READ_SYMLINK <span class="hljs-symbol">&lt;linkname&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span>)<br>  <span class="hljs-keyword">file</span>(CREATE_LINK <span class="hljs-symbol">&lt;original&gt;</span> <span class="hljs-symbol">&lt;linkname&gt;</span> [...])<br>  <span class="hljs-keyword">file</span>(CHMOD <span class="hljs-symbol">&lt;files&gt;</span>... <span class="hljs-symbol">&lt;directories&gt;</span>... PERMISSIONS <span class="hljs-symbol">&lt;permissions&gt;</span>... [...])<br>  <span class="hljs-keyword">file</span>(CHMOD_RECURSE <span class="hljs-symbol">&lt;files&gt;</span>... <span class="hljs-symbol">&lt;directories&gt;</span>... PERMISSIONS <span class="hljs-symbol">&lt;permissions&gt;</span>... [...])<br><br>Path Conversion<br>  <span class="hljs-keyword">file</span>(REAL_PATH <span class="hljs-symbol">&lt;path&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span> [BASE_DIRECTORY <span class="hljs-symbol">&lt;dir&gt;</span>] [EXPAND_TILDE])<br>  <span class="hljs-keyword">file</span>(RELATIVE_PATH <span class="hljs-symbol">&lt;out-var&gt;</span> <span class="hljs-symbol">&lt;directory&gt;</span> <span class="hljs-symbol">&lt;file&gt;</span>)<br>  <span class="hljs-keyword">file</span>(&#123;TO_CMAKE_PATH | TO_NATIVE_PATH&#125; <span class="hljs-symbol">&lt;path&gt;</span> <span class="hljs-symbol">&lt;out-var&gt;</span>)<br><br>Transfer<br>  <span class="hljs-keyword">file</span>(DOWNLOAD <span class="hljs-symbol">&lt;url&gt;</span> [<span class="hljs-symbol">&lt;file&gt;</span>] [...])<br>  <span class="hljs-keyword">file</span>(UPLOAD <span class="hljs-symbol">&lt;file&gt;</span> <span class="hljs-symbol">&lt;url&gt;</span> [...])<br><br>Locking<br>  <span class="hljs-keyword">file</span>(LOCK <span class="hljs-symbol">&lt;path&gt;</span> [...])<br><br>Archiving<br>  <span class="hljs-keyword">file</span>(ARCHIVE_CREATE OUTPUT <span class="hljs-symbol">&lt;archive&gt;</span> PATHS <span class="hljs-symbol">&lt;paths&gt;</span>... [...])<br>  <span class="hljs-keyword">file</span>(ARCHIVE_EXTRACT INPUT <span class="hljs-symbol">&lt;archive&gt;</span> [...])<br></code></pre></td></tr></table></figure><h2 id="Filesystem"><a href="#Filesystem" class="headerlink" title="Filesystem"></a>Filesystem</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">file</span>(GLOB &lt;variable&gt;<br>     <span class="hljs-selector-attr">[LIST_DIRECTORIES true|false]</span> <span class="hljs-selector-attr">[RELATIVE &lt;path&gt;]</span> <span class="hljs-selector-attr">[CONFIGURE_DEPENDS]</span><br>     <span class="hljs-selector-attr">[&lt;globbing-expressions&gt;...]</span>)<br><span class="hljs-built_in">file</span>(GLOB_RECURSE &lt;variable&gt; <span class="hljs-selector-attr">[FOLLOW_SYMLINKS]</span><br>     <span class="hljs-selector-attr">[LIST_DIRECTORIES true|false]</span> <span class="hljs-selector-attr">[RELATIVE &lt;path&gt;]</span> <span class="hljs-selector-attr">[CONFIGURE_DEPENDS]</span><br>     <span class="hljs-selector-attr">[&lt;globbing-expressions&gt;...]</span>)<br></code></pre></td></tr></table></figure><blockquote><p>Generate a list of files that match the <code>&lt;globbing-expressions&gt;</code> and store it into the <code>&lt;variable&gt;</code>. Globbing expressions are similar to regular expressions, but much simpler. If <code>RELATIVE</code> flag is specified, the results will be returned as relative paths to the given path.</p><p>On Windows and macOS, globbing is case-insensitive even if the underlying filesystem is case-sensitive (both filenames and globbing expressions are converted to lowercase before matching). On other platforms, globbing is case-sensitive</p><p>By default <code>GLOB</code> lists directories - directories are omitted in result if <code>LIST_DIRECTORIES</code> is set to false.</p></blockquote><p>Examples of globbing expressions include:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">*.cxx      - <span class="hljs-keyword">match</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">files</span> with extension cxx<br>*.vt?      - <span class="hljs-keyword">match</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">files</span> with extension vta,...,vtz<br><span class="hljs-keyword">f</span>[<span class="hljs-number">3</span>-<span class="hljs-number">5</span>].txt - <span class="hljs-keyword">match</span> <span class="hljs-keyword">files</span> f3.txt, f4.txt, f5.txt<br></code></pre></td></tr></table></figure><blockquote><p>The <code>GLOB_RECURSE</code> mode will traverse all the subdirectories of the matched directory and match the files.</p></blockquote><h1 id="cmake-执行shell命令"><a href="#cmake-执行shell命令" class="headerlink" title="cmake 执行shell命令"></a>cmake 执行shell命令</h1><p>通过 execute_process  可以执行调用shell 命令</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs inform7">execute_process(COMMAND &lt;cmd1&gt; <span class="hljs-comment">[&lt;arguments&gt;]</span><br>                <span class="hljs-comment">[COMMAND &lt;cmd2&gt; <span class="hljs-comment">[&lt;arguments&gt;]</span>]</span>...<br>                <span class="hljs-comment">[WORKING_DIRECTORY &lt;directory&gt;]</span><br>                <span class="hljs-comment">[TIMEOUT &lt;seconds&gt;]</span><br>                <span class="hljs-comment">[RESULT_VARIABLE &lt;variable&gt;]</span><br>                <span class="hljs-comment">[RESULTS_VARIABLE &lt;variable&gt;]</span><br>                <span class="hljs-comment">[OUTPUT_VARIABLE &lt;variable&gt;]</span><br>                <span class="hljs-comment">[ERROR_VARIABLE &lt;variable&gt;]</span><br>                <span class="hljs-comment">[INPUT_FILE &lt;file&gt;]</span><br>                <span class="hljs-comment">[OUTPUT_FILE &lt;file&gt;]</span><br>                <span class="hljs-comment">[ERROR_FILE &lt;file&gt;]</span><br>                <span class="hljs-comment">[OUTPUT_QUIET]</span><br>                <span class="hljs-comment">[ERROR_QUIET]</span><br>                <span class="hljs-comment">[COMMAND_ECHO &lt;where&gt;]</span><br>                <span class="hljs-comment">[OUTPUT_STRIP_TRAILING_WHITESPACE]</span><br>                <span class="hljs-comment">[ERROR_STRIP_TRAILING_WHITESPACE]</span><br>                <span class="hljs-comment">[ENCODING &lt;name&gt;]</span><br>                <span class="hljs-comment">[ECHO_OUTPUT_VARIABLE]</span><br>                <span class="hljs-comment">[ECHO_ERROR_VARIABLE]</span><br>                <span class="hljs-comment">[COMMAND_ERROR_IS_FATAL &lt;ANY|LAST&gt;]</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg filter</title>
    <link href="/2022/03/15/ffmpeg/2022-03-15-ffmpeg%20filters/"/>
    <url>/2022/03/15/ffmpeg/2022-03-15-ffmpeg%20filters/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><p><a href="https://www.cnblogs.com/tocy/p/ffmpeg-filter-intro.html">FFmpeg filter简介 - Tocy - 博客园</a></p><p><a href="https://trac.ffmpeg.org/wiki/FilteringGuide">FFmpeg Filtering Guide</a></p><p><a href="http://ffmpeg.org/ffmpeg-filters.html">FFmpeg Filters Documentation</a></p><p>[FFmpeg filter的使用介绍](<a href="https://www.jianshu.com/p/b16835da62ab">FFmpeg filter的使用介绍 - 简书</a>)</p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffplay frame queue 分析</title>
    <link href="/2022/03/15/ffmpeg/2022-03-15-ffplay-frame%20queue%20%E5%88%86%E6%9E%90/"/>
    <url>/2022/03/15/ffmpeg/2022-03-15-ffplay-frame%20queue%20%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>参考：  <a href="https://zhuanlan.zhihu.com/p/43564980">ffplay frame queue分析</a></p><h2 id="FrameQueue数据结构"><a href="#FrameQueue数据结构" class="headerlink" title="FrameQueue数据结构"></a>FrameQueue数据结构</h2><p>ffplay 定义了 FrameQueue 来管理解码后的音频，视频以及字幕。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Common struct for handling all types of decoded data and allocated render buffers. */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Frame</span> &#123;</span><br>    AVFrame *frame;       <span class="hljs-comment">//audio/video frame</span><br>    AVSubtitle sub;       <span class="hljs-comment">//字幕</span><br>    <span class="hljs-type">int</span> serial;           <span class="hljs-comment">//序列号</span><br>    <span class="hljs-type">double</span> pts;           <span class="hljs-comment">/* presentation timestamp for the frame */</span><br>    <span class="hljs-type">double</span> duration;      <span class="hljs-comment">/* estimated duration of the frame */</span><br>    <span class="hljs-type">int64_t</span> pos;          <span class="hljs-comment">/* byte position of the frame in the input file */</span><br>    <span class="hljs-type">int</span> width;<br>    <span class="hljs-type">int</span> height;<br>    <span class="hljs-type">int</span> format;<br>    AVRational sar;       <span class="hljs-comment">//video aspect ratio</span><br>    <span class="hljs-type">int</span> uploaded;<br>    <span class="hljs-type">int</span> flip_v;           <span class="hljs-comment">//video，是否应该在垂直方向翻转</span><br>&#125; Frame;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FrameQueue</span> &#123;</span><br>    Frame <span class="hljs-built_in">queue</span>[FRAME_QUEUE_SIZE];  <span class="hljs-comment">//frame数组，环形buffer</span><br>    <span class="hljs-type">int</span> rindex;                     <span class="hljs-comment">//读指针，指向下一个可读的位置</span><br>    <span class="hljs-type">int</span> windex;                     <span class="hljs-comment">//写指针，指向下一个可写的位置</span><br>    <span class="hljs-type">int</span> size;                       <span class="hljs-comment">//队列元素个数</span><br>    <span class="hljs-type">int</span> max_size;                   <span class="hljs-comment">//队列容量</span><br>    <span class="hljs-type">int</span> keep_last;                  <span class="hljs-comment">//是否在队列中保留上一个已读的元素</span><br>    <span class="hljs-type">int</span> rindex_shown;               <span class="hljs-comment">//标记rindex指向的元素是否已经展示（已读），keep_last为1时生效。</span><br>    SDL_mutex *mutex;               <span class="hljs-comment">//锁,用于安全访问</span><br>    SDL_cond *cond;                 <span class="hljs-comment">//条件变量，用于控制读取和写入，防止overrun和underflow</span><br>    PacketQueue *pktq;              <span class="hljs-comment">//该frame queue 对应的 pkt queue</span><br>&#125; FrameQueue;<br></code></pre></td></tr></table></figure><blockquote><p>Frame的设计试图用一个结构体“融合”3种数据：视频、音频、字幕，虽然AVFrame既可以表示视频又可以表示音频，但在融合字幕时又需要引入AVSubtitle，以及一些其他字段，如width&#x2F;height等来补充AVSubtitle，所以整个结构体看起来很“拼凑”（甚至还有视频专用的flip_v字段）</p><p>FrameQueue的设计理念：</p><ol><li>高效率的读写模型</li><li>高效的内存模型（节点内存以数组形式预分配，无需动态分配）</li><li>环形缓冲区设计，同时可以访问上一读节点</li></ol></blockquote><h2 id="队列的操作："><a href="#队列的操作：" class="headerlink" title="队列的操作："></a>队列的操作：</h2><h3 id="队列初始化"><a href="#队列初始化" class="headerlink" title="队列初始化"></a>队列初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">frame_queue_init</span><span class="hljs-params">(FrameQueue *f, PacketQueue *pktq, <span class="hljs-type">int</span> max_size, <span class="hljs-type">int</span> keep_last)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(FrameQueue));<br>    <span class="hljs-comment">//互斥锁创建</span><br>    <span class="hljs-keyword">if</span> (!(f-&gt;mutex = SDL_CreateMutex())) &#123;<br>        av_log(<span class="hljs-literal">NULL</span>, AV_LOG_FATAL, <span class="hljs-string">&quot;SDL_CreateMutex(): %s\n&quot;</span>, SDL_GetError());<br>        <span class="hljs-keyword">return</span> AVERROR(ENOMEM);<br>    &#125;<br>    <span class="hljs-comment">//条件变量创建</span><br>    <span class="hljs-keyword">if</span> (!(f-&gt;cond = SDL_CreateCond())) &#123;<br>        av_log(<span class="hljs-literal">NULL</span>, AV_LOG_FATAL, <span class="hljs-string">&quot;SDL_CreateCond(): %s\n&quot;</span>, SDL_GetError());<br>        <span class="hljs-keyword">return</span> AVERROR(ENOMEM);<br>    &#125;<br>    <span class="hljs-comment">//设置对应的pkt queue</span><br>    f-&gt;pktq = pktq;<br>    <span class="hljs-comment">//设置队列的容量，视频 3, 音频 9，字幕 16</span><br>    f-&gt;max_size = FFMIN(max_size, FRAME_QUEUE_SIZE);<br>    <span class="hljs-comment">//是否保留最后一个位置，视频音频保留，字幕不保留</span><br>    f-&gt;keep_last = !!keep_last;<br>    <span class="hljs-comment">//给队列中的每个节点对应的frame初始化</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; f-&gt;max_size; i++)<br>        <span class="hljs-keyword">if</span> (!(f-&gt;<span class="hljs-built_in">queue</span>[i].frame = av_frame_alloc()))<br>            <span class="hljs-keyword">return</span> AVERROR(ENOMEM);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化队列的内存，创建锁，条件变量，保存pkt queue，设置队列的容量，keep_last标志位初始化。初始化队列节点，给队列中的每个节点对应的frame调用av_frame_alloc分配内存。</p><p>参数max_size用来设置队列的容量，最大不超过FRAME_QUEUE_SIZE。其中视频队列的容量为3，音频9，字幕16。FRAME_QUEUE_SIZE定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> VIDEO_PICTURE_QUEUE_SIZE 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUBPICTURE_QUEUE_SIZE 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SAMPLE_QUEUE_SIZE 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FRAME_QUEUE_SIZE FFMAX(SAMPLE_QUEUE_SIZE, FFMAX(VIDEO_PICTURE_QUEUE_SIZE, SUBPICTURE_QUEUE_SIZE))</span><br></code></pre></td></tr></table></figure><p>展开后FRAME_QUEUE_SIZE的值为16。</p><p>keep_last是一个bool值，表示是否在环形缓冲区的读写过程中保留最后一个读节点不被覆写。<code>f-&gt;keep_last = !!keep_last;</code>里的双感叹号是C中的一种技巧，旨在让int参数规整为0&#x2F;1的“bool值”。视频和音频会保留最后一个节点，而字幕不保留。</p><h3 id="队列销毁"><a href="#队列销毁" class="headerlink" title="队列销毁"></a>队列销毁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frame_queue_destory</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; f-&gt;max_size; i++) &#123;<br>        Frame *vp = &amp;f-&gt;<span class="hljs-built_in">queue</span>[i];<br>        <span class="hljs-comment">//对每个节点调用frame_queue_unref_item</span><br>        frame_queue_unref_item(vp);<br>        <span class="hljs-comment">//调用av_frame_free释放frame的内存</span><br>        av_frame_free(&amp;vp-&gt;frame);<br>    &#125;<br>    SDL_DestroyMutex(f-&gt;mutex);<br>    SDL_DestroyCond(f-&gt;cond);<br>&#125;<br></code></pre></td></tr></table></figure><p>较为重要的是queue元素的释放。分两步，分别是<code>frame_queue_unref_item</code>和<code>av_frame_free</code>。其中<code>av_frame_free</code>与初始化中的<code>av_frame_alloc</code>对应，用于释放AVFrame.</p><p><code>frame_queue_unref_item</code>的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frame_queue_unref_item</span><span class="hljs-params">(Frame *vp)</span><br>&#123;<br>    av_frame_unref(vp-&gt;frame);<span class="hljs-comment">//引用计数-1</span><br>    avsubtitle_free(&amp;vp-&gt;sub);<span class="hljs-comment">//sub关联的内存释放</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>frame_queue_unref_item</code>释放的内存都是<strong>关联</strong>的内存，而非结构体自身内存。</p><p>AVFrame内部有许多的AVBufferRef类型字段，而AVBufferRef只是AVBuffer的引用，AVBuffer通过引用计数自动管理内存（简易垃圾回收机制）。因此AVFrame在不需要的时候，需要通过<code>av_frame_unref</code>减少引用计数。</p><blockquote><p>关于AVBufferRef的内存管理机制，可以参考这篇文章： <a href="%5B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3FFMPEG-AVBuffer/AVBufferRef/AVBufferPool_muyuyuzhong%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/muyuyuzhong/article/details/79381152)">深入理解FFMPEG-AVBuffer&#x2F;AVBufferRef&#x2F;AVBufferPool</a></p></blockquote><h3 id="队列写操作"><a href="#队列写操作" class="headerlink" title="队列写操作"></a>队列写操作</h3><p>FrameQueue的“写”分两步，先调用<code>frame_queue_peek_writable</code>获取一个可写节点，在对节点操作结束后，调用<code>frame_queue_push</code>告知FrameQueue“存入”该节点。</p><blockquote><p>阅读提示：<br>在ffplay中，FrameQueue始终是一个线程写，另一个线程读。也就是只有一个读线程，不会有其他读线程竞争读；只有一个写线程，不会有其他线程竞争写；唯一需要的是读与写线程间的同步。FrameQueue的整个优化和设计思路正是基于这一点的。</p></blockquote><p>先看<code>frame_queue_peek_writable</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> Frame *<span class="hljs-title function_">frame_queue_peek_writable</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-comment">/* wait until we have space to put a new frame */</span><br>    SDL_LockMutex(f-&gt;mutex);<br>    <span class="hljs-keyword">while</span> (f-&gt;size &gt;= f-&gt;max_size &amp;&amp;<br>           !f-&gt;pktq-&gt;abort_request) &#123;<br>        <span class="hljs-comment">//等待有空间可以写，才继续执行</span><br>        SDL_CondWait(f-&gt;cond, f-&gt;mutex);<br>    &#125;<br>    SDL_UnlockMutex(f-&gt;mutex);<br><br>    <span class="hljs-keyword">if</span> (f-&gt;pktq-&gt;abort_request)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//返回f-&gt;windex对应的frame</span><br>    <span class="hljs-keyword">return</span> &amp;f-&gt;<span class="hljs-built_in">queue</span>[f-&gt;windex];<br>&#125;<br></code></pre></td></tr></table></figure><p>整个函数分3步：</p><ol><li>加锁情况下，等待直到队列有空余空间可写（<code>f-&gt;size &lt; f-&gt;max_size</code>）</li><li>如果有退出请求（<code>f-&gt;pktq-&gt;abort_request</code>），则返回NULL</li><li>返回<code>windex</code>位置的元素（<code>windex</code>指向当前应写位置）</li></ol><blockquote><p>为什么这里锁的范围不是整个函数呢？这是为了减小锁的范围，以提高效率。而之所以可以在无锁的情况下安全访问queue 字段，是因为上文中提到的单读单写的特殊场景。首先，queue是一个预先分配好的数组，因此queue本身不发生变化，可以安全访问；接着queue内的元素，读和写不存在重叠，即windex和rindex不会重叠。</p><p>关于“读和写不存在重叠”，仔细看看。因为queue数组被当做一个环形缓冲区使用，那么的确存在underrun和overrun的情况，即读过快，或写过快的情况，这时如果不加控制，就会呈现缓冲区覆盖。</p><p>FrameQueue的精明之处在于，先通过size判断当前缓冲区内空间是否够写，或者够读，比如这里先通过一个循环的条件等待，判断<code>f-&gt;size &gt;= f-&gt;max_size</code>，如果<code>f-&gt;size &gt;= f-&gt;max_size</code>，那么说明队列中的节点已经写满，也就是已经overrun了，此时如果再写，肯定会覆写未读数据，那么就需要继续等待。当无需等待时，windex指向的内存一定是已经读过的（除非代码异常了）。</p><p>调用<code>frame_queue_peek_writable</code>取到Frame指针后，就可以对Frame内的字段自由改写，因为只有一个写进程，且无需担心读进程覆写。如上分析，读进程要读一个节点时，也会先判断underrun的情况）。</p></blockquote><p>一般步骤是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Frame* vp = frame_queue_peek_writable(q);<br><span class="hljs-comment">//将要存储的数据写入frame字段，比如：</span><br>av_frame_move_ref(vp-&gt;frame, src_frame);<br><span class="hljs-comment">//存入队列</span><br>frame_queue_push(q);<br></code></pre></td></tr></table></figure><p><code>frame_queue_push</code>怎么知道要push的是这里的vp呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frame_queue_push</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (++f-&gt;windex == f-&gt;max_size)<br>        f-&gt;windex = <span class="hljs-number">0</span>;<br>    SDL_LockMutex(f-&gt;mutex);<br>    f-&gt;size++;<br>    SDL_CondSignal(f-&gt;cond);<br>    SDL_UnlockMutex(f-&gt;mutex);<br>&#125;<br></code></pre></td></tr></table></figure><p>答案是push当前windex节点。看<code>frame_queue_push</code>函数，执行两个步骤：</p><ol><li>windex加1，如果超过max_size，则回环为0</li><li>加锁情况下大小加1.</li></ol><blockquote><p>因为FrameQueue是基于固定长度的数组实现的队列，与链表队列不同，其节点在初始化的时候已经在队列中了，push所要做的只是通过某种标志记录该节点是否是写入未读的。ffplay的做法是对windex加1，将写指针移动到下一个元素，凡是windex“之前”的节点，都是写过的。（至于是否可读，rindex知道；至于后续有多少空间可写，size知道）</p></blockquote><h3 id="队列读操作"><a href="#队列读操作" class="headerlink" title="队列读操作"></a>队列读操作</h3><p>和写一样，FrameQueue的读也分两步。<code>frame_queue_peek_readable</code>和<code>frame_queue_next</code>。相比写要复杂一点的是 ，读的代码多考虑另一个特性，即允许保留上一读节点。</p><p><code>frame_queue_peek_readable</code>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> Frame *<span class="hljs-title function_">frame_queue_peek_readable</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-comment">/* wait until we have a readable a new frame */</span><br>    SDL_LockMutex(f-&gt;mutex);<br>    <span class="hljs-keyword">while</span> (f-&gt;size - f-&gt;rindex_shown &lt;= <span class="hljs-number">0</span> &amp;&amp;<br>           !f-&gt;pktq-&gt;abort_request) &#123;<br>        SDL_CondWait(f-&gt;cond, f-&gt;mutex);<br>    &#125;<br>    SDL_UnlockMutex(f-&gt;mutex);<br><br>    <span class="hljs-keyword">if</span> (f-&gt;pktq-&gt;abort_request)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> &amp;f-&gt;<span class="hljs-built_in">queue</span>[(f-&gt;rindex + f-&gt;rindex_shown) % f-&gt;max_size];<br>&#125;<br></code></pre></td></tr></table></figure><p>和<code>frame_queue_peek_writable</code>类似，分三步:</p><ol><li>加锁情况下，判断是否有可读节点（<code>f-&gt;size - f-&gt;rindex_shown &gt; 0</code>)</li><li>如果有退出请求，则返回NULL</li><li>读取当前可读节点<code>(f-&gt;rindex + f-&gt;rindex_shown) % f-&gt;max_size</code></li></ol><p><code>rindex_shown</code>有些干扰代码分析，我们先看不支持keep_last的情况（只需要在初始化的时候传入keep_last &#x3D; 0），此事<code>rindex_shown</code>始终为0，所以，<code>frame_queue_peek_readable</code>简化如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> Frame *<span class="hljs-title function_">frame_queue_peek_readable</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-comment">/* wait until we have a readable a new frame */</span><br>    SDL_LockMutex(f-&gt;mutex);<br>    <span class="hljs-keyword">while</span> (f-&gt;size &lt;= <span class="hljs-number">0</span> &amp;&amp;<br>           !f-&gt;pktq-&gt;abort_request) &#123;<br>        SDL_CondWait(f-&gt;cond, f-&gt;mutex);<br>    &#125;<br>    SDL_UnlockMutex(f-&gt;mutex);<br><br>    <span class="hljs-keyword">if</span> (f-&gt;pktq-&gt;abort_request)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> &amp;f-&gt;<span class="hljs-built_in">queue</span>[f-&gt;rindex];<br>&#125;<br><br></code></pre></td></tr></table></figure><p>和peek_writable几乎是一一对应的。就不分析了。</p><p>在简化版本上理解引入<code>rindex_shown</code>的代码，我们需要先理解<code>rindex_shown</code>。<code>rindex_shown</code>的意思是<code>rindex</code>指向的节点是否被读过，如果被读过， 为1，反之，为0。这一行为，体现在<code>frame_queue_next</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">frame_queue_next</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;   <br>    <span class="hljs-comment">//如果支持keep_last，并且f-&gt;rindex_shown为0, 将rindex_shown设置为1，返回</span><br>    <span class="hljs-keyword">if</span> (f-&gt;keep_last &amp;&amp; !f-&gt;rindex_shown) &#123;<br>        f-&gt;rindex_shown = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//否则，移动rindex指针，并减小size</span><br>    frame_queue_unref_item(&amp;f-&gt;<span class="hljs-built_in">queue</span>[f-&gt;rindex]);<br>    <span class="hljs-keyword">if</span> (++f-&gt;rindex == f-&gt;max_size)<br>        f-&gt;rindex = <span class="hljs-number">0</span>;<br>    SDL_LockMutex(f-&gt;mutex);<br>    f-&gt;size--;<br>    SDL_CondSignal(f-&gt;cond);<br>    SDL_UnlockMutex(f-&gt;mutex);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>frame_queue_next</code>用于在读完一个节点后调用，用于标记一个节点已经被读过。</p><p>与写过程类似，读过程可以描述为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Frame* vp = frame_queue_peek_readable(f);<br><span class="hljs-comment">//读取vp的数据，比如</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pict_type=%d\n&quot;</span>, vp-&gt;frame-&gt;pict_type);<br>frame_queue_next(f);<br></code></pre></td></tr></table></figure><p><code>frame_queue_next</code>比<code>frame_queue_push</code>略复杂，我们要分析两个行为：标记一个节点为已读，以及<code>rindex_shown</code>的赋值。</p><p>标记一个节点为已读于标记一个节点为已写是类似的，执行两个步骤：</p><ol><li>rindex加1，如果超过max_size，则回环为0</li><li>加锁情况下大小减1.</li></ol><p>特别的是，对于以及读过的节点，需要调用<code>frame_queue_unref_item</code>释放关联内存。</p><p>执行rindex操作前，需要先判断<code>rindex_shown</code>的值，如果为0，则赋1。这么做的意图不妨画图分析：</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16473273492201647327349203.png"></p><p>这里模拟了从初始化开始的2次“读”。</p><p>还没开始读，rindex和rindex_shown均为0。这时要peek的读节点是节点0(图中黑色块）。</p><p>第一次读，调用next，满足条件<code>f-&gt;keep_last &amp;&amp; !f-&gt;rindex_shown</code>，所以rindex仍然是0，而rindex_shown为1.此时节点0（灰色块）是已读节点，也是要keep的last节点，将要读的节点是节点1（黑色块）。（恰好是rindex+rindex_shown）</p><p>第二次读，peek了黑色块后，调用next，不满足条件<code>f-&gt;keep_last &amp;&amp; !f-&gt;rindex_shown</code>，所以rindex为1，而rindex_shown为2.此时节点1（灰色块）是last节点，节点2（黑色块）是将要读的节点。（也恰好是rindex+rindex_shown）</p><p>继续往后分析，会一直重复第二次读的情况，始终是rindex指向了last，而rindex_shown一直为1，rindex+rindex_shown刚好是将要读的节点。</p><p>至此，<code>frame_queue_next</code>的行为算是明确了。回头看看<code>frame_queue_peek_readable</code>。</p><p>步骤1中，判断无可读节点，用的是<code>f-&gt;size - f-&gt;rindex_shown &lt;= 0</code>，其实是以下代码的简化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (f-&gt;rindex_shown)<br>    <span class="hljs-keyword">return</span> f-&gt;size - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> f-&gt;size;<br></code></pre></td></tr></table></figure><p>只是C中用int模拟bool，刚好rindex_shown为true是1，所以可以简化为<code>`f-&gt;size - f-&gt;rindex_shown</code>.</p><p>步骤3中，取将要读的节点用的是<code>(f-&gt;rindex + f-&gt;rindex_shown) % f-&gt;max_size</code>，同样也是一个简化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//这段代码根据上图很容易推导</span><br><span class="hljs-keyword">if</span> (f-&gt;rindex_shown)<br>    <span class="hljs-keyword">return</span> (f-&gt;rindex + <span class="hljs-number">1</span>) % f-&gt;max_size; <span class="hljs-comment">//因为rindex加1后可能超过max_size，所以这里取余</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> f-&gt;rindex;<br></code></pre></td></tr></table></figure><p>以上，FrameQueue的读过程也分析完了。</p><p>为了支持灵活地读，还有一些辅助函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//读当前节点（上文中的用词是“将要读的节点”，也就是黑色块），与frame_queue_peek_readable等效，但没有检查是否有可读节点</span><br><span class="hljs-type">static</span> Frame *<span class="hljs-title function_">frame_queue_peek</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> &amp;f-&gt;<span class="hljs-built_in">queue</span>[(f-&gt;rindex + f-&gt;rindex_shown) % f-&gt;max_size];<br>&#125;<br><br><span class="hljs-comment">//读下一个节点</span><br><span class="hljs-type">static</span> Frame *<span class="hljs-title function_">frame_queue_peek_next</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> &amp;f-&gt;<span class="hljs-built_in">queue</span>[(f-&gt;rindex + f-&gt;rindex_shown + <span class="hljs-number">1</span>) % f-&gt;max_size];<br>&#125;<br><br><span class="hljs-comment">//读上一个节点</span><br><span class="hljs-type">static</span> Frame *<span class="hljs-title function_">frame_queue_peek_last</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> &amp;f-&gt;<span class="hljs-built_in">queue</span>[f-&gt;rindex];<br>&#125;<br><br><span class="hljs-comment">/* return the number of undisplayed frames in the queue */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">frame_queue_nb_remaining</span><span class="hljs-params">(FrameQueue *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> f-&gt;size - f-&gt;rindex_shown;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现都比较简单，借助上图看下节点位置：</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16473274840541647327483583.png"></p><p>至此，FrameQueue的主体功能分析完了。从源码中可以看到FrameQueue是针对单读单写优化的高效的多线程模型，其设计思路不失为在C语言实践中可借鉴的一个好例子。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffplay packet queue 分析</title>
    <link href="/2022/03/14/ffmpeg/2022-03-14-ffplay-packet%20queue%20%20%E5%88%86%E6%9E%90/"/>
    <url>/2022/03/14/ffmpeg/2022-03-14-ffplay-packet%20queue%20%20%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://zhuanlan.zhihu.com/p/43295650">ffplay packet queue分析</a></p><hr><p>ffplay  用 PacketQueue 来保存解封装后的数据，即AVPacket。<br>定义MyAVPacketList表示队列中的元素，这里命名为MyAVPacketNode可能更合理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyAVPacketList</span> &#123;</span><br>    <span class="hljs-comment">//待解码的数据</span><br>    AVPacket *pkt;<br>    <span class="hljs-comment">//pkt序列号</span><br>    <span class="hljs-type">int</span> serial;<br>&#125; MyAVPacketList;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PacketQueue</span> &#123;</span><br>    <span class="hljs-comment">/* ffmpeg封装的队列数据结构，先入先出 */</span><br>    AVFifo *pkt_list;<br>    <span class="hljs-comment">/* 当前队里的pkt的数量 */</span><br>    <span class="hljs-type">int</span> nb_packets;<br>    <span class="hljs-comment">/* 当前所有节点占用的总内存大小 */</span><br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-comment">/* 队列所有节点的合计时长 */</span><br>    <span class="hljs-type">int64_t</span> duration;<br>    <span class="hljs-comment">/* 是否要中止队列操作，用于安全快速退出播放 */</span><br>    <span class="hljs-type">int</span> abort_request;<br>    <span class="hljs-comment">//序列号，和MyAVPacketList的serial作用相同，但改变的时序稍微有点不同</span><br>    <span class="hljs-type">int</span> serial;<br>    <span class="hljs-comment">//用于维持PacketQueue的多线程安全(SDL_mutex可以按pthread_mutex_t理解）</span><br>    SDL_mutex *mutex;<br>    <span class="hljs-comment">//用于读、写线程相互通知(SDL_cond可以按pthread_cond_t理解)</span><br>    SDL_cond *cond;<br>&#125; PacketQueue;<br></code></pre></td></tr></table></figure><p>结构体的第一个成员是AVFifo指针类型的。FFmpeg 定义了AVFifo结构体和操作这个结构体的一系列函数，实现了队列的数据结构。PacketQueue 是封装了AVFifo 实例，来管理MyAVPacketList，进而管理解封装后的AVPacket的。</p><h2 id="AVFifo"><a href="#AVFifo" class="headerlink" title="AVFifo"></a>AVFifo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AVFifo</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span> *buffer;<br><br>    <span class="hljs-type">size_t</span> elem_size, nb_elems;<br>    <span class="hljs-type">size_t</span> offset_r, offset_w;<br>    <span class="hljs-comment">// distinguishes the ambiguous situation offset_r == offset_w</span><br>    <span class="hljs-type">int</span>    is_empty;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br>    <span class="hljs-type">size_t</span>       auto_grow_limit;<br>&#125;;<br></code></pre></td></tr></table></figure><p>操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">AVFifo *<span class="hljs-title">av_fifo_alloc2</span><span class="hljs-params">(<span class="hljs-type">size_t</span> elems, <span class="hljs-type">size_t</span> elem_size,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">av_fifo_write</span><span class="hljs-params">(AVFifo *f, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nb_elems)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">av_fifo_read</span><span class="hljs-params">(AVFifo *f, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> nb_elems)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">av_fifo_freep2</span><span class="hljs-params">(AVFifo **f)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><p>av_fifo_alloc2 创建队列</p></li><li><p>av_fifo_read 从队列中读一个元素，队列长度减 1</p></li><li><p>av_fifo_write 给队列添加一个元素， 队列长度加1 </p></li><li><p>av_fifo_freep2 销毁队列</p></li></ul><h1 id="PacketQueue-操作函数"><a href="#PacketQueue-操作函数" class="headerlink" title="PacketQueue 操作函数"></a>PacketQueue 操作函数</h1><p><code>PacketQueue</code>操作提供以下方法：</p><ul><li><p>packet_queue_init:  初始化</p></li><li><p>packet_queue_destroy： 销毁</p></li><li><p>packet_queue_start： 开启</p></li><li><p>packet_queue_abort： 终止</p></li><li><p>packet_queue_get： 获取一个节点</p></li><li><p>packet_queue_put： 存入一个节点</p></li><li><p>packet_queue_put_nullpacket： 存入一个空节点</p></li><li><p>packet_queue_flush： 清除队列内所有的节点</p></li></ul><h2 id="packet-queue-init"><a href="#packet-queue-init" class="headerlink" title="packet_queue_init"></a>packet_queue_init</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> packet_queue_init(PacketQueue *q)<br>&#123;<br>    memset(q, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(PacketQueue));<br>    q-&gt;pkt_list = av_fifo_alloc2(<span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(MyAVPacketList), <span class="hljs-built_in">AV_FIFO_FLAG_AUTO_GROW</span>);<br>    <span class="hljs-keyword">if</span> (!q-&gt;pkt_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br>    q-&gt;mutex = SDL_CreateMutex();<br>    <span class="hljs-keyword">if</span> (!q-&gt;mutex) &#123;<br>        av_log(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">AV_LOG_FATAL</span>, <span class="hljs-string">&quot;SDL_CreateMutex(): %s\n&quot;</span>, SDL_GetError());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br>    &#125;<br>    q-&gt;cond = SDL_CreateCond();<br>    <span class="hljs-keyword">if</span> (!q-&gt;cond) &#123;<br>        av_log(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">AV_LOG_FATAL</span>, <span class="hljs-string">&quot;SDL_CreateCond(): %s\n&quot;</span>, SDL_GetError());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br>    &#125;<br>    q-&gt;abort_request = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>内部调用av_fifo_alloc2 创建AVFifo 队列实例</p></li><li><p>创建mutex用于队列安全访问</p></li><li><p>创建cond 用于队列等待和唤醒控制</p></li><li><p>初始设置abort_request &#x3D; 1</p></li></ol><h2 id="packet-queue-destroy"><a href="#packet-queue-destroy" class="headerlink" title="packet_queue_destroy"></a>packet_queue_destroy</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">static void <span class="hljs-built_in">packet_queue_destroy</span>(PacketQueue *q)<br>&#123;<br>    <span class="hljs-built_in">packet_queue_flush</span>(q);<br>    <span class="hljs-built_in">av_fifo_freep2</span>(&amp;q-&gt;pkt_list);<br>    <span class="hljs-built_in">SDL_DestroyMutex</span>(q-&gt;mutex);<br>    <span class="hljs-built_in">SDL_DestroyCond</span>(q-&gt;cond);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>调用packet_queue_flush清空队列中的元素</p></li><li><p>销毁AVFifo 队列实例</p></li><li><p>销毁mutex</p></li><li><p>销毁cond</p></li></ol><h2 id="packet-queue-start"><a href="#packet-queue-start" class="headerlink" title="packet_queue_start"></a>packet_queue_start</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">static void packet_queue_start(PacketQueue *q)<br>&#123;<br>    SDL_L<span class="hljs-function"><span class="hljs-title">ockMutex</span>(q-&gt;</span>mutex);<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>abort_request = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>serial++;<br>    SDL_U<span class="hljs-function"><span class="hljs-title">nlockMutex</span>(q-&gt;</span>mutex);<br>&#125;<br></code></pre></td></tr></table></figure><p>只是加锁，将abort_request设置为0，并且将serial加1，然后解锁。</p><h2 id="packet-queue-abort"><a href="#packet-queue-abort" class="headerlink" title="packet_queue_abort"></a>packet_queue_abort</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">static void packet_queue_abort(PacketQueue *q)<br>&#123;<br>    SDL_L<span class="hljs-function"><span class="hljs-title">ockMutex</span>(q-&gt;</span>mutex);<br><br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>abort_request = <span class="hljs-number">1</span>;<br><br>    SDL_C<span class="hljs-function"><span class="hljs-title">ondSignal</span>(q-&gt;</span>cond);<br><br>    SDL_U<span class="hljs-function"><span class="hljs-title">nlockMutex</span>(q-&gt;</span>mutex);<br>&#125;<br></code></pre></td></tr></table></figure><p>加锁，将abort_request设置为1，标记为队列被终止。</p><p>同时唤醒等待条件变量的线程，使其正常退出,   解锁。</p><h2 id="packet-queue-get"><a href="#packet-queue-get" class="headerlink" title="packet_queue_get"></a>packet_queue_get</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* return &lt; 0 if aborted, 0 if no packet and &gt; 0 if packet.  */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">packet_queue_get</span><span class="hljs-params">(PacketQueue *q, AVPacket *pkt, <span class="hljs-type">int</span> block, <span class="hljs-type">int</span> *serial)</span><br>&#123;<br>    MyAVPacketList pkt1;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-comment">//加锁</span><br>    SDL_LockMutex(q-&gt;mutex);<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">if</span> (q-&gt;abort_request) &#123;<br>            <span class="hljs-comment">//队列终止了, 设置返回值为-1</span><br>            ret = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//从pkt_list中读出一个节点，放入MyAVPacketList中，同时更新队列的信息</span><br>        <span class="hljs-keyword">if</span> (av_fifo_read(q-&gt;pkt_list, &amp;pkt1, <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//更新队列长度</span><br>            q-&gt;nb_packets--;<br>            <span class="hljs-comment">//更新队列占用内存大小</span><br>            q-&gt;size -= pkt1.pkt-&gt;size + <span class="hljs-keyword">sizeof</span>(pkt1);<br>            <span class="hljs-comment">//更新队列时长</span><br>            q-&gt;duration -= pkt1.pkt-&gt;duration;<br>            <span class="hljs-comment">//转移pkt1.pkt的内容到pkt中</span><br>            av_packet_move_ref(pkt, pkt1.pkt);<br>            <span class="hljs-comment">//设置serial的值</span><br>            <span class="hljs-keyword">if</span> (serial)<br>                *serial = pkt1.serial;<br>            <span class="hljs-comment">//pkt1.pkt内容已近被转移，释放pkt1.pkt的内存</span><br>            av_packet_free(&amp;pkt1.pkt);<br>            <span class="hljs-comment">//返回值&gt;0,代表从队列获取到了元素</span><br>            ret = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!block) &#123;<br>            <span class="hljs-comment">//没有获取到元素，但是调用放要求不阻塞，设置返回值为0，跳出循环</span><br>            ret = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//没读到元素，阻塞等待有元素可以获取</span><br>            SDL_CondWait(q-&gt;cond, q-&gt;mutex);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//解锁</span><br>    SDL_UnlockMutex(q-&gt;mutex);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>从队列中获取一个元素</p><ol><li><p>加锁</p></li><li><p>获取成功，队列元素减少，更新队列信息</p></li><li><p>获取失败，要求不阻塞，立马返回</p></li><li><p>获取失败，要求阻塞，调用wait进入等待状态</p></li><li><p>解锁</p></li></ol><h2 id="packet-queue-put"><a href="#packet-queue-put" class="headerlink" title="packet_queue_put"></a>packet_queue_put</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xl">static int packet_queue_put_private(PacketQueue *q, AVPacket *pkt)<br>&#123;<br>    MyAVPacketList pkt1;<br>    int ret;<br>    <span class="hljs-comment">//如果队列被终止，返回-1</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (q-&gt;</span>abort_request)<br>       return -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//给节点填充数据</span><br>    pkt1.pkt = pkt;<br>    <span class="hljs-comment">//设置pkt的序列号</span><br>    <span class="hljs-function"><span class="hljs-title">pkt1</span>.serial = q-&gt;</span>serial;<br>    <span class="hljs-comment">//将节点添加到队列</span><br>    <span class="hljs-function"><span class="hljs-title">ret</span> = av_fifo_write(q-&gt;</span>pkt_list, &amp;pkt1, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>        return ret;<br>    <span class="hljs-comment">//更新队列大小</span><br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>nb_packets++;<br>    <span class="hljs-comment">//更新队列内存大小，添加节点size(pkt内存的大小 + 节点数据大小)</span><br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">size</span> += pkt1.pkt-&gt;</span>size + sizeof(pkt1);<br>    <span class="hljs-comment">//更新队列的总时长</span><br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">duration</span> += pkt1.pkt-&gt;</span>duration;<br>    <span class="hljs-comment">/* <span class="hljs-doctag">XXX:</span> should duplicate packet data in DV case */</span><br>    SDL_C<span class="hljs-function"><span class="hljs-title">ondSignal</span>(q-&gt;</span>cond);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br>static int packet_queue_put(PacketQueue *q, AVPacket *pkt)<br>&#123;<br>    AVPacket *pkt1;<br>    int ret;<br>    <span class="hljs-comment">//创建pkt1</span><br>    pkt1 = av_packet_alloc();<br>    <span class="hljs-keyword">if</span> (!pkt1) &#123;<br>        <span class="hljs-comment">//创建pkt1失败，取消引用pkt</span><br>        av_packet_unref(pkt);<br>        return -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//将pkt内容转移到pkt1中</span><br>    av_packet_move_ref(pkt1, pkt);<br>    <span class="hljs-comment">//加锁操加入队列</span><br>    SDL_L<span class="hljs-function"><span class="hljs-title">ockMutex</span>(q-&gt;</span>mutex);<br>    <span class="hljs-comment">//调用packet_queue_put_private将pkt1放入队列中</span><br>    ret = packet_queue_put_private(q, pkt1);<br>    SDL_U<span class="hljs-function"><span class="hljs-title">nlockMutex</span>(q-&gt;</span>mutex);<br><br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//放入队列失败，需要取消引用pkt1</span><br>        av_packet_free(&amp;pkt1);<br><br>    return ret;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>将AVPacket封装为MyAVPacketList，保存在内部的队列中</p></li><li><p>队列长度加1，同时更新时长，内存占用等信息</p></li><li><p>packet_queue_put内部调用packet_queue_put_private来完成相关的操作</p></li></ol><h2 id="packet-queue-put-nullpacket"><a href="#packet-queue-put-nullpacket" class="headerlink" title="packet_queue_put_nullpacket"></a>packet_queue_put_nullpacket</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//播放完了，从文件中读出了空的pkt，空的pkt丢给解码器的时候，会冲洗解码器，将解码器剩余的额数据读出来</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">packet_queue_put_nullpacket</span><span class="hljs-params">(PacketQueue *q, AVPacket *pkt, <span class="hljs-keyword">int</span> stream_index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//设置pkt对应的stream_index </span><br>    pkt-&gt;stream_index = stream_index;<br>    <span class="hljs-comment">//添加有一个内容为空的pkt到队列中</span><br>    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">packet_queue_put</span><span class="hljs-params">(q, pkt)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>给队列添加一个内容为空的pkt</p></li><li><p>设置pkt对应的stream_index，追加到队列中</p></li></ol><h2 id="packet-queue-flush"><a href="#packet-queue-flush" class="headerlink" title="packet_queue_flush"></a>packet_queue_flush</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xl">static void packet_queue_flush(PacketQueue *q)<br>&#123;<br>    MyAVPacketList pkt1;<br>    <span class="hljs-comment">//加锁</span><br>    SDL_L<span class="hljs-function"><span class="hljs-title">ockMutex</span>(q-&gt;</span>mutex);<br>    <span class="hljs-comment">//从内部队列循环获取元素，存入pkt1中</span><br>    <span class="hljs-function"><span class="hljs-title">while</span> (av_fifo_read(q-&gt;</span>pkt_list, &amp;pkt1, <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//释放MyAVPacketList中的AVPacket的内存</span><br>        av_packet_free(&amp;pkt1.pkt);<br>    <span class="hljs-comment">//更新队列信息</span><br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>nb_packets = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>size = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>duration = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//serial加1</span><br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>serial++;<br>    <span class="hljs-comment">//解锁</span><br>    SDL_U<span class="hljs-function"><span class="hljs-title">nlockMutex</span>(q-&gt;</span>mutex);<br>&#125;<br></code></pre></td></tr></table></figure><p> 清空队列，释放节点的内存，更新队列信息。</p><p>而对于serial的操作不是设置为0，而是在原来的基础上增加了1，为什么呢？</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>ffplay 用PacketQueue来保存解封装后的AVPacket</p></li><li><p>PacketQueue对元素的操作，依赖于内部基于ffmpeg AVFifo的队列实例</p></li><li><p>PacketQueue通过mutex来保证线层安全</p></li><li><p>PacketQueue通过条件变量来控制写入和读取的顺序</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake find_package</title>
    <link href="/2022/03/13/cmake/2022-03-13-cmake%20find_package/"/>
    <url>/2022/03/13/cmake/2022-03-13-cmake%20find_package/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><p>官方文档  <a href="https://cmake.org/cmake/help/latest/command/find_package.html#id3">find_package</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/97369704">Cmake之深入理解find_package()的用法</a></p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>通过find_package命令，可以找到三方库对应的头文件路径和库文件路径，不用手动管理这些路径了。例如要引用CURL库，在CMakeLists文件可以简单写成下面的形式</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(CURL)<br><span class="hljs-keyword">add_executable</span>(curltest curltest.cc)<br><span class="hljs-keyword">if</span>(CURL_FOUND)<br>    <span class="hljs-keyword">target_include_directories</span>(clib PRIVATE <span class="hljs-variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(curltest <span class="hljs-variable">$&#123;CURL_LIBRARY&#125;</span>)<br><span class="hljs-keyword">else</span>(CURL_FOUND)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR ”CURL library <span class="hljs-keyword">not</span> found”)<br><span class="hljs-keyword">endif</span>(CURL_FOUND)<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>find_package 有两种搜索模式</p><h3 id="Module-mode"><a href="#Module-mode" class="headerlink" title="Module mode"></a>Module mode</h3><p>在<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html#variable:CMAKE_MODULE_PATH" title="CMAKE_MODULE_PATH"><code>CMAKE_MODULE_PATH</code></a>指定的路径下搜索名为<code>Find&lt;PackageName&gt;.cmake</code>的文件</p><p>该文件提供了库对应的头文件和库文件路径。</p><h3 id="Config-mode"><a href="#Config-mode" class="headerlink" title="Config mode"></a>Config mode</h3><ul><li><p>搜索<code>&lt;lowercasePackageName&gt;-config.cmake</code>或者<code>&lt;PackageName&gt;Config.cmake</code></p></li><li><p>搜索<code>&lt;lowercasePackageName&gt;-config-version.cmake</code>或者<code>&lt;PackageName&gt;ConfigVersion.cmake</code></p></li></ul><p>如果找到</p><ul><li><p><code>&lt;PackageName&gt;_FOUND</code> 为true</p></li><li><p><code>&lt;PackageName&gt;_INCLUDE_DIR</code> 会被设置</p></li><li><p><code>&lt;PackageName&gt;_LIBRARY</code> 会被设置</p></li></ul><p>找不到</p><ul><li><code>&lt;PackageName&gt;_FOUND</code> 为false</li></ul><h2 id="如何写Find-cmake"><a href="#如何写Find-cmake" class="headerlink" title="如何写Find&lt;PackageName&gt;.cmake"></a>如何写<code>Find&lt;PackageName&gt;.cmake</code></h2><p><a href="https://github.com/WebAssembly/wasmint/blob/master/cmake/FindSDL2.cmake">wasmint&#x2F;FindSDL2.cmake at master · WebAssembly&#x2F;wasmint · GitHub</a></p><ol><li><p>调用<a href="https://cmake.org/cmake/help/latest/command/find_path.html">find_path</a>找头文件路径</p></li><li><p>调用<a href="https://cmake.org/cmake/help/latest/command/find_library.html">find_library</a>找库的路径</p></li><li><p>通过<a href="https://cmake.org/cmake/help/latest/module/FindPackageHandleStandardArgs.html">FindPackageHandleStandardArgs</a>导出变量</p></li></ol><p>通过CMAKE_MODULE_PATH指定路径，就可以通过find_package命令使用该三方库的头文件和库文件了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg example 4.视频文件封装和编码</title>
    <link href="/2022/03/13/ffmpeg/2022-03-13-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%204/"/>
    <url>/2022/03/13/ffmpeg/2022-03-13-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%204/</url>
    
    <content type="html"><![CDATA[<p>今天学习 <code>ffmpeg/doc/examples/muxing.c</code></p><p>该程序接受一个参数，指定输出的文件的路径，例如<code>/tmp/mux.mp4</code>,<code>/tmp/mux.mov</code>。 文件名的后缀会用来推测生成的AVFormatContext的格式，如果没有指定，就使用<code>mpeg</code>。使用fmt 默认的视频编码器和音频编码器，编码10秒钟的音视频数据，交替写入文件。</p><p>操作封装需要操作<code>AVFormatContext</code></p><h2 id="创建AVFormatContext"><a href="#创建AVFormatContext" class="headerlink" title="创建AVFormatContext"></a>创建AVFormatContext</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//创建AVFormatContext， 根据文件后缀来推测output format</span><br>avformat_alloc_output_context2(&amp;oc, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, filename);<br><span class="hljs-keyword">if</span> (!oc) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not deduce output format from file extension: using MPEG.\n&quot;</span>);<br>    <span class="hljs-comment">//无法推测output format， 使用mpeg</span><br>    avformat_alloc_output_context2(&amp;oc, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;mpeg&quot;</span>, filename);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="给AVFormatContext添加-video-audio-stream"><a href="#给AVFormatContext添加-video-audio-stream" class="headerlink" title="给AVFormatContext添加 video &#x2F; audio stream"></a>给AVFormatContext添加 video &#x2F; audio stream</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (fmt-&gt;video_codec != AV_CODEC_ID_NONE) &#123;<br>    add_stream(&amp;video_st, oc, &amp;video_codec, fmt-&gt;video_codec);<br>    have_video = <span class="hljs-number">1</span>;<br>    encode_video = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (fmt-&gt;audio_codec != AV_CODEC_ID_NONE) &#123;<br>    add_stream(&amp;audio_st, oc, &amp;audio_codec, fmt-&gt;audio_codec);<br>    have_audio = <span class="hljs-number">1</span>;<br>    encode_audio = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看看add_stream做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Add an output stream. */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">add_stream</span><span class="hljs-params">(OutputStream *ost, AVFormatContext *oc,</span><br><span class="hljs-params">                       <span class="hljs-type">const</span> AVCodec **codec,</span><br><span class="hljs-params">                       <span class="hljs-keyword">enum</span> AVCodecID codec_id)</span><br>&#123;<br>    AVCodecContext *c;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">/* find the encoder */</span><br>    <span class="hljs-comment">//找到codec_id对应的编码器AVCodec</span><br>    *codec = avcodec_find_encoder(codec_id);<br>    <span class="hljs-comment">//创建pkt</span><br>    ost-&gt;tmp_pkt = av_packet_alloc();<br>    <span class="hljs-comment">//创建AVStream</span><br>    ost-&gt;st = avformat_new_stream(oc, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//设置stream的index</span><br>    ost-&gt;st-&gt;id = oc-&gt;nb_streams<span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">//创建编码器上下文</span><br>    c = avcodec_alloc_context3(*codec);<br>    <span class="hljs-comment">//保存编码器上下文</span><br>    ost-&gt;enc = c;<br><br>    <span class="hljs-keyword">switch</span> ((*codec)-&gt;type) &#123;<br>    <span class="hljs-keyword">case</span> AVMEDIA_TYPE_AUDIO:<br>         <span class="hljs-comment">//设置音频编码器上下文参数(码率，采样率，位深，声道布局等)</span><br>              ...<br>        <span class="hljs-comment">//设置stream的时间基</span><br>        ost-&gt;st-&gt;time_base = (AVRational)&#123; <span class="hljs-number">1</span>, c-&gt;sample_rate &#125;;<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> AVMEDIA_TYPE_VIDEO:<br>        <span class="hljs-comment">//设置编码器上下文的参数</span><br>        c-&gt;codec_id = codec_id;<br>        <span class="hljs-comment">//设置stream的时间基</span><br>        ost-&gt;st-&gt;time_base = (AVRational)&#123; <span class="hljs-number">1</span>, STREAM_FRAME_RATE &#125;;<br>        c-&gt;time_base       = ost-&gt;st-&gt;time_base;<br>        <span class="hljs-comment">//编码器码率，帧率，gop，分辨率, 设置</span><br>        ...<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">/* Some formats want stream headers to be separate. */</span><br>    <span class="hljs-comment">//处理一下stream header</span><br>    <span class="hljs-keyword">if</span> (oc-&gt;oformat-&gt;flags &amp; AVFMT_GLOBALHEADER)<br>        c-&gt;flags |= AV_CODEC_FLAG_GLOBAL_HEADER;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>根据codec_id找到AVCodec</p></li><li><p>调用avformat_new_stream创建stream</p></li><li><p>设置stream的index</p></li><li><p>根据AVCodec创建编码器的上下文，配置编码器参数</p></li><li><p>设置stream的time_base</p></li><li><p>处理一下 stream headers 的标志位</p></li></ol><h2 id="音视频流创建好了，下一步为写入准备"><a href="#音视频流创建好了，下一步为写入准备" class="headerlink" title="音视频流创建好了，下一步为写入准备"></a>音视频流创建好了，下一步为写入准备</h2><ol><li><p>上面创建好了stream, 创建了编码器上下文。open_video&#x2F;open_audio继续为写入做准备</p></li><li><p>准备完成就打开文件准备写入</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Now that all the parameters are set, we can open the audio and</span><br><span class="hljs-comment"> * video codecs and allocate the necessary encode buffers. */</span><br><span class="hljs-keyword">if</span> (have_video)<br>    open_video(oc, video_codec, &amp;video_st, opt);<br><br><span class="hljs-keyword">if</span> (have_audio)<br>    open_audio(oc, audio_codec, &amp;audio_st, opt);<br><br><span class="hljs-comment">//打印oc的信息</span><br>av_dump_format(oc, <span class="hljs-number">0</span>, filename, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* open the output file, if needed */</span><br><span class="hljs-keyword">if</span> (!(fmt-&gt;flags &amp; AVFMT_NOFILE)) &#123;<br>    <span class="hljs-comment">//打开文件</span><br>    ret = avio_open(&amp;oc-&gt;pb, filename, AVIO_FLAG_WRITE);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open &#x27;%s&#x27;: %s\n&quot;</span>, filename,<br>                av_err2str(ret));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看看open_video 做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">open_video</span><span class="hljs-params">(AVFormatContext *oc, <span class="hljs-type">const</span> AVCodec *codec,</span><br><span class="hljs-params">                       OutputStream *ost, AVDictionary *opt_arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br>    AVCodecContext *c = ost-&gt;enc;<br>    AVDictionary *opt = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//将opt_arg中的内容拷贝到opt中</span><br>    av_dict_copy(&amp;opt, opt_arg, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">/* open the codec */</span><br>    <span class="hljs-comment">//打开编码器</span><br>    ret = avcodec_open2(c, codec, &amp;opt);<br>    <span class="hljs-comment">//释放opt</span><br>    av_dict_free(&amp;opt);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open video codec: %s\n&quot;</span>, av_err2str(ret));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* allocate and init a re-usable frame */</span><br>    <span class="hljs-comment">//根据格式，宽高，创建一个复用的AVFrame</span><br>    ost-&gt;frame = alloc_picture(c-&gt;pix_fmt, c-&gt;width, c-&gt;height);<br>    <span class="hljs-keyword">if</span> (!ost-&gt;frame) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate video frame\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* If the output format is not YUV420P, then a temporary YUV420P</span><br><span class="hljs-comment">     * picture is needed too. It is then converted to the required</span><br><span class="hljs-comment">     * output format. */</span><br>    ost-&gt;tmp_frame = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (c-&gt;pix_fmt != AV_PIX_FMT_YUV420P) &#123;<br>        <span class="hljs-comment">//如果编码器对应的pix_fmt不是yuv420p， 创建一个yuv420p格式的AVFrame，保存在ost-&gt;tmp_frame中</span><br>        ost-&gt;tmp_frame = alloc_picture(AV_PIX_FMT_YUV420P, c-&gt;width, c-&gt;height);<br>        <span class="hljs-keyword">if</span> (!ost-&gt;tmp_frame) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate temporary picture\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* copy the stream parameters to the muxer */</span><br>    <span class="hljs-comment">//将编码器的参数拷贝到stream对应的编码参数中</span><br>    ret = avcodec_parameters_from_context(ost-&gt;st-&gt;codecpar, c);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not copy the stream parameters\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>打开编码器</p></li><li><p>申请资源，创建一个AVFrame用于存储编码前数据</p></li><li><p>调用avcodec_parameters_from_context将编码器的编码参数拷贝到stream的codecpar中</p></li></ol><h2 id="写音视频数据到文件"><a href="#写音视频数据到文件" class="headerlink" title="写音视频数据到文件"></a>写音视频数据到文件</h2><p>写文件头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Write the stream header, if any. */</span><br><span class="hljs-comment">//将流信息写文件头</span><br>ret = avformat_write_header(oc, &amp;opt);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error occurred when opening output file: %s\n&quot;</span>,<br>            av_err2str(ret));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>交替写音视频帧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (encode_video || encode_audio) &#123;<br>    <span class="hljs-comment">/* select the stream to encode */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     交替写入编码后的音频和视频帧</span><br><span class="hljs-comment">     视频写入结束或者video_st.next_pts &lt;= audio_st.next_pts, 写视频</span><br><span class="hljs-comment">     否则写音频</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (encode_video &amp;&amp;<br>        (!encode_audio || av_compare_ts(video_st.next_pts, video_st.enc-&gt;time_base,<br>                                        audio_st.next_pts, audio_st.enc-&gt;time_base) &lt;= <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-comment">//写入编码后的视频帧</span><br>        encode_video = !write_video_frame(oc, &amp;video_st);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//写入编码后的音频帧</span><br>        encode_audio = !write_audio_frame(oc, &amp;audio_st);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 写trailer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Write the trailer, if any. The trailer must be written before you</span><br><span class="hljs-comment"> * close the CodecContexts open when you wrote the header; otherwise</span><br><span class="hljs-comment"> * av_write_trailer() may try to use memory that was freed on</span><br><span class="hljs-comment"> * av_codec_close(). */</span><br>av_write_trailer(oc);<br></code></pre></td></tr></table></figure><p>关闭编码器，关闭文件，释放资源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Close each codec. */</span><br><span class="hljs-keyword">if</span> (have_video)<br>    close_stream(oc, &amp;video_st);<br><span class="hljs-keyword">if</span> (have_audio)<br>    close_stream(oc, &amp;audio_st);<br><br><span class="hljs-keyword">if</span> (!(fmt-&gt;flags &amp; AVFMT_NOFILE))<br>    <span class="hljs-comment">/* Close the output file. */</span><br>    avio_closep(&amp;oc-&gt;pb);<br><br><span class="hljs-comment">/* free the stream */</span><br>avformat_free_context(oc);<br></code></pre></td></tr></table></figure><h3 id="write-video-frame"><a href="#write-video-frame" class="headerlink" title="write_video_frame"></a>write_video_frame</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">static int write_video_frame(AVFormatContext *oc, OutputStream *ost)<br>&#123;<br>    <span class="hljs-function"><span class="hljs-title">return</span> write_frame(oc, ost-&gt;</span><span class="hljs-function"><span class="hljs-title">enc</span>, ost-&gt;</span><span class="hljs-function"><span class="hljs-title">st</span>, get_video_frame(ost), ost-&gt;</span>tmp_pkt);<br>&#125;<br></code></pre></td></tr></table></figure><p>只是简单调用了write_frame</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">write_frame</span><span class="hljs-params">(AVFormatContext *fmt_ctx, AVCodecContext *c,</span><br><span class="hljs-params">                       AVStream *st, AVFrame *frame, AVPacket *pkt)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-comment">// send the frame to the encoder</span><br>    <span class="hljs-comment">//将frame送给编码器去编码</span><br>    ret = avcodec_send_frame(c, frame);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error sending a frame to the encoder: %s\n&quot;</span>,<br>                av_err2str(ret));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//从编码器中读出编码后的pkt</span><br>        ret = avcodec_receive_packet(c, pkt);<br>        <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error encoding a frame: %s\n&quot;</span>, av_err2str(ret));<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* rescale output packet timestamp values from codec to stream timebase */</span><br>        <span class="hljs-comment">//调整pkt的pts，pkt的时间基参编码器的时间基，将其转换为参考stream的时间基</span><br>        av_packet_rescale_ts(pkt, c-&gt;time_base, st-&gt;time_base);<br>        <span class="hljs-comment">//设置pkt的stream_index和stream对应的一致，音视频分别对应于不同的stream_index</span><br>        pkt-&gt;stream_index = st-&gt;index;<br><br>        <span class="hljs-comment">/* Write the compressed frame to the media file. */</span><br>        log_packet(fmt_ctx, pkt);<br>        <span class="hljs-comment">//将pkt写入视频文件</span><br>        ret = av_interleaved_write_frame(fmt_ctx, pkt);<br>        <span class="hljs-comment">/* pkt is now blank (av_interleaved_write_frame() takes ownership of</span><br><span class="hljs-comment">         * its contents and resets pkt), so that no unreferencing is necessary.</span><br><span class="hljs-comment">         * This would be different if one used av_write_frame(). */</span><br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error while writing output packet: %s\n&quot;</span>, av_err2str(ret));<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret == AVERROR_EOF ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>将AVFrame送给编码器去编码</p></li><li><p>读取pkt</p></li><li><p>调用av_packet_rescale_ts，调整pkt的时间戳，写入文件pkt的pts要以stream的time_base为基准</p></li><li><p>设置pkt的index</p></li><li><p>调用av_interleaved_write_frame将pkt写入文件</p></li><li><p>返回写入结果。当AVFrame为空时，会冲洗编码器，ret &#x3D; AVERROR_EOF， 返回1， 结束写入</p></li></ol><p>frame的每一帧数据，是来自于get_video_frame方法, 填充的假数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> AVFrame *<span class="hljs-title function_">get_video_frame</span><span class="hljs-params">(OutputStream *ost)</span><br>&#123;<br>    AVCodecContext *c = ost-&gt;enc;<br><br>    <span class="hljs-comment">/* check if we want to generate more frames */</span><br>    <span class="hljs-keyword">if</span> (av_compare_ts(ost-&gt;next_pts, c-&gt;time_base,<br>                      STREAM_DURATION, (AVRational)&#123; <span class="hljs-number">1</span>, <span class="hljs-number">1</span> &#125;) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">/* when we pass a frame to the encoder, it may keep a reference to it</span><br><span class="hljs-comment">     * internally; make sure we do not overwrite it here */</span><br>    <span class="hljs-keyword">if</span> (av_frame_make_writable(ost-&gt;frame) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> (c-&gt;pix_fmt != AV_PIX_FMT_YUV420P) &#123;<br>        <span class="hljs-comment">/* as we only generate a YUV420P picture, we must convert it</span><br><span class="hljs-comment">         * to the codec pixel format if needed */</span><br>        <span class="hljs-keyword">if</span> (!ost-&gt;sws_ctx) &#123;<br>            ost-&gt;sws_ctx = sws_getContext(c-&gt;width, c-&gt;height,<br>                                          AV_PIX_FMT_YUV420P,<br>                                          c-&gt;width, c-&gt;height,<br>                                          c-&gt;pix_fmt,<br>                                          SCALE_FLAGS, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">if</span> (!ost-&gt;sws_ctx) &#123;<br>                <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<br>                        <span class="hljs-string">&quot;Could not initialize the conversion context\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        fill_yuv_image(ost-&gt;tmp_frame, ost-&gt;next_pts, c-&gt;width, c-&gt;height);<br>        sws_scale(ost-&gt;sws_ctx, (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> * <span class="hljs-type">const</span> *) ost-&gt;tmp_frame-&gt;data,<br>                  ost-&gt;tmp_frame-&gt;linesize, <span class="hljs-number">0</span>, c-&gt;height, ost-&gt;frame-&gt;data,<br>                  ost-&gt;frame-&gt;linesize);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fill_yuv_image(ost-&gt;frame, ost-&gt;next_pts, c-&gt;width, c-&gt;height);<br>    &#125;<br><br>    ost-&gt;frame-&gt;pts = ost-&gt;next_pts++;<br><br>    <span class="hljs-keyword">return</span> ost-&gt;frame;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>调用av_compare_ts 判断是否继续生成新的frame，一开始规定了只写10秒钟的数据，超过了就不写了</p></li><li><p>av_frame_make_writable使当前的frame可写，被编码器引用的frame不可写，调用该方法如果被引用，内部会创建新buf，变成可写的</p></li><li><p>填充数据yuv，还做了缩放处理，暂不讨论</p></li><li><p>更新frame的pts</p></li><li><p>返回生成的frame</p></li></ol><p>write_audio_frame</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * encode one audio frame and send it to the muxer</span><br><span class="hljs-comment"> * return 1 when encoding is finished, 0 otherwise</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">write_audio_frame</span><span class="hljs-params">(AVFormatContext *oc, OutputStream *ost)</span><br>&#123;<br>    AVCodecContext *c;<br>    AVFrame *frame;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-type">int</span> dst_nb_samples;<br><br>    c = ost-&gt;enc;<br><br>    <span class="hljs-comment">//获取音频帧</span><br>    frame = get_audio_frame(ost);   <br><br>    <span class="hljs-keyword">if</span> (frame) &#123;<br>        <span class="hljs-comment">/* convert samples from native format to destination codec format, using the resampler */</span><br>        <span class="hljs-comment">/* compute destination number of samples */</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        计算根据重采样后应该生成的采样个数</span><br><span class="hljs-comment">        */</span><br>        dst_nb_samples = av_rescale_rnd(swr_get_delay(ost-&gt;swr_ctx, c-&gt;sample_rate) + frame-&gt;nb_samples,<br>                                        c-&gt;sample_rate, c-&gt;sample_rate, AV_ROUND_UP);<br>        <span class="hljs-comment">//由于没有修改采样率，只是修改了位深，采样个数保持不变</span><br>        av_assert0(dst_nb_samples == frame-&gt;nb_samples);<br><br>        <span class="hljs-comment">/* when we pass a frame to the encoder, it may keep a reference to it</span><br><span class="hljs-comment">         * internally;</span><br><span class="hljs-comment">         * make sure we do not overwrite it here</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//使ost-&gt;frame可写</span><br>        ret = av_frame_make_writable(ost-&gt;frame);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">/* convert to destination format */</span><br>        <span class="hljs-comment">//重采样</span><br>        ret = swr_convert(ost-&gt;swr_ctx,<br>                          ost-&gt;frame-&gt;data, dst_nb_samples,<br>                          (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)frame-&gt;data, frame-&gt;nb_samples);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error while converting\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        frame = ost-&gt;frame;<br>        <span class="hljs-comment">//重新计算音频pts</span><br>        frame-&gt;pts = av_rescale_q(ost-&gt;samples_count, (AVRational)&#123;<span class="hljs-number">1</span>, c-&gt;sample_rate&#125;, c-&gt;time_base);<br>        <span class="hljs-comment">//计算samples_count</span><br>        ost-&gt;samples_count += dst_nb_samples;<br>    &#125;<br>    <span class="hljs-comment">//将音频帧写入文件</span><br>    <span class="hljs-keyword">return</span> write_frame(oc, c, ost-&gt;st, frame, ost-&gt;tmp_pkt);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>准备AVFrame，调用get_audio_frame获取一个AVFrame，内部根据编码格式，填充pcm假数据</p></li><li><p>调用av_rescale_rnd计算重采样个数，如果数据源和送入编码器的音频的采样率不同，需要转换采样率，示例程序只是变了采样格式，没有更改采样率，采样个数不变</p></li><li><p>做重采样，重采样数据保存在ost-&gt;frame中</p></li><li><p>重采样后，需要更新frame的pts</p></li><li><p>调用write_frame编码，将数据写入文件</p></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>学习了通过应用libavformat将音视频数据编码封装到文件中</p><ol><li><p>创建AVFormatContext</p></li><li><p>添加stream</p></li><li><p>配置编解码器，stream 参数</p></li><li><p>编码frame，生成pkt，更新pts</p></li><li><p>交替写音视频pkt</p></li><li><p>关闭编解码器，结束写文件</p></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg+nginx+rtmp搭建本地推流服务器</title>
    <link href="/2022/03/13/ffmpeg/2022-03-13-ffmpeg+nginx+rtmp%E6%90%AD%E5%BB%BA%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/03/13/ffmpeg/2022-03-13-ffmpeg+nginx+rtmp%E6%90%AD%E5%BB%BA%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装nginx-rtmp"><a href="#安装nginx-rtmp" class="headerlink" title="安装nginx+rtmp"></a>安装<a href="https://github.com/denji/homebrew-nginx">nginx</a>+<a href="https://github.com/sergey-dryabzhinsky/nginx-rtmp-module">rtmp</a></h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">brew tap denji/nginx<br>brew install nginx-full --<span class="hljs-keyword">with</span>-rtmp-<span class="hljs-keyword">module</span><br></code></pre></td></tr></table></figure><h2 id="配置nginx-conf-路径-opt-homebrew-etc-nginx-nginx-conf"><a href="#配置nginx-conf-路径-opt-homebrew-etc-nginx-nginx-conf" class="headerlink" title="配置nginx.conf,路径/opt/homebrew/etc/nginx/nginx.conf"></a>配置<code>nginx.conf</code>,路径<code>/opt/homebrew/etc/nginx/nginx.conf</code></h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs clean">rtmp &#123;<br>    server &#123;<br>        listen <span class="hljs-number">1935</span>;<br>        chunk_size <span class="hljs-number">4096</span>;<br><br>        # live on<br>        application rtmp_live &#123;<br>            live on;<br>            # hls on; #这个参数把直播服务器改造成实时回放服务器。<br>            # wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。<br>            # hls_path ./sbin/html; #切片视频文件存放位置。<br>            # hls_fragment <span class="hljs-number">10</span>s;     #每个视频切片的时长。<br>            # hls_playlist_length <span class="hljs-number">60</span>s;  #总共可以回看的时间，这里设置的是<span class="hljs-number">1</span>分钟。<br>            # hls_continuous on; #连续模式。<br>            # hls_cleanup on;    #对多余的切片进行删除。<br>            # hls_nested on;     #嵌套模式。<br>        &#125;<br><br>        # play videos<br>        application rtmp_play&#123;<br>            play ./videos;  #build directory<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多配置参考:<a href="https://github.com/sergey-dryabzhinsky/nginx-rtmp-module#example-nginxconf">example-nginxconf</a></p><h3 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">Reload config:<br> $ nginx -s reload<br>Reopen Logfile:<br> $ nginx -s reopen<br>Stop process:<br> $ nginx -s stop<br>Waiting on <span class="hljs-keyword">exit</span> process<br> $ nginx -s quit<br></code></pre></td></tr></table></figure><h2 id="使用ffmpeg-推流"><a href="#使用ffmpeg-推流" class="headerlink" title="使用ffmpeg 推流"></a>使用ffmpeg 推流</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffmpeg -re -i test.flv -vcodec libx264 -acodec aac -strict -<span class="hljs-number">2</span> -f flv rtmp:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">1935</span><span class="hljs-regexp">/$app/</span><span class="hljs-variable">$name</span><br></code></pre></td></tr></table></figure><p>上面定义的app叫rtmp_live，假设name&#x3D;video</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -re -<span class="hljs-selector-tag">i</span> test<span class="hljs-selector-class">.flv</span> -vcodec libx264 -acodec aac -strict -<span class="hljs-number">2</span> -f flv rtmp:<span class="hljs-comment">//localhost:1935/rtmp_live/video</span><br></code></pre></td></tr></table></figure><h2 id="使用ffplay拉流或者vlc拉流"><a href="#使用ffplay拉流或者vlc拉流" class="headerlink" title="使用ffplay拉流或者vlc拉流"></a>使用ffplay拉流或者vlc拉流</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffplay rtmp:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">1935</span><span class="hljs-regexp">/rtmp_live/</span>video<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://github.com/guoxiaopang/LiveExplanation/blob/master/MACOS%E4%B8%8A%E6%90%AD%E5%BB%BAnginx%2Brtmp%E7%8E%AF%E5%A2%83.md">MACOS上搭建nginx+rtmp环境</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg example 5.硬件解码</title>
    <link href="/2022/03/13/ffmpeg/2022-03-14-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%205/"/>
    <url>/2022/03/13/ffmpeg/2022-03-14-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%205/</url>
    
    <content type="html"><![CDATA[<p>在<code>hw_decode.c</code>示例中，ffmpeg展示了如何使用硬件加速来解码视频，我们来分析一下是怎么实现的。</p><h2 id="硬件加速设备类型"><a href="#硬件加速设备类型" class="headerlink" title="硬件加速设备类型"></a>硬件加速设备类型</h2><p>展示所有可用的硬件加速方法, 在mac上只找到了<code>videotoolbox</code>加速的方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ffmpeg -hwaccels<br>Hardware acceleration methods:<br>videotoolbox<br></code></pre></td></tr></table></figure><p>查看 AVHWDeviceType的定义，发现别的平台可以使用cuda，opencl， mediacodec，vulkan等来实现硬件加速。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">enum</span> <span class="hljs-built_in">AVHWDeviceType</span> &#123;<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_NONE</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_VDPAU</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_CUDA</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_VAAPI</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_DXVA2</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_QSV</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_VIDEOTOOLBOX</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_D3D11VA</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_DRM</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_OPENCL</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_MEDIACODEC</span>,<br>    <span class="hljs-built_in">AV_HWDEVICE_TYPE_VULKAN</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p> 调用该示例程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./hw_decode videotoolbox /tmp/test.mp4 /tmp/test.yuv<br></code></pre></td></tr></table></figure><ol><li><p>参数videotoolbox 指定使用的硬件加速方式，mac平台只找到这一种</p></li><li><p>&#x2F;tmp&#x2F;test.mp4 指定要解封装的文件，从文件中读取h264进行解码</p></li><li><p>&#x2F;tmp&#x2F;test.yuv 指定解码后写入的文件路径</p></li></ol><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    AVFormatContext *input_ctx = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> video_stream, ret;<br>    AVStream *video = <span class="hljs-literal">NULL</span>;<br>    AVCodecContext *decoder_ctx = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">const</span> AVCodec *decoder = <span class="hljs-literal">NULL</span>;<br>    AVPacket *packet = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AVHWDeviceType</span> type;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Usage: %s &lt;device type&gt; &lt;input file&gt; &lt;output file&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//根据传入加速器名字，找到对应的type</span><br>    type = <span class="hljs-built_in">av_hwdevice_find_type_by_name</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> (type == AV_HWDEVICE_TYPE_NONE) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Device type %s is not supported.\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Available device types:&quot;</span>);<br>        <span class="hljs-comment">//没找到加速器，打印ffmepg 支持的加速器列表</span><br>        <span class="hljs-keyword">while</span>((type = <span class="hljs-built_in">av_hwdevice_iterate_types</span>(type)) != AV_HWDEVICE_TYPE_NONE)<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot; %s&quot;</span>, <span class="hljs-built_in">av_hwdevice_get_type_name</span>(type));<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//申请packet保存解码前数据</span><br>    packet = <span class="hljs-built_in">av_packet_alloc</span>();<br>    <span class="hljs-keyword">if</span> (!packet) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Failed to allocate AVPacket\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//打开输入的文件，关联到AVFormatContext</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">avformat_open_input</span>(&amp;input_ctx, argv[<span class="hljs-number">2</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Cannot open input file &#x27;%s&#x27;\n&quot;</span>, argv[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//填充AVFormatContext，获取解封装信息</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">avformat_find_stream_info</span>(input_ctx, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Cannot find input stream information.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//找到video 对应的stream index， 获取对应的解码器信息</span><br>    ret = <span class="hljs-built_in">av_find_best_stream</span>(input_ctx, AVMEDIA_TYPE_VIDEO, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, &amp;decoder, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Cannot find a video stream in the input file\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    video_stream = ret;<br><br>    <span class="hljs-comment">//遍历获取解码器对应的硬件配置信息</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;; i++) &#123;<br>        <span class="hljs-type">const</span> AVCodecHWConfig *config = <span class="hljs-built_in">avcodec_get_hw_config</span>(decoder, i);<br>        <span class="hljs-comment">//如果没找到支持的config，结束程序</span><br>        <span class="hljs-keyword">if</span> (!config) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Decoder %s does not support device type %s.\n&quot;</span>,<br>                    decoder-&gt;name, <span class="hljs-built_in">av_hwdevice_get_type_name</span>(type));<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         如果config的device_type匹配我们设置的类型，并且config的methods的值为AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</span><br><span class="hljs-comment">         保存支持的hw_pix_fmt，跳出循环</span><br><span class="hljs-comment">         </span><br><span class="hljs-comment">         关于AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</span><br><span class="hljs-comment">         如果我们选择了此种类型，需要在调用avcodec_open2()打开解码器之前，给AVCodecContext.hw_device_ctx设置正确的值。</span><br><span class="hljs-comment">         */</span><br>        <br>        <span class="hljs-keyword">if</span> (config-&gt;methods &amp; AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX &amp;&amp;<br>            config-&gt;device_type == type) &#123;<br>            hw_pix_fmt = config-&gt;pix_fmt;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//创建解码器上下文</span><br>    <span class="hljs-keyword">if</span> (!(decoder_ctx = <span class="hljs-built_in">avcodec_alloc_context3</span>(decoder)))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br><br>    video = input_ctx-&gt;streams[video_stream];<br>    <span class="hljs-comment">//给解码器上下文填充参数，复制从文件中读的的解码器参数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">avcodec_parameters_to_context</span>(decoder_ctx, video-&gt;codecpar) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">//get_format是一个函数指针，我们给ffmpeg提供一个函数，ffmpeg 调用该函数确定解码帧的数据格式</span><br>    decoder_ctx-&gt;get_format  = get_hw_format;<br><br>    <span class="hljs-comment">//根据AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX的定义，我们需要给ctx-&gt;hw_device_ctx赋值</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hw_decoder_init</span>(decoder_ctx, type) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">//打开解码器</span><br>    <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">avcodec_open2</span>(decoder_ctx, decoder, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Failed to open codec for stream #%u\n&quot;</span>, video_stream);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* open the file to dump raw data */</span><br>    output_file = <span class="hljs-built_in">fopen</span>(argv[<span class="hljs-number">3</span>], <span class="hljs-string">&quot;w+b&quot;</span>);<br><br>    <span class="hljs-comment">/* actual decoding and dump the raw data */</span><br>    <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//从文件中循环读视频帧，存入packet</span><br>        <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">av_read_frame</span>(input_ctx, packet)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">if</span> (video_stream == packet-&gt;stream_index)<br>            <span class="hljs-comment">//解码packet，写文件</span><br>            ret = <span class="hljs-built_in">decode_write</span>(decoder_ctx, packet);<br><br>        <span class="hljs-built_in">av_packet_unref</span>(packet);<br>    &#125;<br>    <span class="hljs-comment">//冲洗解码器</span><br>    <span class="hljs-comment">/* flush the decoder */</span><br>    ret = <span class="hljs-built_in">decode_write</span>(decoder_ctx, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">if</span> (output_file)<br>        <span class="hljs-built_in">fclose</span>(output_file);<br>    <span class="hljs-built_in">av_packet_free</span>(&amp;packet);<br>    <span class="hljs-built_in">avcodec_free_context</span>(&amp;decoder_ctx);<br>    <span class="hljs-built_in">avformat_close_input</span>(&amp;input_ctx);<br>    <span class="hljs-built_in">av_buffer_unref</span>(&amp;hw_device_ctx);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>验证我们设置的加速器是否正确</p></li><li><p>打开文件，解封装，读取视频流，解码器信息</p></li><li><p>获取解码器支持的硬件配置信息，遍历，找到我们设置的类型，保存目标颜色格式</p></li><li><p>创建解码器上下文，填充解码参数，通过<code>get_format</code>告知解码器目标颜色格式</p></li><li><p>创建加速器实例，告诉解码器使用我们创建的加速器实例</p></li><li><p>从文件中读视频帧，送入解码器</p></li><li><p>从解码器中读取frame，判断颜色格式，处理数据从GPU复制到CPU</p></li><li><p>去掉frame的字节对齐，写入输出文件中</p></li></ol><h3 id="硬件加速器目标像素格式"><a href="#硬件加速器目标像素格式" class="headerlink" title="硬件加速器目标像素格式"></a>硬件加速器目标像素格式</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//遍历获取解码器对应的硬件配置信息</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;; i++) &#123;<br>    <span class="hljs-keyword">const</span> AVCodecHWConfig *<span class="hljs-keyword">config</span> = avcodec_get_hw_config(decoder, i);<br>    <span class="hljs-comment">//如果没找到支持的config，结束程序</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">config</span>) &#123;<br>        fprintf(stderr, <span class="hljs-string">&quot;Decoder %s does not support device type %s.\n&quot;</span>,<br>                decoder-&gt;name, av_hwdevice_get_type_name(<span class="hljs-keyword">type</span>));<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     如果config的device_type匹配我们设置的类型，并且config的methods的值为AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</span><br><span class="hljs-comment">     保存支持的hw_pix_fmt，跳出循环</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">     关于AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX</span><br><span class="hljs-comment">     如果我们选择了此种类型，需要在调用avcodec_open2()打开解码器之前，给AVCodecContext.hw_device_ctx设置正确的值。</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">config</span>-&gt;methods &amp; AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX &amp;&amp;<br>        <span class="hljs-keyword">config</span>-&gt;device_type == <span class="hljs-keyword">type</span>) &#123;<br>        hw_pix_fmt = <span class="hljs-keyword">config</span>-&gt;pix_fmt;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>告诉解码器，我们希望输出像素格式</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">//get_format是一个函数指针，我们给ffmpeg提供一个函数，ffmpeg 调用该函数确定解码帧的数据格式</span><br><span class="hljs-function"><span class="hljs-title">decoder_ctx</span>-&gt;</span>get_format  = get_hw_format;<br><br></code></pre></td></tr></table></figure><p> get_hw_format</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">static</span> <span class="hljs-keyword">enum</span> <span class="hljs-built_in">AVPixelFormat</span> get_hw_format(<span class="hljs-built_in">AVCodecContext</span> *ctx,<br>                                        <span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-built_in">AVPixelFormat</span> *pix_fmts)<br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">enum</span> <span class="hljs-built_in">AVPixelFormat</span> *p;<br><br>    <span class="hljs-keyword">for</span> (p = pix_fmts; *p != <span class="hljs-number">-1</span>; p++) &#123;<br>        <span class="hljs-keyword">if</span> (*p == hw_pix_fmt)<br>            <span class="hljs-keyword">return</span> *p;<br>    &#125;<br><br>    fprintf(stderr, <span class="hljs-string">&quot;Failed to get HW surface format.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">AV_PIX_FMT_NONE</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="创建并设置加速器"><a href="#创建并设置加速器" class="headerlink" title="创建并设置加速器"></a>创建并设置加速器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">hw_decoder_init</span><span class="hljs-params">(AVCodecContext *ctx, <span class="hljs-type">const</span> <span class="hljs-keyword">enum</span> AVHWDeviceType type)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//创建硬件加速器实例</span><br>    <span class="hljs-keyword">if</span> ((err = <span class="hljs-built_in">av_hwdevice_ctx_create</span>(&amp;hw_device_ctx, type,<br>                                      <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Failed to create specified HW device.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> err;<br>    &#125;<br>    <span class="hljs-comment">//告诉解码器，使用我们创建的硬件加速器</span><br>    ctx-&gt;hw_device_ctx = <span class="hljs-built_in">av_buffer_ref</span>(hw_device_ctx);<br><br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="解码，数据从GPU到CPU"><a href="#解码，数据从GPU到CPU" class="headerlink" title="解码，数据从GPU到CPU"></a>解码，数据从GPU到CPU</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">decode_write</span><span class="hljs-params">(AVCodecContext *avctx, AVPacket *packet)</span></span><br><span class="hljs-function"></span>&#123;<br>    AVFrame *frame = <span class="hljs-literal">NULL</span>, *sw_frame = <span class="hljs-literal">NULL</span>;<br>    AVFrame *tmp_frame = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">uint8_t</span> *buffer = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    ret = <span class="hljs-built_in">avcodec_send_packet</span>(avctx, packet);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error during decoding\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!(frame = <span class="hljs-built_in">av_frame_alloc</span>()) || !(sw_frame = <span class="hljs-built_in">av_frame_alloc</span>())) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Can not alloc frame\n&quot;</span>);<br>            ret = <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br><br>        ret = <span class="hljs-built_in">avcodec_receive_frame</span>(avctx, frame);<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-built_in">AVERROR</span>(EAGAIN) || ret == AVERROR_EOF) &#123;<br>            <span class="hljs-built_in">av_frame_free</span>(&amp;frame);<br>            <span class="hljs-built_in">av_frame_free</span>(&amp;sw_frame);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error while decoding\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         我们期待解码器能够解码出我们想要像素格式</span><br><span class="hljs-comment">         如果解码器输出了我们想要的格式，由于使用了硬件加速，我们需要将数据从GPU拷贝到cpu</span><br><span class="hljs-comment">         如果没有输出我们想要的格式，证明使用的是软件解码</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (frame-&gt;format == hw_pix_fmt) &#123;<br>            <span class="hljs-comment">/* 将解码数据从GPU拷贝到CPU */</span><br>            <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">av_hwframe_transfer_data</span>(sw_frame, frame, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error transferring the data to system memory\n&quot;</span>);<br>                <span class="hljs-keyword">goto</span> fail;<br>            &#125;<br>            tmp_frame = sw_frame;<br>        &#125; <span class="hljs-keyword">else</span><br>            tmp_frame = frame;<br>        <br>        <span class="hljs-comment">//申请一个AVFrame, 将解码后的yuv/rgb，去掉字节对齐拷贝过来</span><br>        size = <span class="hljs-built_in">av_image_get_buffer_size</span>(tmp_frame-&gt;format, tmp_frame-&gt;width,<br>                                        tmp_frame-&gt;height, <span class="hljs-number">1</span>);<br>        buffer = <span class="hljs-built_in">av_malloc</span>(size);<br>        <span class="hljs-keyword">if</span> (!buffer) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Can not alloc buffer\n&quot;</span>);<br>            ret = <span class="hljs-built_in">AVERROR</span>(ENOMEM);<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br>        <span class="hljs-comment">//拷贝，去掉字节对齐</span><br>        ret = <span class="hljs-built_in">av_image_copy_to_buffer</span>(buffer, size,<br>                                      (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> * <span class="hljs-type">const</span> *)tmp_frame-&gt;data,<br>                                      (<span class="hljs-type">const</span> <span class="hljs-type">int</span> *)tmp_frame-&gt;linesize, tmp_frame-&gt;format,<br>                                      tmp_frame-&gt;width, tmp_frame-&gt;height, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Can not copy image to buffer\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br>        <span class="hljs-comment">//将已经去掉字节对齐的yuv/rgb数据，写入文件</span><br>        <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">fwrite</span>(buffer, <span class="hljs-number">1</span>, size, output_file)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Failed to dump raw data.\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> fail;<br>        &#125;<br><br>    fail:<br>        <span class="hljs-built_in">av_frame_free</span>(&amp;frame);<br>        <span class="hljs-built_in">av_frame_free</span>(&amp;sw_frame);<br>        <span class="hljs-built_in">av_freep</span>(&amp;buffer);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>解码器配置的时候，需要告诉解码器我们使用的硬件加速器</p></li><li><p>与解码器商量输出的颜色格式</p></li><li><p>解码后处理，处理从GPU到CPU拷贝的内存拷贝</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg example 3.音频编码</title>
    <link href="/2022/03/12/ffmpeg/2022-03-12-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%203/"/>
    <url>/2022/03/12/ffmpeg/2022-03-12-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%203/</url>
    
    <content type="html"><![CDATA[<p>关于如何源码调试，参考前面的文章<a href="https://juejin.cn/post/7073796134912655367">ffmpeg example 视频编码 - 掘金</a></p><p>今天分析<code>encode_audio.c</code>学习ffmpeg如何编码音频数据，由于太简单了，直接贴代码</p><p>##main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename;<br>    <span class="hljs-type">const</span> AVCodec *codec;<br>    AVCodecContext *c= <span class="hljs-literal">NULL</span>;<br>    AVFrame *frame;<br>    AVPacket *pkt;<br>    <span class="hljs-type">int</span> i, j, k, ret;<br>    FILE *f;<br>    <span class="hljs-type">uint16_t</span> *samples;<br>    <span class="hljs-type">float</span> t, tincr;<br><br>    <span class="hljs-keyword">if</span> (argc &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Usage: %s &lt;output file&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    filename = argv[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">/* 根据codec_id 找到对应的音频编码器 */</span><br>    codec = avcodec_find_encoder(AV_CODEC_ID_MP2);<br>    <span class="hljs-keyword">if</span> (!codec) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Codec not found\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 创建编码器AVCodecContext上下文 */</span><br>    c = avcodec_alloc_context3(codec);<br>    <span class="hljs-keyword">if</span> (!c) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate audio codec context\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 设置码率 */</span><br>    c-&gt;bit_rate = <span class="hljs-number">64000</span>;<br><br>    <span class="hljs-comment">/* 采样格式 */</span><br>    c-&gt;sample_fmt = AV_SAMPLE_FMT_S16;<br>    <span class="hljs-comment">/* 检查编码器是否支持该采样格式 */</span><br>    <span class="hljs-keyword">if</span> (!check_sample_fmt(codec, c-&gt;sample_fmt)) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Encoder does not support sample format %s&quot;</span>,<br>                av_get_sample_fmt_name(c-&gt;sample_fmt));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* select other audio parameters supported by the encoder */</span><br>    <span class="hljs-comment">/* 设置采样率 */</span><br>    c-&gt;sample_rate    = select_sample_rate(codec);<br>    <span class="hljs-comment">/* 声道布局 */</span><br>    c-&gt;channel_layout = select_channel_layout(codec);<br>    <span class="hljs-comment">/* 声道数量 */</span><br>    c-&gt;channels       = av_get_channel_layout_nb_channels(c-&gt;channel_layout);<br><br>    <span class="hljs-comment">/* 打开编码器 */</span><br>    <span class="hljs-keyword">if</span> (avcodec_open2(c, codec, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open codec\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 打开写文件 */</span><br>    f = fopen(filename, <span class="hljs-string">&quot;wb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!f) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open %s\n&quot;</span>, filename);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 创建pkt，保存编码后的数据 */</span><br>    pkt = av_packet_alloc();<br>    <span class="hljs-keyword">if</span> (!pkt) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;could not allocate the packet\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 创建frame， 保存编码前的数据 */</span><br>    frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span> (!frame) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate audio frame\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 给frame 设置参数 */</span><br>    <span class="hljs-comment">// 每个声道有多少个采样</span><br>    frame-&gt;nb_samples     = c-&gt;frame_size;<br>    <span class="hljs-comment">// 采样的格式</span><br>    frame-&gt;format         = c-&gt;sample_fmt;<br>    <span class="hljs-comment">// 声道布局</span><br>    frame-&gt;channel_layout = c-&gt;channel_layout;<br><br>    <span class="hljs-comment">/* 给 frame 内部分配内存 */</span><br>    ret = av_frame_get_buffer(frame, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate audio data buffers\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 给frame填充数据，编码，写入文件 */</span><br>    t = <span class="hljs-number">0</span>;<br>    tincr = <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">440.0</span> / c-&gt;sample_rate;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>        <span class="hljs-comment">/* make sure the frame is writable -- makes a copy if the encoder</span><br><span class="hljs-comment">         * kept a reference internally */</span><br><br>        <span class="hljs-comment">/*确定frame是可写的，如果frame被编码器内部引用，会变成不可写，调用此方法，给frame内部的buf指向新分配的空间，使其变为可写。 */</span><br>        ret = av_frame_make_writable(frame);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//获得写入的指针，由于设置的是AV_SAMPLE_FMT_S16，非平面类型，data[0]保存了写入地址。</span><br>        samples = (<span class="hljs-type">uint16_t</span>*)frame-&gt;data[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; c-&gt;frame_size; j++) &#123;<br>            samples[<span class="hljs-number">2</span>*j] = (<span class="hljs-type">int</span>)(<span class="hljs-built_in">sin</span>(t) * <span class="hljs-number">10000</span>);<br>            <span class="hljs-comment">//多个声道，交错写数据</span><br>            <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; c-&gt;channels; k++)<br>                samples[<span class="hljs-number">2</span>*j + k] = samples[<span class="hljs-number">2</span>*j];<br>            t += tincr;<br>        &#125;<br>        <span class="hljs-comment">//编码，写文件</span><br>        encode(c, frame, pkt, f);<br>    &#125;<br><br>    <span class="hljs-comment">/* 冲洗编码器，读出剩余数据，写入文件 */</span><br>    encode(c, <span class="hljs-literal">NULL</span>, pkt, f);<br><br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(f);<br>    <span class="hljs-comment">//释放资源</span><br>    av_frame_free(&amp;frame);<br>    av_packet_free(&amp;pkt);<br>    avcodec_free_context(&amp;c);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证采样格式，找最大采样率，声道数"><a href="#验证采样格式，找最大采样率，声道数" class="headerlink" title="验证采样格式，找最大采样率，声道数"></a>验证采样格式，找最大采样率，声道数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* check that a given sample format is supported by the encoder */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_sample_fmt</span><span class="hljs-params">(<span class="hljs-type">const</span> AVCodec *codec, <span class="hljs-keyword">enum</span> AVSampleFormat sample_fmt)</span><br>&#123;<br>    <span class="hljs-comment">//sample_fmts: array of supported sample formats, or NULL if unknown, array is terminated by -1</span><br>    <span class="hljs-comment">//支持的采样格式数组，为空，或者以-1结尾</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">AVSampleFormat</span> *<span class="hljs-title">p</span> =</span> codec-&gt;sample_fmts;<br>    <span class="hljs-comment">//判断设置的采样格式是否支持，1 支持 0 不支持</span><br>    <span class="hljs-keyword">while</span> (*p != AV_SAMPLE_FMT_NONE) &#123;<br>        <span class="hljs-keyword">if</span> (*p == sample_fmt)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* just pick the highest supported samplerate */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">select_sample_rate</span><span class="hljs-params">(<span class="hljs-type">const</span> AVCodec *codec)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> *p;<br>    <span class="hljs-type">int</span> best_samplerate = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//supported_samplerates: array of supported audio samplerates, or NULL if unknown, array is terminated by 0</span><br>    <span class="hljs-comment">//supported_samplerates 保存了支持的采样率的数组，为空，或者以 0 结尾</span><br>    <span class="hljs-keyword">if</span> (!codec-&gt;supported_samplerates)<br>        <span class="hljs-comment">//为空，返回44100</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">44100</span>;<br><br>    p = codec-&gt;supported_samplerates;<br>    <span class="hljs-comment">//找到支持的采样率的最大值</span><br>    <span class="hljs-keyword">while</span> (*p) &#123;<br>        <span class="hljs-keyword">if</span> (!best_samplerate || <span class="hljs-built_in">abs</span>(<span class="hljs-number">44100</span> - *p) &lt; <span class="hljs-built_in">abs</span>(<span class="hljs-number">44100</span> - best_samplerate))<br>            best_samplerate = *p;<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> best_samplerate;<br>&#125;<br><br><span class="hljs-comment">/* select layout with the highest channel count */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">select_channel_layout</span><span class="hljs-params">(<span class="hljs-type">const</span> AVCodec *codec)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">uint64_t</span> *p;<br>    <span class="hljs-type">uint64_t</span> best_ch_layout = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> best_nb_channels   = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//channel_layouts: array of support channel layouts, or NULL if unknown. array is terminated by 0</span><br>    <span class="hljs-comment">//channel_layouts 保存了支持的所有声道布局数组，为空，或者以 0 结尾</span><br>    <span class="hljs-keyword">if</span> (!codec-&gt;channel_layouts)<br>        <span class="hljs-comment">//为空，返回AV_CH_LAYOUT_STEREO</span><br>        <span class="hljs-keyword">return</span> AV_CH_LAYOUT_STEREO;<br><br>    <span class="hljs-comment">//找声道数最多的那个</span><br>    p = codec-&gt;channel_layouts;<br>    <span class="hljs-keyword">while</span> (*p) &#123;<br>        <span class="hljs-type">int</span> nb_channels = av_get_channel_layout_nb_channels(*p);<br><br>        <span class="hljs-keyword">if</span> (nb_channels &gt; best_nb_channels) &#123;<br>            best_ch_layout    = *p;<br>            best_nb_channels = nb_channels;<br>        &#125;<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> best_ch_layout;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(AVCodecContext *ctx, AVFrame *frame, AVPacket *pkt,</span><br><span class="hljs-params">                   FILE *output)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-comment">/* 给编码器发送frame */</span><br>    ret = avcodec_send_frame(ctx, frame);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error sending the frame to the encoder\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* read all the available output packets (in general there may be any</span><br><span class="hljs-comment">     * number of them */</span><br>    <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//从编码器中读pkt，pkt里面保存了编码后的数据</span><br>        ret = avcodec_receive_packet(ctx, pkt);<br>        <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)<br>            <span class="hljs-comment">//EAGAIN编码器还需要更多的frame才能继续输出pkt</span><br>            <span class="hljs-comment">//AVERROR_EOF编码器没有更多数据可以读取了，例如被冲洗了</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error encoding audio frame\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//写入文件</span><br>        fwrite(pkt-&gt;data, <span class="hljs-number">1</span>, pkt-&gt;size, output);<br>        <span class="hljs-comment">//取消引用pkt</span><br>        av_packet_unref(pkt);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="ffmpeg-支持的音频编码器"><a href="#ffmpeg-支持的音频编码器" class="headerlink" title="ffmpeg 支持的音频编码器"></a>ffmpeg 支持的音频编码器</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ffmpeg</span> <span class="hljs-selector-tag">-codecs</span> | <span class="hljs-selector-tag">grep</span> <span class="hljs-selector-tag">encoder</span> | <span class="hljs-selector-tag">grep</span> <span class="hljs-selector-tag">-i</span> <span class="hljs-selector-tag">audio</span><br> <span class="hljs-selector-tag">DEAIL</span>. <span class="hljs-selector-tag">aac</span>                  <span class="hljs-selector-tag">AAC</span> (Advanced Audio Coding) (<span class="hljs-attribute">decoders</span>: aac aac_fixed aac_at ) (<span class="hljs-attribute">encoders</span>: aac aac_at )<br> <span class="hljs-selector-tag">DEAI</span><span class="hljs-selector-class">.S</span> <span class="hljs-selector-tag">alac</span>                 <span class="hljs-selector-tag">ALAC</span> (Apple Lossless Audio Codec) (<span class="hljs-attribute">decoders</span>: alac alac_at ) (<span class="hljs-attribute">encoders</span>: alac alac_at )<br> <span class="hljs-selector-tag">DEAIL</span>. <span class="hljs-selector-tag">mp2</span>                  <span class="hljs-selector-tag">MP2</span> (MPEG audio layer <span class="hljs-number">2</span>) (<span class="hljs-attribute">decoders</span>: mp2 mp2float mp2_at ) (<span class="hljs-attribute">encoders</span>: mp2 mp2fixed )<br> <span class="hljs-selector-tag">DEAIL</span>. <span class="hljs-selector-tag">mp3</span>                  <span class="hljs-selector-tag">MP3</span> (MPEG audio layer <span class="hljs-number">3</span>) (<span class="hljs-attribute">decoders</span>: mp3float mp3 mp3_at ) (<span class="hljs-attribute">encoders</span>: libmp3lame )<br> <span class="hljs-selector-tag">DEAIL</span>. <span class="hljs-selector-tag">opus</span>                 <span class="hljs-selector-tag">Opus</span> (Opus Interactive Audio Codec) (<span class="hljs-attribute">decoders</span>: opus libopus ) (<span class="hljs-attribute">encoders</span>: opus libopus )<br> <span class="hljs-selector-tag">DEAIL</span>. <span class="hljs-selector-tag">ra_144</span>               <span class="hljs-selector-tag">RealAudio</span> <span class="hljs-number">1.0</span> (<span class="hljs-number">14.4</span>K) (<span class="hljs-attribute">decoders</span>: real_144 ) (<span class="hljs-attribute">encoders</span>: real_144 )<br></code></pre></td></tr></table></figure><p>示例中选择的是AV_CODEC_ID_MP2</p><p>通过avcodec_find_encoder(AV_CODEC_ID_MP2)来找到对应的编码器</p><p>你也可以尝试mp3，aac ，opus 之类的。</p><h3 id="采样格式，分平面型和非平面型"><a href="#采样格式，分平面型和非平面型" class="headerlink" title="采样格式，分平面型和非平面型"></a>采样格式，分平面型和非平面型</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">enum</span> <span class="hljs-built_in">AVSampleFormat</span> &#123;<br>    <span class="hljs-built_in">AV_SAMPLE_FMT_NONE</span> = <span class="hljs-number">-1</span>,<br>    <span class="hljs-built_in">AV_SAMPLE_FMT_U8</span>,          <span class="hljs-comment">///&lt; unsigned 8 bits</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_S16</span>,         <span class="hljs-comment">///&lt; signed 16 bits</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_S32</span>,         <span class="hljs-comment">///&lt; signed 32 bits</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_FLT</span>,         <span class="hljs-comment">///&lt; float</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_DBL</span>,         <span class="hljs-comment">///&lt; double</span><br><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_U8P</span>,         <span class="hljs-comment">///&lt; unsigned 8 bits, planar</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_S16P</span>,        <span class="hljs-comment">///&lt; signed 16 bits, planar</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_S32P</span>,        <span class="hljs-comment">///&lt; signed 32 bits, planar</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_FLTP</span>,        <span class="hljs-comment">///&lt; float, planar</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_DBLP</span>,        <span class="hljs-comment">///&lt; double, planar</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_S64</span>,         <span class="hljs-comment">///&lt; signed 64 bits</span><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_S64P</span>,        <span class="hljs-comment">///&lt; signed 64 bits, planar</span><br><br>    <span class="hljs-built_in">AV_SAMPLE_FMT_NB</span>           <span class="hljs-comment">///&lt; Number of sample formats. DO NOT USE if linking dynamically</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>后缀带P的就是平面型的，不带P的就是交错型的。</p><p>参考<a href="https://blog.csdn.net/lyy901135/article/details/103061967">音频格式解析：交错模式 vs Plane模式_lyy901135的博客-CSDN博客_plane模式</a></p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>在h264视频编码的时候，有打时间戳，音频编码没有看到打时间戳的环节，之后再探究。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg example 2.视频编码</title>
    <link href="/2022/03/11/ffmpeg/2022-03-11-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%202/"/>
    <url>/2022/03/11/ffmpeg/2022-03-11-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%202/</url>
    
    <content type="html"><![CDATA[<p>调试ffmpeg源码教程</p><ul><li><p><a href="https://yxibng.github.io/2022/03/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vscode%E5%9C%A8macOS%E5%B9%B3%E5%8F%B0%E8%B0%83%E8%AF%95ffmpeg/">如何使用vscode在macOS平台调试ffmpeg</a></p></li><li><p><a href="https://yxibng.github.io/2022/03/%E4%BD%BF%E7%94%A8Xcode%E8%B0%83%E8%AF%95ffmpeg/">使用Xcode调试ffmpeg</a></p></li></ul><p>      </p><p>今天用Xcode调试分析 <code>encode_video.c</code></p><h2 id="配置ffmpeg-支持libx264和h264-videotoolbox来进行视频编码"><a href="#配置ffmpeg-支持libx264和h264-videotoolbox来进行视频编码" class="headerlink" title="配置ffmpeg 支持libx264和h264_videotoolbox来进行视频编码"></a>配置ffmpeg 支持libx264和h264_videotoolbox来进行视频编码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ffmpeg<br>./configure  --disable-optimizations --disable-stripping --enable-debug=3 --disable-doc --enable-libx264 --enable-gpl --enable-videotoolboxm<br>make -j 16<br>make examples<br></code></pre></td></tr></table></figure><p>如果没有libx264， 通过 <a href="https://brew.sh/">Homebrew</a> 安装一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install x264<br></code></pre></td></tr></table></figure><p>ffmpeg  通过<a href="https://www.freedesktop.org/wiki/Software/pkg-config/">pkg-config</a>可以找到x264对应的头文件和库的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ffmpeg git:(master) ✗ pkg-config --libs --cflags x264<br>-DX264_API_IMPORTS -I/opt/homebrew/Cellar/x264/r3060/include -L/opt/homebrew/Cellar/x264/r3060/lib -lx264<br></code></pre></td></tr></table></figure><h2 id="配置Xcode"><a href="#配置Xcode" class="headerlink" title="配置Xcode"></a>配置Xcode</h2><p>添加target，配置路径</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16469917993141646991798582.png"></p><p>配置可执行文件，启动参数</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16469918543121646991854240.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16469918963141646991895699.png"></p><p>encode_video_g 接受两个参数，</p><ol><li><p>视频编码数据的写入路径</p></li><li><p>编码器名字（libx264 libx264rgb h264_videotoolbox）</p></li></ol><p>我们使用h264编码器，查看ffmpeg 支持的h264编码器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ffmpeg -codecs | grep 264<br>DEV.LS h264                 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 (encoders: libx264 libx264rgb h264_videotoolbox )<br></code></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, *codec_name;<br>    <span class="hljs-type">const</span> AVCodec *codec;<br>    AVCodecContext *c= <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> i, ret, x, y;<br>    FILE *f;<br>    AVFrame *frame;<br>    AVPacket *pkt;<br>    <span class="hljs-type">uint8_t</span> endcode[] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0xb7</span> &#125;;<br><br>    <span class="hljs-keyword">if</span> (argc &lt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Usage: %s &lt;output file&gt; &lt;codec name&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    filename = argv[<span class="hljs-number">1</span>];<br>    codec_name = argv[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">/* 根据编码器名字，找到对应的编码器，编码器的名字如libx264,h264_videotoolbox */</span><br>    codec = avcodec_find_encoder_by_name(codec_name);<br>    <span class="hljs-keyword">if</span> (!codec) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Codec &#x27;%s&#x27; not found\n&quot;</span>, codec_name);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 创建编码器上下文 */</span><br>    c = avcodec_alloc_context3(codec);<br>    <span class="hljs-keyword">if</span> (!c) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate video codec context\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 创建 pkt 用于保存编码后的数据 */</span><br>    pkt = av_packet_alloc();<br>    <span class="hljs-keyword">if</span> (!pkt)<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">/* 配置编码参数 */</span><br>    <span class="hljs-comment">//码率400000</span><br>    c-&gt;bit_rate = <span class="hljs-number">400000</span>;<br>    <span class="hljs-comment">//编码分辨率，宽高必须能被2整除</span><br>    c-&gt;width = <span class="hljs-number">352</span>;<br>    c-&gt;height = <span class="hljs-number">288</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     编码的时间基,可以理解为刻度，与 pts 有关</span><br><span class="hljs-comment">     (AVRational)&#123;1, 25&#125; 将1秒钟分成25份，每一份代表 1/25 秒</span><br><span class="hljs-comment">     */</span><br>    c-&gt;time_base = (AVRational)&#123;<span class="hljs-number">1</span>, <span class="hljs-number">25</span>&#125;;<br>    <span class="hljs-comment">/* 编码帧率 25 帧 */</span><br>    c-&gt;framerate = (AVRational)&#123;<span class="hljs-number">25</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-comment">/* 关键帧间隔，每10帧产生一个关键帧, 如果frame-&gt;pict_type 被设置为AV_PICTURE_TYPE_I</span><br><span class="hljs-comment">     gop_size的值会被忽略，编码器不产出B帧和P帧，只会编码I帧</span><br><span class="hljs-comment">     */</span><br>    c-&gt;gop_size = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">/* b帧的个数，实时通信一般设置为0 */</span><br>    c-&gt;max_b_frames = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/* 编码的数据源的格式，yuv420p */</span><br>    c-&gt;pix_fmt = AV_PIX_FMT_YUV420P;<br>    <span class="hljs-comment">/* 如果使用h264编码器，设置preset 为slow */</span><br>    <span class="hljs-keyword">if</span> (codec-&gt;id == AV_CODEC_ID_H264)<br>        av_opt_set(c-&gt;priv_data, <span class="hljs-string">&quot;preset&quot;</span>, <span class="hljs-string">&quot;slow&quot;</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     打开编码器</span><br><span class="hljs-comment">     */</span><br>    ret = avcodec_open2(c, codec, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open codec: %s\n&quot;</span>, av_err2str(ret));<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 打开输出文件 */</span><br>    f = fopen(filename, <span class="hljs-string">&quot;wb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!f) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open %s\n&quot;</span>, filename);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 创建AVFrame用于存放待编码的数据，yuv */</span><br>    frame = av_frame_alloc();<br>    <span class="hljs-keyword">if</span> (!frame) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate video frame\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 设置frame 的颜色格式，宽高 */</span><br>    frame-&gt;format = c-&gt;pix_fmt;<br>    frame-&gt;width  = c-&gt;width;<br>    frame-&gt;height = c-&gt;height;<br>    <span class="hljs-comment">/* 根据上面设置的参数，给frame 内部的 buf 分配内存 */</span><br>    ret = av_frame_get_buffer(frame, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not allocate the video frame data\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 编码1秒钟的数据，上面设置的编码帧率是 25 帧  */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         确保frame中的数据是可写的。</span><br><span class="hljs-comment">         刚开始调用 av_frame_get_buffer()，frame中的数据是可写的。</span><br><span class="hljs-comment">         后面将frame送给编码器去编码，可能被编码器引用，此时frame是不可写的。</span><br><span class="hljs-comment">         调用av_frame_make_writable()会检查frame 是否可写，</span><br><span class="hljs-comment">         如果不可写，会给frame内部重新创建新的buffer。</span><br><span class="hljs-comment">         */</span><br>        ret = av_frame_make_writable(frame);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">/* 给frame填充数据，我们设置的是yuv420，这里填充假数据 */</span><br>        <span class="hljs-comment">/* Y */</span><br>        <span class="hljs-keyword">for</span> (y = <span class="hljs-number">0</span>; y &lt; c-&gt;height; y++) &#123;<br>            <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; x &lt; c-&gt;width; x++) &#123;<br>                frame-&gt;data[<span class="hljs-number">0</span>][y * frame-&gt;linesize[<span class="hljs-number">0</span>] + x] = x + y + i * <span class="hljs-number">3</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/* Cb and Cr */</span><br>        <span class="hljs-keyword">for</span> (y = <span class="hljs-number">0</span>; y &lt; c-&gt;height/<span class="hljs-number">2</span>; y++) &#123;<br>            <span class="hljs-keyword">for</span> (x = <span class="hljs-number">0</span>; x &lt; c-&gt;width/<span class="hljs-number">2</span>; x++) &#123;<br>                frame-&gt;data[<span class="hljs-number">1</span>][y * frame-&gt;linesize[<span class="hljs-number">1</span>] + x] = <span class="hljs-number">128</span> + y + i * <span class="hljs-number">2</span>;<br>                frame-&gt;data[<span class="hljs-number">2</span>][y * frame-&gt;linesize[<span class="hljs-number">2</span>] + x] = <span class="hljs-number">64</span> + x + i * <span class="hljs-number">5</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         设置frame的pts</span><br><span class="hljs-comment">         我们设置的是每秒25帧</span><br><span class="hljs-comment">         对应的时间转成秒是 pts * av_q2d(c-&gt;time_base)</span><br><span class="hljs-comment">         */</span><br>        frame-&gt;pts = i;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         将frame 送给编码器编码，将编码后的数据写入文件</span><br><span class="hljs-comment">         */</span><br>        encode(c, frame, pkt, f);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     冲洗编码器，将剩余的编码后的数据读出来，写入文件</span><br><span class="hljs-comment">     */</span><br>    encode(c, <span class="hljs-literal">NULL</span>, pkt, f);<br><br>    <span class="hljs-comment">/* Add sequence end code to have a real MPEG file.</span><br><span class="hljs-comment">       It makes only sense because this tiny examples writes packets</span><br><span class="hljs-comment">       directly. This is called &quot;elementary stream&quot; and only works for some</span><br><span class="hljs-comment">       codecs. To create a valid file, you usually need to write packets</span><br><span class="hljs-comment">       into a proper file format or protocol; see muxing.c.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (codec-&gt;id == AV_CODEC_ID_MPEG1VIDEO || codec-&gt;id == AV_CODEC_ID_MPEG2VIDEO)<br>        fwrite(endcode, <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(endcode), f);<br><br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(f);<br>    <span class="hljs-comment">//释放资源</span><br>    avcodec_free_context(&amp;c);<br>    av_frame_free(&amp;frame);<br>    av_packet_free(&amp;pkt);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>从命令行中输出文件的路径， 使用的编码器名字</p></li><li><p>根据名字找到对应的编码器</p></li><li><p>创建编码器上下文，设置编码器的参数（码率，时间基，帧率，宽高，颜色格式，b帧个数）</p></li><li><p>打开编码器</p></li><li><p>创建AVFrame 保存待编码的数据</p></li><li><p>创建AVPacket保存编码后的数据</p></li><li><p>编码1秒钟的数据</p></li><li><p>冲洗编码器，将剩余数据读出</p></li><li><p>关闭文件，释放资源</p></li></ol><h3 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(AVCodecContext *enc_ctx, AVFrame *frame, AVPacket *pkt,</span><br><span class="hljs-params">                   FILE *outfile)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-comment">/* send the frame to the encoder */</span><br>    <span class="hljs-keyword">if</span> (frame)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Send frame %3&quot;</span>PRId64<span class="hljs-string">&quot;\n&quot;</span>, frame-&gt;pts);<br><br>    <span class="hljs-comment">//给编码器送frame</span><br>    ret = avcodec_send_frame(enc_ctx, frame);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error sending a frame for encoding\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//从编码器读pkt</span><br>        ret = avcodec_receive_packet(enc_ctx, pkt);<br>        <span class="hljs-keyword">if</span> (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)<br>        &#123;<br>            <span class="hljs-comment">//EAGAIN 代表需要继续送入 frame 才可以开始读取</span><br>            <span class="hljs-comment">//AVERROR_EOF 代表编码器已经没有数据可以读了</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error during encoding\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Write packet %3&quot;</span>PRId64<span class="hljs-string">&quot; (size=%5d)\n&quot;</span>, pkt-&gt;pts, pkt-&gt;size);<br>        <span class="hljs-comment">//将编码后的数据写入文件</span><br>        fwrite(pkt-&gt;data, <span class="hljs-number">1</span>, pkt-&gt;size, outfile);<br>        <span class="hljs-comment">//取消引用pkt</span><br>        av_packet_unref(pkt);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>调用   avcodec_send_frame 给编码器送frame</p></li><li><p>循环调用avcodec_receive_packet 从编码器读pkt</p><ul><li><p>EAGAIN 代表需要继续送入 frame 才可以开始读取</p></li><li><p>AVERROR_EOF 代表编码器已经没有数据可以读了,例如传入空的frame，对编码器进行了flush操作</p></li></ul></li><li><p>将编码后数据写入文件</p></li><li><p>取消引用pkt</p></li></ol><p>最后输出的文件，可以使用ffplay 进行播放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  /tmp ffplay -i encode_video.h264<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16469965503041646996550013.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg example 1.解封装，解码学习</title>
    <link href="/2022/03/10/ffmpeg/2022-03-10-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%201/"/>
    <url>/2022/03/10/ffmpeg/2022-03-10-ffmpeg%20example%20%E5%AD%A6%E4%B9%A0%201/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>学习ffmpeg，打算从源码入手，源码又太多太复杂。好在ffmpeg提供了示例代码，演示如何使用ffmpeg的api， 示例代码位于<code>ffmpeg/doc/examples</code>目录下，可以<a href="https://yxibng.github.io/2022/03/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vscode%E5%9C%A8macOS%E5%B9%B3%E5%8F%B0%E8%B0%83%E8%AF%95ffmpeg/">通过vscode 来调试</a>这些示例代码，理解ffmpeg的调用方式。</p><p>该目录下的示例代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468967433771646896743076.png"></p><ul><li><p>decode_audio.c  演示如何解码音频</p></li><li><p>decode_video.c  演示如何解码视频</p></li><li><p>demuxing_decoding.c  演示如何解封装文件，和解码音视频</p></li></ul><p>今天来分析 <code>demuxing_decoding.c</code></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>使用的模块<code>libavutil</code>,<code>libavcodec</code>,<code>libavformat</code></p><ul><li><p>libavutil  包含一些公共的工具函数</p></li><li><p>libavcodec 用于各种类型声音&#x2F;图像编解码</p></li><li><p>libavformat 用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文结构和读取音视频帧等功能，包含demuxers和muxer库</p></li></ul><h3 id="1-解封装"><a href="#1-解封装" class="headerlink" title="1.解封装"></a>1.解封装</h3><ol><li><p>打开文件、获取封装信息上下文AVFormatContext（avformat_open_input）</p></li><li><p>获取媒体文件音视频信息，这一步会将AVFormatContext内部变量填充（avformat_find_stream_info）</p></li><li><p>获取音视频流ID。一般有两种方法：</p><ol><li><p>遍历AVFormatContext内部所有的stream，如果stream的codec_type对应为audio&#x2F;video，这记录当前stream的ID；</p></li><li><p>FFmpeg提供av_find_best_stream接口，可以直接获取相应类型（audio or video）的流ID</p></li></ol></li><li><p>获取流的每一帧数据（av_read_frame）  </p></li><li><p>关闭文件</p></li></ol><h3 id="2-解码"><a href="#2-解码" class="headerlink" title="2.解码"></a>2.解码</h3><p>解码在解封装的基础上，将每一帧数据进行解码。步骤如下：</p><ol><li><p>申请解码器上下文AVCodecContext（avcodec_alloc_context3）</p></li><li><p>初始化AVCodecContext参数，可以使用将解封装得到的流的解码器参数设置进来（avcodec_parameters_to_context）</p></li><li><p>打开解码器（avcodec_open2）</p></li><li><p>解码每一帧数据。只需要将解封装获取的帧传递给解码器（avcodec_send_packet），再接收即可（avcodec_receive_frame）</p></li><li><p>关闭文件和解码器</p></li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h4 id="main-函数，简化版"><a href="#main-函数，简化版" class="headerlink" title="main 函数，简化版"></a>main 函数，简化版</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     打开输入文件，创建AVFormatContext</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (avformat_open_input(&amp;fmt_ctx, src_filename, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not open source file %s\n&quot;</span>, src_filename);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取封装格式中的音视频信息，填充在AVFormatContext中 */</span><br>    <span class="hljs-keyword">if</span> (avformat_find_stream_info(fmt_ctx, <span class="hljs-literal">NULL</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not find stream information\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 从 fmt_ctx 读取视频对应的AVStream</span><br><span class="hljs-comment">    2. 从 AVStream 读取解码相关的 AVCodec</span><br><span class="hljs-comment">    3. 根据 AVCodec 创建 AVCodecContext，根据 AVStream 给 AVCodecContext 填充解码参数</span><br><span class="hljs-comment">    4. 打开解码器</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (open_codec_context(&amp;video_stream_idx, &amp;video_dec_ctx, fmt_ctx, AVMEDIA_TYPE_VIDEO) &gt;= <span class="hljs-number">0</span>) &#123;<br>        video_stream = fmt_ctx-&gt;streams[video_stream_idx];<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 从 fmt_ctx 读取音频对应的AVStream</span><br><span class="hljs-comment">    2. 从 AVStream 读取解码相关的 AVCodec</span><br><span class="hljs-comment">    3. 根据 AVCodec 创建 AVCodecContext，根据 AVStream 给 AVCodecContext 填充解码参数</span><br><span class="hljs-comment">    4. 打开解码器</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (open_codec_context(&amp;audio_stream_idx, &amp;audio_dec_ctx, fmt_ctx, AVMEDIA_TYPE_AUDIO) &gt;= <span class="hljs-number">0</span>) &#123;<br>        audio_stream = fmt_ctx-&gt;streams[audio_stream_idx];<br>    &#125;<br><br>    <span class="hljs-comment">//创建frame, 用于存储解码后的数据</span><br>    frame = av_frame_alloc();<br>    <span class="hljs-comment">//创建pkt，用于存储解封装后从文件中读取的音视频包</span><br>    pkt = av_packet_alloc();<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    从文件中循环读取音视频帧，存入pkt</span><br><span class="hljs-comment">    根据类型区分音频帧还是视频帧，分别送给对应的解码器去解码</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">while</span> (av_read_frame(fmt_ctx, pkt) &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// check if the packet belongs to a stream we are interested in, otherwise</span><br>        <span class="hljs-comment">// skip it</span><br>        <span class="hljs-keyword">if</span> (pkt-&gt;stream_index == video_stream_idx)<br>            ret = decode_packet(video_dec_ctx, pkt);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pkt-&gt;stream_index == audio_stream_idx)<br>            ret = decode_packet(audio_dec_ctx, pkt);<br>        av_packet_unref(pkt);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 冲洗音视频解码器，将剩余的解码数据读出来 */</span><br>    <span class="hljs-keyword">if</span> (video_dec_ctx)<br>        decode_packet(video_dec_ctx, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (audio_dec_ctx)<br>        decode_packet(audio_dec_ctx, <span class="hljs-literal">NULL</span>);<br>end:<br>    <span class="hljs-comment">//资源释放和退出</span><br>    avcodec_free_context(&amp;video_dec_ctx);<br>    avcodec_free_context(&amp;audio_dec_ctx);<br>    avformat_close_input(&amp;fmt_ctx);<br>    <span class="hljs-keyword">if</span> (video_dst_file)<br>        fclose(video_dst_file);<br>    <span class="hljs-keyword">if</span> (audio_dst_file)<br>        fclose(audio_dst_file);<br>    av_packet_free(&amp;pkt);<br>    av_frame_free(&amp;frame);<br>    av_free(video_dst_data[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">return</span> ret &lt; <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>验证输入参数是否正确</p></li><li><p>打开文件，读取封装信息</p></li><li><p>根据封装信息，分别创建视频解码器和音频解码器</p></li><li><p>循环从文件中读取pkt</p><ol><li><p>如果是视频数据，送到视频解码器，解码后写入视频文件</p></li><li><p>如果是音频数据，送到音频解码器，解码后写入音频文件</p></li></ol></li><li><p>冲洗音频视频解码器，读取剩余数据</p></li><li><p>清理资源退出</p></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h4 id="open-codec-context"><a href="#open-codec-context" class="headerlink" title="open_codec_context"></a>open_codec_context</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">open_codec_context</span><span class="hljs-params">(<span class="hljs-type">int</span> *stream_idx,</span><br><span class="hljs-params">                              AVCodecContext **dec_ctx, AVFormatContext *fmt_ctx, <span class="hljs-keyword">enum</span> AVMediaType type)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret, stream_index;<br>    AVStream *st;<br>    <span class="hljs-type">const</span> AVCodec *dec = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//找到音频/视频对应的stream_index</span><br>    ret = av_find_best_stream(fmt_ctx, type, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Could not find %s stream in input file &#x27;%s&#x27;\n&quot;</span>,<br>                av_get_media_type_string(type), src_filename);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        stream_index = ret;<br>        <span class="hljs-comment">//获取音频/视频对应的AVStream</span><br>        st = fmt_ctx-&gt;streams[stream_index];<br><br>        <span class="hljs-comment">/* 获取解码对应的AVCodec */</span><br>        dec = avcodec_find_decoder(st-&gt;codecpar-&gt;codec_id);<br>        <span class="hljs-keyword">if</span> (!dec) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to find %s codec\n&quot;</span>,<br>                    av_get_media_type_string(type));<br>            <span class="hljs-keyword">return</span> AVERROR(EINVAL);<br>        &#125;<br><br>        <span class="hljs-comment">/* 根据AVCodec 创建 AVCodecContext */</span><br>        *dec_ctx = avcodec_alloc_context3(dec);<br>        <span class="hljs-keyword">if</span> (!*dec_ctx) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to allocate the %s codec context\n&quot;</span>,<br>                    av_get_media_type_string(type));<br>            <span class="hljs-keyword">return</span> AVERROR(ENOMEM);<br>        &#125;<br>        <span class="hljs-comment">/* 将AVStream的codecpar中保存的解码相关的参数，填充到AVCodecContext中 */</span><br>        <span class="hljs-keyword">if</span> ((ret = avcodec_parameters_to_context(*dec_ctx, st-&gt;codecpar)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to copy %s codec parameters to decoder context\n&quot;</span>,<br>                    av_get_media_type_string(type));<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br><br>        <span class="hljs-comment">/* 打开解码器 */</span><br>        <span class="hljs-keyword">if</span> ((ret = avcodec_open2(*dec_ctx, dec, <span class="hljs-literal">NULL</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to open %s codec\n&quot;</span>,<br>                    av_get_media_type_string(type));<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>        <span class="hljs-comment">//stream_index回传</span><br>        *stream_idx = stream_index;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>获取AVStream</p></li><li><p>从AVStream读取解码信息，创建AVCodecContext</p></li><li><p>给AVCodecContext配置参数</p></li><li><p>打开解码器</p></li></ol><h4 id="decode-packet"><a href="#decode-packet" class="headerlink" title="decode_packet"></a>decode_packet</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">decode_packet</span><span class="hljs-params">(AVCodecContext *dec, <span class="hljs-type">const</span> AVPacket *pkt)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// submit the packet to the decoder</span><br>    ret = avcodec_send_packet(dec, pkt);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error submitting a packet for decoding (%s)\n&quot;</span>, av_err2str(ret));<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-comment">// get all the available frames from the decoder</span><br>    <span class="hljs-keyword">while</span> (ret &gt;= <span class="hljs-number">0</span>) &#123;<br>        ret = avcodec_receive_frame(dec, frame);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// those two return values are special and mean there is no output</span><br>            <span class="hljs-comment">// frame available, but there were no errors during decoding</span><br>            <span class="hljs-keyword">if</span> (ret == AVERROR_EOF || ret == AVERROR(EAGAIN))<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error during decoding (%s)\n&quot;</span>, av_err2str(ret));<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br><br>        <span class="hljs-comment">// write the frame data to output file</span><br>        <span class="hljs-keyword">if</span> (dec-&gt;codec-&gt;type == AVMEDIA_TYPE_VIDEO)<br>            ret = output_video_frame(frame);<br>        <span class="hljs-keyword">else</span><br>            ret = output_audio_frame(frame);<br><br>        av_frame_unref(frame);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>调用avcodec_send_packet给解码器送pkt</p></li><li><p>调用avcodec_receive_frame从解码器读frame</p></li><li><p>调用output_video_frame将解码后视频写文件，调用output_audio_frame将解码后音频写文件</p></li></ol><h4 id="output-video-frame"><a href="#output-video-frame" class="headerlink" title="output_video_frame"></a>output_video_frame</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output_video_frame</span><span class="hljs-params">(AVFrame *frame)</span><br>&#123;<br>    <span class="hljs-comment">//解码中，发现宽高或者格式变了，报错</span><br>    <span class="hljs-keyword">if</span> (frame-&gt;width != width || frame-&gt;height != height ||<br>        frame-&gt;format != pix_fmt) &#123;<br>        <span class="hljs-comment">/* To handle this change, one could call av_image_alloc again and</span><br><span class="hljs-comment">         * decode the following frames into another rawvideo file. */</span><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Error: Width, height and pixel format have to be &quot;</span><br>                <span class="hljs-string">&quot;constant in a rawvideo file, but the width, height or &quot;</span><br>                <span class="hljs-string">&quot;pixel format of the input video changed:\n&quot;</span><br>                <span class="hljs-string">&quot;old: width = %d, height = %d, format = %s\n&quot;</span><br>                <span class="hljs-string">&quot;new: width = %d, height = %d, format = %s\n&quot;</span>,<br>                width, height, av_get_pix_fmt_name(pix_fmt),<br>                frame-&gt;width, frame-&gt;height,<br>                av_get_pix_fmt_name(frame-&gt;format));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;video_frame n:%d coded_n:%d\n&quot;</span>,<br>           video_frame_count++, frame-&gt;coded_picture_number);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     从frame中读取解码后的数据，拷贝到之前申请的buffer中</span><br><span class="hljs-comment">     调用av_image_copy是为了去除frame中可能的字节对齐的数据</span><br><span class="hljs-comment">     写入文件中的数据，要求不含有字节对齐的数据</span><br><span class="hljs-comment">    */</span><br><br>    av_image_copy(video_dst_data, video_dst_linesize,<br>                  (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> **)(frame-&gt;data), frame-&gt;linesize,<br>                  pix_fmt, width, height);<br><br>    <span class="hljs-comment">/* write to rawvideo file */</span><br>    fwrite(video_dst_data[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, video_dst_bufsize, video_dst_file);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>判断解码后的宽高，格式是否变更，写入文件的宽高，格式应该是一致的，如果变更就报错</p></li><li><p>将frame中的数据拷贝到之前申请的buffer中，拷贝的时候，去除字节对齐数据</p></li><li><p>将buffer中的数据写入文件</p></li></ol><h4 id="output-audio-frame"><a href="#output-audio-frame" class="headerlink" title="output_audio_frame"></a>output_audio_frame</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">output_audio_frame</span><span class="hljs-params">(AVFrame *frame)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> unpadded_linesize = frame-&gt;nb_samples * av_get_bytes_per_sample(frame-&gt;format);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;audio_frame n:%d nb_samples:%d pts:%s\n&quot;</span>,<br>           audio_frame_count++, frame-&gt;nb_samples,<br>           av_ts2timestr(frame-&gt;pts, &amp;audio_dec_ctx-&gt;time_base));<br><br>    <span class="hljs-comment">/* Write the raw audio data samples of the first plane. This works</span><br><span class="hljs-comment">     * fine for packed formats (e.g. AV_SAMPLE_FMT_S16). However,</span><br><span class="hljs-comment">     * most audio decoders output planar audio, which uses a separate</span><br><span class="hljs-comment">     * plane of audio samples for each channel (e.g. AV_SAMPLE_FMT_S16P).</span><br><span class="hljs-comment">     * In other words, this code will write only the first audio channel</span><br><span class="hljs-comment">     * in these cases.</span><br><span class="hljs-comment">     * You should use libswresample or libavfilter to convert the frame</span><br><span class="hljs-comment">     * to packed data. */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    只写了第一个声道的数据，如果是平面多声道，使用libswresample或libavfilter将其转化为交错类型的音频再写入文件</span><br><span class="hljs-comment">    */</span><br>    fwrite(frame-&gt;extended_data[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, unpadded_linesize, audio_dst_file);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>将frame中的音频的第一个声道数据写入文件</p></li><li><p>如果想写入多声道，需要通过libswresample或libavfilter转为交错型的再写入文件</p><hr></li></ol><p>参考了： <a href="https://blog.csdn.net/myvest/article/details/89254452">FFmpeg 封装、解封装及解码的流程简介_myvest的专栏-CSDN博客_ffmpeg 封装流程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Xcode调试ffmpeg</title>
    <link href="/2022/03/09/ffmpeg/2022-03-09-%E4%BD%BF%E7%94%A8Xcode%E8%B0%83%E8%AF%95ffmpeg/"/>
    <url>/2022/03/09/ffmpeg/2022-03-09-%E4%BD%BF%E7%94%A8Xcode%E8%B0%83%E8%AF%95ffmpeg/</url>
    
    <content type="html"><![CDATA[<p>ffmpeg 源码 <a href="https://github.com/FFmpeg/FFmpeg.git">https://github.com/FFmpeg/FFmpeg.git</a></p><h2 id="ffmpeg-配置-使其支持调试"><a href="#ffmpeg-配置-使其支持调试" class="headerlink" title="ffmpeg 配置, 使其支持调试"></a>ffmpeg 配置, 使其支持调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure  --disable-optimizations --disable-stripping --enable-debug=3 --disable-doc<br>make -j `<span class="hljs-built_in">nproc</span>`<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/1646798696028ceaddb1d1dd2473496faad4c1883ba1d.png" alt="image20210422182014703png"> </p><p>以<code>_g</code>结尾的就是可以调试的程序<code>ffmpeg_g, ffplay_g, ffprobe_g</code></p><h2 id="Xcode-配置"><a href="#Xcode-配置" class="headerlink" title="Xcode 配置"></a>Xcode 配置</h2><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468770121471646877011522.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468770571461646877056550.png"></p><p>把 ffmpeg 目录拖进工程，等待添加完成，可能时间较久</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468356217741646835620857.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468772051421646877204301.png">等待加载完毕</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468780312171646878030941.png"></p><p>添加target， 比如说调试<code>ffplay_g</code></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468360299171646836029894.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468360897771646836089376.png"></p><p>修改对应的路径</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468361877781646836187409.png"></p><p>修改scheme，选择<code>ffplay_g</code>为可执行目标</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468363477791646836347004.png"></p><p>给<code>ffplay_g</code>传递参数</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468366427811646836642007.png"></p><p>开始打断点调试吧</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468367127821646836712289.png"></p><h2 id="调试-ffmpeg官方的示例程序，示例位于ffmpeg-doc-examples路径下面"><a href="#调试-ffmpeg官方的示例程序，示例位于ffmpeg-doc-examples路径下面" class="headerlink" title="调试 ffmpeg官方的示例程序，示例位于ffmpeg/doc/examples路径下面"></a>调试 ffmpeg官方的示例程序，示例位于<code>ffmpeg/doc/examples</code>路径下面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ffmpeg<br>make examples<br></code></pre></td></tr></table></figure><p>后缀带<code>_g</code>的都是可以调试的</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468370517811646837051618.png"></p><p>与调试ffplay_g一样，添加target，配置路径，配置可执行目标，添加参数，愉快地调试吧！</p><hr><p>参考： <a href="https://www.jianshu.com/p/27a90b113413">Xcode调试ffmpeg源码(十五) - 简书</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用vscode在macOS平台调试ffmpeg</title>
    <link href="/2022/03/09/ffmpeg/2022-03-09-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vscode%E5%9C%A8macOS%E5%B9%B3%E5%8F%B0%E8%B0%83%E8%AF%95ffmpeg/"/>
    <url>/2022/03/09/ffmpeg/2022-03-09-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8vscode%E5%9C%A8macOS%E5%B9%B3%E5%8F%B0%E8%B0%83%E8%AF%95ffmpeg/</url>
    
    <content type="html"><![CDATA[<h1 id="使用vscode调试ffmpeg"><a href="#使用vscode调试ffmpeg" class="headerlink" title="使用vscode调试ffmpeg"></a>使用vscode调试ffmpeg</h1><p>准备知识：<a href="https://code.visualstudio.com/docs/cpp/cpp-debug">Debug C++ in Visual Studio Code</a></p><p>ffmpeg 源码 <a href="https://github.com/FFmpeg/FFmpeg.git">https://github.com/FFmpeg/FFmpeg.git</a></p><h2 id="ffmpeg-配置-使其支持调试"><a href="#ffmpeg-配置-使其支持调试" class="headerlink" title="ffmpeg 配置, 使其支持调试"></a>ffmpeg 配置, 使其支持调试</h2><p>关于<code>-g3</code>相关知识<a href="https://stackoverflow.com/questions/10475040/gcc-g-vs-g3-gdb-flag-what-is-the-difference">gcc-g-vs-g3-gdb-flag-what-is-the-difference</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure  --disable-optimizations --disable-stripping --enable-debug=3 --disable-doc<br>make -j `<span class="hljs-built_in">nproc</span>`<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/1646798696028ceaddb1d1dd2473496faad4c1883ba1d.png" alt="image-20210422182014703.png"><br>以<code>_g</code>结尾的就是可以调试的程序<code>ffmpeg_g, ffplay_g, ffprobe_g</code></p><h2 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h2><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/1646798890870e47d61888a5e4095b6b1fd9c30246471.png" alt="image-20210422181630503.png"></p><p>如下命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># macOS上列出所有的音视频设备</span><br><span class="hljs-attribute">ffmpeg</span> -f avfoundation -list_devices <span class="hljs-literal">true</span> -i <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>launch.json 对应的配置</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart">&#123;<br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;(lldb) Launch&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,<br>            <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-string">&quot;program&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;workspaceFolder&#125;</span>/ffmpeg_g&quot;</span>,<br>            <span class="hljs-string">&quot;args&quot;</span>: [<span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;avfoundation&quot;</span>, <span class="hljs-string">&quot;-list_devices&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;&quot;</span>],<br>            <span class="hljs-string">&quot;stopAtEntry&quot;</span>: <span class="hljs-keyword">false</span>,<br>            <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;workspaceFolder&#125;</span>&quot;</span>,<br>            <span class="hljs-string">&quot;environment&quot;</span>: [],<br>            <span class="hljs-string">&quot;externalConsole&quot;</span>: <span class="hljs-keyword">false</span>,<br>            <span class="hljs-string">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;lldb&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>打上断点，点击运行，就可以愉快的调试了<br><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/164679893487073e861799f104c449a57f809f7e7c1e1.png"></p><p>附上链接：lldb 使用教程 <a href="https://lldb.llvm.org/use/tutorial.html">Tutorial</a></p><h1 id="调试ffmpeg-doc-example"><a href="#调试ffmpeg-doc-example" class="headerlink" title="调试ffmpeg&#x2F;doc&#x2F;example"></a>调试ffmpeg&#x2F;doc&#x2F;example</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make examples <br></code></pre></td></tr></table></figure><p>在ffmpeg&#x2F;doc&#x2F;example目录下, 以<code>_g</code>结尾的就是可以调试的</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468208261531646820825284.png"></p><p>配置launch.json</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468210321531646821031535.png"></p><p>开始调试吧</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16468211571521646821156644.png"></p><h2 id="修改代码重新编译"><a href="#修改代码重新编译" class="headerlink" title="修改代码重新编译"></a>修改代码重新编译</h2><p> 例如你在调试的时候，修改了ffmpeg的源码，想调试一下更改后的代码，需要重新编译生成。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> ffmpeg<br><span class="hljs-keyword">make</span> -<span class="hljs-keyword">j</span> <span class="hljs-number">16</span><br><span class="hljs-keyword">make</span> examples<br></code></pre></td></tr></table></figure><p>你想自动化这个过程，在调试之前自动编译，如何实现呢？</p><h4 id="配置-prelaunchTask"><a href="#配置-prelaunchTask" class="headerlink" title="配置 prelaunchTask"></a>配置 <code>prelaunchTask</code></h4><ol><li><p>在tasks.json中添加一个task</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart">&#123;<br>    <span class="hljs-comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span><br>    <span class="hljs-comment">// for the documentation about the tasks.json format</span><br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;tasks&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;make&quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,<br>            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;make -j 16; make examples&quot;</span>,<br>            <span class="hljs-string">&quot;problemMatcher&quot;</span>: [],<br>            <span class="hljs-string">&quot;group&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,<br>                <span class="hljs-string">&quot;isDefault&quot;</span>: <span class="hljs-keyword">true</span><br>            &#125;,<br>            <span class="hljs-string">&quot;options&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;workspaceFolder&#125;</span>&quot;</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在launch.json中配置prelaunchTask</p><p><img src="https://cdn.jsdelivr.net/gh/yxibng/filebed@main/img/images/blog/16472372959411647237295151.png"></p></li></ol><p>然后修改代码，点击调试， vscode 自动执行make，编译修改后的文件，重新生成可执行程序。然后就可以愉快地修改代码，调试，修改也会即时生效。</p><h2 id="备注：m1-芯片的mac-如果遇到调试问题"><a href="#备注：m1-芯片的mac-如果遇到调试问题" class="headerlink" title="备注：m1 芯片的mac 如果遇到调试问题"></a>备注：m1 芯片的mac 如果遇到调试问题</h2><p><a href="https://github.com/microsoft/vscode-cpptools/issues/6779"> ERROR: Unable to start debugging. Unexpected LLDB output from command “-exec-run”. process exited with status -1 (attach failed ((os&#x2F;kern) invalid argument)) </a></p><p>解决办法：</p><p>使用 <code>CodeLLDB debugger</code>插件，而不是vc code 原生的调试插件</p><blockquote><p>I would suggest you to use CodeLLDB debugger (vadimcn.vscode-lldb). It’s an extension in VSCode and works exactly like the native debugger in VSCode. For its setup, you just need to change the configuration of your launch.json file with the one provided by the extension. And that should do the trick.</p></blockquote><blockquote><p>Now if you would try to debug then, VSCode will make use of that extension and should be able to debug your programs as it was to be done by the native debugger.</p></blockquote><blockquote><p>I am personally using it on my M1 chip MacBook Air, and it works perfectly fine. According to me, It’s much easier to implement than other workarounds present at the moment.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 变量</title>
    <link href="/2022/02/25/Shell/2022-02-25-Shell%20%E5%8F%98%E9%87%8F/"/>
    <url>/2022/02/25/Shell/2022-02-25-Shell%20%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h1><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>The name of a variable can contain only letters (a to z or A to Z), numbers ( 0 to 9) or the underscore character ( _).</p><p>By convention, Unix shell variables will have their names in UPPERCASE.</p><p>合法的变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">_ALI<br>TOKEN_A<br>VAR_1<br>VAR_2<br></code></pre></td></tr></table></figure><p>非法变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">2_VAR<br>-VARIABLE<br>VAR1-VAR2<br>VAR_A!<br></code></pre></td></tr></table></figure><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">variable_name=variable_value<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME=&quot;Zara Ali&quot;<br></code></pre></td></tr></table></figure><p>shell 允许变量存你想要的任何值， 例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">VAR1=&quot;Zara Ali&quot;<br>VAR2=100<br></code></pre></td></tr></table></figure><h2 id="获取变量的值"><a href="#获取变量的值" class="headerlink" title="获取变量的值"></a>获取变量的值</h2><p>通过在变量前添加<code>$</code>来引用变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>NAME=&quot;Zara Ali&quot;<br>echo $NAME<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Zara Ali<br></code></pre></td></tr></table></figure><h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h2><p>在变量前添加<code>readonly</code>将变量标记为只读，只读变量不允许被修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>NAME=&quot;Zara Ali&quot;<br>readonly NAME<br>NAME=&quot;Qadiri&quot;<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME: readonly variable<br></code></pre></td></tr></table></figure><h2 id="删除一个变量"><a href="#删除一个变量" class="headerlink" title="删除一个变量"></a>删除一个变量</h2><p>使用<code>unset</code>命令删除一个变量，变量被删除后，无法访问该变量的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset variable_name<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>NAME=&quot;Zara Ali&quot;<br>unset NAME<br>echo $NAME<br></code></pre></td></tr></table></figure><p>NAME 被删除， 输出为空。</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li><p>本地变量</p><ul><li>使用<code>local</code>关键字修饰的变量</li><li>只能用在函数内部</li><li>如果与全局变量同名，在函数内部，会屏蔽同名的全局变量</li><li>函数的参数是<code>local</code>的</li></ul></li><li><p>shell 全局变量</p><ul><li>在 Shell 中定义的变量，默认就是全局变量。</li><li>在函数内部定义的变量，没有用<code>local</code>关键字修饰，也是全局变量</li></ul></li><li><p>环境变量</p><ul><li>全局变量只在当前 Shell 进程中有效，对其它 Shell 进程和子进程都无效。如果使用<code>export</code>命令将全局变量导出，那么它就在所有的子进程中也有效了，这称为“环境变量”。</li></ul></li></ul><p>在shell 函数中定义的变量也是全局变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义函数</span><br>function func()&#123;<br>    a=99<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">调用函数</span><br>func<br><span class="hljs-meta prompt_">#</span><span class="language-bash">输出函数内部的变量</span><br>echo $a<br></code></pre></td></tr></table></figure><p>输出结果： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">99<br></code></pre></td></tr></table></figure><p>要想变量的作用域仅限于函数内部，可以在定义时加上<code>local</code>命令，此时该变量就成了局部变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义函数</span><br>function func()&#123;<br>    local a=99<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">调用函数</span><br>func<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">输出函数内部的变量</span><br>echo $a<br></code></pre></td></tr></table></figure><p>输出结果为空，表明变量 a 在函数外部无效，是一个局部变量。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 数组</title>
    <link href="/2022/02/25/Shell/2022-02-25-Shell%20%E6%95%B0%E7%BB%84/"/>
    <url>/2022/02/25/Shell/2022-02-25-Shell%20%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h1><p>参考： <a href="https://blog.csdn.net/Jerry_1126/article/details/52027539">Shell中的数组及其相关操作_杰瑞的专栏-CSDN博客</a></p><p>应用场景：</p><ol><li><p>求数组的长度</p></li><li><p>元素长度</p></li><li><p>遍历数组</p></li><li><p>元素切片</p></li><li><p>替换</p></li><li><p>删除</p></li></ol><p>备注：</p><ol><li><p>Shell中的数组不像JAVA&#x2F;C，只能是一维数组， 没有二维数组</p></li><li><p>数组元素大小无约束，也无需先定义数组的元素个数</p></li><li><p>索引从0开始</p></li><li><p>不像JAVA&#x2F;C等强编程语言，在赋值前必须声明；SHELL只是弱编程语言，可事先声明也可不声明；</p></li><li><p>用unset来撤销数组，可用unset array_name[i]来删除里面的元素</p></li></ol><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -a array_name       # 声明数组，也可不声明<br>declare -a nums=(1 2 3 4)   # 声明数组， 同时赋值<br>unset array_name            # 删除数组，撤销数组<br>unset nums[0]               # 删除数组中某个元素<br></code></pre></td></tr></table></figure><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方式一：</span><br>array_names=(<br>value0<br>valuel<br>value2<br>value3<br>)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式二：</span><br>names=(Jerry Alice David wendy)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式三：</span><br>names[0]=Jerry<br>names[1]=Alice<br>names[2]=David<br>names[3]=Wendy<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式四：</span><br>names=([0]=Jerry [1]=Alice [2]=David [3]=Wendy)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式五：</span><br>str=&quot;Jerry Alice David Wendy&quot;<br>names=($str)<br></code></pre></td></tr></table></figure><p>备注：</p><ol><li><p>数组中的元素，必须用”空格”来隔开</p></li><li><p>定义数组索引，可以不按顺序来，例如，<code>names=([0]=Jerry [1]=Alice [2]=David [8]=Wendy)</code></p></li><li><p>字符串是SHELL中最重要的数据类型，其也可通过<code>($str)</code>来转成数组，操作起来非常方便</p></li></ol><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nums=(Jerry Alice David Wendy)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式1 <span class="hljs-variable">$&#123;#数组名[@]&#125;</span></span><br>~ echo $&#123;#nums[@]&#125;<br>4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">方式2 <span class="hljs-variable">$&#123;#数组名[*]&#125;</span></span><br>~ echo $&#123;#nums[*]&#125;<br>4<br></code></pre></td></tr></table></figure><p>备注：</p><ol><li><p>使用<code>$&#123;array_name[@]&#125;</code> 或者 <code>$&#123;array_name[*]&#125;</code> 都可以全部显示数组中的元素</p></li><li><p>同样道理<code>$&#123;#array_name[@]&#125;</code> 或者 <code>$&#123;#array_name[*]&#125;</code>都可以用来求数组的长度</p></li><li><p>求数组中元素的长度方法有很多，相当于求字符串的长度</p></li></ol><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">names=(Jerry Alice David Wendy)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式一： 按索引来遍历</span><br>for((i=0;i&lt;$&#123;#names[@]&#125;;i++))<br>do <br>    echo $&#123;names[$i]&#125;<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二： 不按索引来遍历</span><br>index=0<br>for name in $&#123;names[@]&#125; <br>do <br>    echo &quot;第$&#123;index&#125;个元素的值为：==&gt; $&#123;name&#125;&quot;<br>    let index++<br>done<br><br></code></pre></td></tr></table></figure><h2 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nums=(1 2 3 4)  # 定义数组<br>nums[3]=44      # 第三个元素重新赋值<br>echo $&#123;nums[@]&#125; # 结果变成了 1 2 3 44<br></code></pre></td></tr></table></figure><p><strong>备注:</strong></p><ol><li><p>第一种是给已经存在的元素项重新赋值</p></li><li><p>当然也可以给不存在的索引添加赋值，可以看下面的示例</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 数组添加元素</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式-： 给不存在的索引赋值</span><br>nums=(1 2 3 4)  # 定义数组<br>nums[4]=5       # 给第四个新元素赋值<br>echo $&#123;nums[@]&#125; # 结果变成了 1 2 3 4 5<br>nums[8]=8       # 给第8个元素赋值<br>echo $&#123;nums[@]&#125; # 结果变成了 1 2 3 4 5 8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二： 直接使用 新数组=(旧数组 新元素) 的方法添加元素</span><br>old=(1 2 3 4)<br>new=($&#123;old[*]&#125; 5)<br>echo $&#123;new[@]&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 函数</title>
    <link href="/2022/02/25/Shell/2022-02-25-shell%20%E5%87%BD%E6%95%B0/"/>
    <url>/2022/02/25/Shell/2022-02-25-shell%20%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-函数"><a href="#shell-函数" class="headerlink" title="shell 函数"></a>shell 函数</h1><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">function_name () &#123; <br>   list of commands<br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Define your <span class="hljs-keyword">function</span> here</span><br>Hello () &#123;<br>   echo &quot;Hello World&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Invoke your <span class="hljs-keyword">function</span></span><br>Hello<br></code></pre></td></tr></table></figure><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>函数传参类似于脚本传参<code>$1, $2..$n</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Define your <span class="hljs-keyword">function</span> here</span><br>Hello () &#123;<br>   echo &quot;Hello World $1 $2&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Invoke your <span class="hljs-keyword">function</span></span><br>Hello Zara Ali<br></code></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Define your <span class="hljs-keyword">function</span> here</span><br>Hello () &#123;<br>   echo &quot;Hello World $1 $2&quot;<br>   return 10<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Invoke your <span class="hljs-keyword">function</span></span><br>Hello Zara Ali<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Capture value returnd by last <span class="hljs-built_in">command</span></span><br>ret=$?<br><br>echo &quot;Return value is $ret&quot;<br></code></pre></td></tr></table></figure><h2 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Calling one <span class="hljs-keyword">function</span> from another</span><br>number_one () &#123;<br>   echo &quot;This is the first function speaking...&quot;<br>   number_two<br>&#125;<br><br>number_two () &#123;<br>   echo &quot;This is now the second function speaking...&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Calling <span class="hljs-keyword">function</span> one.</span><br>number_one<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 循环语句</title>
    <link href="/2022/02/25/Shell/2022-02-25-shell%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/02/25/Shell/2022-02-25-shell%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-循环语句"><a href="#shell-循环语句" class="headerlink" title="shell 循环语句"></a>shell 循环语句</h1><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>while 循环可以嵌套，语法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">while command1 ; # this is loop1, the outer loop<br>do<br>   Statement(s) to be executed if command1 is true<br><br>   while command2 ; # this is loop2, the inner loop<br>   do<br>      Statement(s) to be executed if command2 is true<br>   done<br><br>   Statement(s) to be executed if command1 is true<br>done<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=0<br>while [ &quot;$a&quot; -lt 10 ]    # this is loop1<br>do<br>   b=&quot;$a&quot;<br>   while [ &quot;$b&quot; -ge 0 ]  # this is loop2<br>   do<br>      echo -n &quot;$b &quot;<br>      b=`expr $b - 1`<br>   done<br>   echo<br>   a=`expr $a + 1`<br>done<br></code></pre></td></tr></table></figure><h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break&#x2F;continue"></a>break&#x2F;continue</h2><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">break       #跳出当前循环<br>break n     #跳出多重循环<br><br>continue    #当前循环 continue<br>continue n  #n指定的外层循环 continue<br></code></pre></td></tr></table></figure><p>跳出当前循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=0<br><br>while [ $a -lt 10 ]<br>do<br>   echo $a<br>   if [ $a -eq 5 ]<br>   then<br>      break<br>   fi<br>   a=`expr $a + 1`<br>done<br></code></pre></td></tr></table></figure><p>跳出外层循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>for var1 in 1 2 3<br>do<br>   for var2 in 0 5<br>   do<br>      if [ $var1 -eq 2 -a $var2 -eq 0 ]<br>      then<br>         break 2<br>      else<br>         echo &quot;$var1 $var2&quot;<br>      fi<br>   done<br>done<br></code></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>NUMS=&quot;1 2 3 4 5 6 7&quot;<br><br>for NUM in $NUMS<br>do<br>   Q=`expr $NUM % 2`<br>   if [ $Q -eq 0 ]<br>   then<br>      echo &quot;Number is an even number!!&quot;<br>      continue<br>   fi<br>   echo &quot;Found odd number&quot;<br>done<br></code></pre></td></tr></table></figure><h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=10<br><br>until [ $a -lt 10 ]<br>do<br>   echo $a<br>   a=`expr $a + 1`<br>done<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 条件语句</title>
    <link href="/2022/02/25/Shell/2022-02-25-shell%20%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/02/25/Shell/2022-02-25-shell%20%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-条件语句"><a href="#shell-条件语句" class="headerlink" title="shell 条件语句"></a>shell 条件语句</h1><h1 id="if"><a href="#if" class="headerlink" title="if"></a>if</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">if test-commands; then<br>  consequent-commands;<br>[elif more-test-commands; then<br>  more-consequents;]<br>[else alternate-consequents;]<br>fi<br></code></pre></td></tr></table></figure><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">case word in<br>    [ [(] pattern [| pattern]…) command-list ;;]…<br>esac<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -n &quot;Enter the name of an animal: &quot;<br>read ANIMAL<br>echo -n &quot;The $ANIMAL has &quot;<br>case $ANIMAL in<br>  horse | dog | cat) echo -n &quot;four&quot;;;<br>  man | kangaroo ) echo -n &quot;two&quot;;;<br>  *) echo -n &quot;an unknown number of&quot;;;<br>esac<br>echo &quot; legs.&quot;<br></code></pre></td></tr></table></figure><p>备注：</p><ol><li><p><code>*)</code>相当于其他语言的default</p></li><li><p><code>;;</code>相当于break， <code>;&amp;</code>相当于fall through</p></li><li><p><code>|</code>分割多个模式，相当于or</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 特殊变量</title>
    <link href="/2022/02/25/Shell/2022-02-25-shell%20%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F/"/>
    <url>/2022/02/25/Shell/2022-02-25-shell%20%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><h2 id=""><a href="#" class="headerlink" title="$$"></a>$$</h2><p>当前 shell 的进程ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">echo</span> $$</span><br></code></pre></td></tr></table></figure><p>输出当前进程的pid</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">➜  ~ echo <span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><br><span class="hljs-number">19248</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>$0</th><th>当前脚本的文件名</th></tr></thead><tbody><tr><td>$n</td><td>当前脚本的参数，从1开始 <code>$1</code>第一个参数，<code>$2</code>第二个参数，<code>$n</code>第n个参数</td></tr><tr><td>$#</td><td>脚本参数的总个数</td></tr><tr><td>$*</td><td>脚本参数集合，所有的参数被双引号包裹。如果脚本2个参数，<code>$*</code>&#x3D;<code>&quot;$1 $2&quot;</code></td></tr><tr><td>$@</td><td>脚本参数集合，每个参数被单独的双引号包裹。如果脚本2个参数，<code>$*</code>&#x3D;<code>&quot;$1&quot; &quot;$2&quot;</code></td></tr><tr><td>$?</td><td>上个命令的返回值。</td></tr><tr><td>$$</td><td>当前shell 的进程ID。</td></tr><tr><td>$!</td><td>The process number of the last background command.</td></tr></tbody></table><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>echo &quot;File Name: $0&quot;<br>echo &quot;First Parameter : $1&quot;<br>echo &quot;Second Parameter : $2&quot;<br>echo &quot;Quoted Values: $@&quot;<br>echo &quot;Quoted Values: $*&quot;<br>echo &quot;Total Number of Parameters : $#&quot;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">./test.sh Zara Ali</span><br>File Name : ./test.sh<br>First Parameter : Zara<br>Second Parameter : Ali<br>Quoted Values: Zara Ali<br>Quoted Values: Zara Ali<br>Total Number of Parameters : 2<br></code></pre></td></tr></table></figure><h2 id="和"><a href="#和" class="headerlink" title="$* 和$@"></a><code>$* </code>和<code>$@</code></h2><p>the <code>$*</code> special parameter takes the entire list as one argument with spaces between and the <code>$@</code> special parameter takes the entire list and separates it into separate arguments.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>for TOKEN in $*<br>do<br>   echo $TOKEN<br>done<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">./test.sh Zara Ali 10 Years Old</span><br>Zara<br>Ali<br>10<br>Years<br>Old<br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="$?"></a><code>$?</code></h2><p>检查上个命令是否执行成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ pwd<br>/Users/yxb<br>➜  ~ echo $?<br>0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 运算符</title>
    <link href="/2022/02/25/Shell/2022-02-25-shell%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/02/25/Shell/2022-02-25-shell%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-运算符"><a href="#shell-运算符" class="headerlink" title="shell 运算符"></a>shell 运算符</h1><p>参考：<a href="https://www.tutorialspoint.com/unix/unix-basic-operators.htm">Unix &#x2F; Linux - Shell Basic Operators</a></p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>shell 本身不支持算数运算，使用<code>awk</code>  或者<code>expr</code>来实现。</p><p>示例： 两数相加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>val=`expr 2 + 2`<br>echo &quot;Total value : $val&quot;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Total value : 4<br></code></pre></td></tr></table></figure><p>假设a&#x3D;10，b&#x3D;20</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td><code>expr $a + $b</code>   &#x3D;  30</td></tr><tr><td>-</td><td>减</td><td><code>expr $a - $b</code> &#x3D; -10</td></tr><tr><td>*</td><td>乘</td><td><code>expr $a \* $b</code> &#x3D; 200</td></tr><tr><td>&#x2F;</td><td>除</td><td><code>expr $b / $a</code> &#x3D; 2</td></tr><tr><td>%</td><td>求余</td><td><code>expr $b % $a</code> &#x3D; 0</td></tr><tr><td>&#x3D;</td><td>赋值</td><td><code>a = $b</code></td></tr><tr><td>&#x3D;&#x3D;</td><td>判断相等</td><td><code>[ $a == $b ]</code></td></tr><tr><td>!&#x3D;</td><td>不等</td><td><code>[ $a != $b ]</code></td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>假设a&#x3D;10, b&#x3D;20</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>-eq</td><td>相等</td><td><code>[ $a -eq $b ]</code> is not true.</td></tr><tr><td>-ne</td><td>不等</td><td><code>[ $a -ne $b ] </code>is true.</td></tr><tr><td>-gt</td><td>大于</td><td><code>[ $a -gt $b ]</code> is not true.</td></tr><tr><td>-lt</td><td>小于</td><td><code>[ $a -lt $b ]</code> is true.</td></tr><tr><td>-ge</td><td>大于等于</td><td><code>[ $a -ge $b ]</code> is not true.</td></tr><tr><td>-le</td><td>小于等于</td><td><code>[ $a -le $b ]</code> is true.</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>假设a&#x3D;10, b&#x3D;20</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>!</td><td>逻辑非</td><td><code>[ ! false ]</code> is true.</td></tr><tr><td>-o</td><td>逻辑或</td><td><code>[ $a -lt 20 -o $b -gt 100 ]</code> is true.</td></tr><tr><td>-a</td><td>逻辑与</td><td><code>[ $a -lt 20 -a $b -gt 100 ]</code> is false.</td></tr></tbody></table><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>假设 a&#x3D;”abc”, b &#x3D;”efg”</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>相等</td><td><code>[ $a = $b ]</code>  is not true.</td></tr><tr><td>!&#x3D;</td><td>不等</td><td><code>[ $a != $b ]</code> is true.</td></tr><tr><td>-z</td><td>是否为空,  为空为true， 不空 false</td><td><code>[ -z $a ]</code>  is not true.</td></tr><tr><td>-n</td><td>是否非空， 非空为true， 空为false</td><td><code>[ -n $a ]</code> is not false.</td></tr><tr><td>str</td><td>是否非空，非空为true， 空为false</td><td><code>[ $a ]</code> is not false.</td></tr></tbody></table><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>-d file</td><td>检测 file 是否是目录</td><td><code>[ -d $file ]</code></td></tr><tr><td>-f file</td><td>检测是否是普通文件</td><td><code>[ -f $file ]</code></td></tr><tr><td>-r file</td><td>是否可读</td><td><code>[ -r $file ]</code></td></tr><tr><td>-w file</td><td>是否可写</td><td><code>[ -w $file ]</code></td></tr><tr><td>-x file</td><td>是否可执行</td><td><code>[ -x $file ]</code></td></tr><tr><td>-s file</td><td>文件大小是否大于0</td><td><code>[ -s $file ]</code></td></tr><tr><td>-e file</td><td>文件是否存在</td><td><code>[ -e $file ]</code></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell 脚本，带名字的参数</title>
    <link href="/2022/02/25/Shell/2022-03-09-shell%20%E8%84%9A%E6%9C%AC%EF%BC%8C%E5%B8%A6%E5%90%8D%E5%AD%97%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <url>/2022/02/25/Shell/2022-03-09-shell%20%E8%84%9A%E6%9C%AC%EF%BC%8C%E5%B8%A6%E5%90%8D%E5%AD%97%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-脚本，带名字的参数"><a href="#shell-脚本，带名字的参数" class="headerlink" title="shell 脚本，带名字的参数"></a>shell 脚本，带名字的参数</h1><p>参考： <a href="https://unix.stackexchange.com/questions/129391/passing-named-arguments-to-shell-scripts">bash - Passing named arguments to shell scripts - Unix &amp; Linux Stack Exchange</a></p><p>From <a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-parameter-expansion">3.5.3 Shell Parameter Expansion</a> of the GNU Bash manual:</p><blockquote><p><strong><code>$&#123;parameter:-word&#125;</code></strong><br>If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span><br><br>while [ $# -gt 0 ]; do<br>  case &quot;$1&quot; in<br>    -p|-p_out|--p_out)<br>      p_out=&quot;$2&quot;<br>      ;;<br>    -a|-arg_1|--arg_1)<br>      arg_1=&quot;$2&quot;<br>      ;;<br>    *)<br>      printf &quot;***************************\n&quot;<br>      printf &quot;* Error: Invalid argument.*\n&quot;<br>      printf &quot;***************************\n&quot;<br>      exit 1<br>  esac<br>  shift<br>  shift<br>done<br><br>echo &quot;Without default values:&quot;<br>echo &quot;p_out: $&#123;p_out&#125;&quot;<br>echo &quot;arg_1: $&#123;arg_1&#125;&quot;<br>echo<br>echo &quot;With default values:&quot;<br>echo &quot;p_out: $&#123;p_out:-\&quot;27\&quot;&#125;&quot;<br>echo &quot;arg_1: $&#123;arg_1:-\&quot;smarties cereal\&quot;&#125;&quot;<br></code></pre></td></tr></table></figure><p>调用方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shel">$ ./my-script.sh -a &quot;lofa&quot; -p &quot;miez&quot;<br>$ ./my-script.sh -arg_1 &quot;lofa&quot; --p_out &quot;miez&quot;<br>$ ./my-script.sh --arg_1 &quot;lofa&quot; -p &quot;miez&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的shell语句</title>
    <link href="/2022/02/24/Shell/%E5%B8%B8%E7%94%A8%E7%9A%84shell%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/02/24/Shell/%E5%B8%B8%E7%94%A8%E7%9A%84shell%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的shell语句"><a href="#常用的shell语句" class="headerlink" title="常用的shell语句"></a>常用的shell语句</h1><p><a href="https://blog.csdn.net/baidu_26678247/article/details/103024812">判断软件是否安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> [ ! -x <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v xcodeproj)</span>&quot;</span> ]; <span class="hljs-keyword">then</span> <br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;xcodeproj is not installed. installing...&quot;</span> &gt; &amp;2<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;run &#x27;gem install xcodeproj&#x27;&quot;</span><br>    gem install xcodeproj<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/242538/unix-shell-script-find-out-which-directory-the-script-file-resides">当前shell脚本所在目录</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SCRIPT_DIR=<span class="hljs-string">&quot;<span class="hljs-subst">$(cd <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>&quot;</span>; pwd)</span>&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
